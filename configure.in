dnl Process this file with autoconf to produce a configure script.
AC_REVISION($Id$)dnl

dnl FIXME: This file currently contains a lot of useful tests for things
dnl that autoconf doesn't know how to do natively.  Some of those have since
dnl been put into the autoconf source tree; others may have better versions
dnl available elsewhere.  No one, to my knowledge, has checked the macros in
dnl here against other sources, updated them to better versions if
dnl available, and donated our macros back if no one else has them.  This
dnl really should be done.

dnl A file that should always be in the root directory of the source tree,
dnl to make sure our source file was set correctly.
AC_INIT(Makefile.global.in)

dnl Replace the existing config.data with a message in case we abort.
echo > config/config.data <<EOF
# configure did not complete successfully.  Resolve problems and re-run.
EOF

dnl FIXME: These should be executable in the repository.
chmod +x config.sub config.guess

dnl Fix the paths.
AC_PREFIX_DEFAULT(/usr/local/news)
test "x$prefix" = xNONE && prefix=$ac_default_prefix
test "x$exec_prefix" = xNONE && exec_prefix=$ac_default_prefix

dnl Parse the arguments.  libtool, then specifying alternate paths, then
dnl various other compile options.

LIBTOOL=''
UPLIBTOOL=''
EXTOBJ='o'
EXTLIB='a'
AC_ARG_ENABLE(libtool,
    [  --enable-libtool        Use libtool for lib generation [default=no]],
    [
        if test "$enableval" = yes ; then
            LIBTOOL='$(SHELL) ../libtool'
            UPLIBTOOL='$(SHELL) ../../libtool'
            EXTOBJ='lo'
            EXTLIB='la'
        fi
    ])
AC_SUBST(LIBTOOL)
AC_SUBST(UPLIBTOOL)
AC_SUBST(EXTOBJ)
AC_SUBST(EXTLIB)

AC_ARG_WITH(control-dir,
    [  --with-control-dir=PATH Control programs [PREFIX/bin/control]],
    CONTROLDIR=$with_control_dir,
    CONTROLDIR=$prefix/bin/control)
AC_SUBST(CONTROLDIR)

AC_ARG_WITH(db-dir,
    [  --with-db-dir=PATH      News database files [PREFIX/db]],
    DBDIR=$with_db_dir,
    DBDIR=$prefix/db)
AC_SUBST(DBDIR)

AC_ARG_WITH(etc-dir,
    [  --with-etc-dir=PATH     News config files [PREFIX/etc]],
    ETCDIR=$with_etc_dir,
    ETCDIR=$prefix/etc)
AC_SUBST(ETCDIR)

AC_ARG_WITH(filter-dir,
    [  --with-filter-dir=PATH  Embedded filters [PREFIX/bin/filter]],
    FILTERDIR=$with_filter_dir,
    FILTERDIR=$prefix/bin/filter)
AC_SUBST(FILTERDIR)

AC_ARG_WITH(lib-dir,
    [  --with-lib-dir=PATH     News lib files [PREFIX/lib]],
    LIBDIR=$with_lib_dir,
    LIBDIR=$prefix/lib)
AC_SUBST(LIBDIR)

AC_ARG_WITH(log-dir,
    [  --with-log-dir=PATH     Logging directory [PREFIX/log]],
    LOGDIR=$with_log_dir,
    LOGDIR=$prefix/log)
AC_SUBST(LOGDIR)

AC_ARG_WITH(run-dir,
    [  --with-run-dir=PATH     News pid/runtime files [PREFIX/run]],
    RUNDIR=$with_run_dir,
    RUNDIR=$prefix/run)
AC_SUBST(RUNDIR)

AC_ARG_WITH(spool-dir,
    [  --with-spool-dir=PATH   News storage [PREFIX/spool]],
    SPOOLDIR=$with_spool_dir,
    SPOOLDIR=$prefix/spool)
AC_SUBST(SPOOLDIR)

AC_ARG_WITH(tmp-path,
    [  --with-tmp-path=PATH    Temporary files directory [PREFIX/tmp]],
    TMPPATH=$with_tmp_path,
    TMPPATH=$prefix/tmp)
AC_SUBST(TMPPATH)

AC_ARG_WITH(sendmail,
    [  --with-sendmail=PATH    Specify path to sendmail],
    SENDMAIL=$with_sendmail)

AC_ARG_WITH(news-user,
    [  --with-news-user=USER   News user id [news]],
    NEWSUSER=$with_news_user,
    NEWSUSER=news)
AC_SUBST(NEWSUSER)

AC_ARG_WITH(news-group,
    [  --with-news-group=GROUP News group id [news]],
    NEWSGRP=$with_news_group,
    NEWSGRP=news)
AC_SUBST(NEWSGRP)

AC_ARG_WITH(news-master,
    [  --with-news-master=USER News master [usenet]],
    NEWSMASTER=$with_news_master,
    NEWSMASTER=usenet)
AC_SUBST(NEWSMASTER)

NEWSUMASK=02
FILEMODE=0664
DIRMODE=0775
RUNDIRMODE=0770
AC_ARG_WITH(news-umask,
    [  --with-news-umask=UMASK umask for news files [002]],
    with_news_umask=`echo "$with_news_umask" | sed 's/^0*//'`
    if test "x$with_news_umask" = x22 ; then
        NEWSUMASK=022
        FILEMODE=0644
        DIRMODE=0755
        RUNDIRMODE=0750
    else
        if test "x$with_news_umask" != x2 ; then
            AC_MSG_ERROR(Valid umasks are 02 or 022)
        fi
    fi)
AC_SUBST(NEWSUMASK)
AC_SUBST(FILEMODE)
AC_SUBST(DIRMODE)
AC_SUBST(RUNDIRMODE)

AC_ARG_WITH(innd-port,
    [  --with-innd-port=PORT   Additional low-numbered port for inndstart],
    INND_PORT=$with_innd_port)
AC_DEFINE_UNQUOTED(INND_PORT, $INND_PORT)

AC_ARG_ENABLE(tagged-hash,
    [  --enable-tagged-hash    Use tagged hash table for history],
    DO_DBZ_TAGGED_HASH=DO,
    DO_DBZ_TAGGED_HASH=DONT)
AC_SUBST(DO_DBZ_TAGGED_HASH)

INEWSMODE=2555
AC_ARG_ENABLE(setgid-inews,
    [  --disable-setgid-inews  Don't install inews setgid],
    if test "x$enableval" = xno ; then
        INEWSMODE=0550
    fi)
AC_SUBST(INEWSMODE)

RNEWSGRP=uucp
RNEWSMODE=4550
AC_ARG_ENABLE(uucp-rnews,
    [  --disable-uucp-rnews    Don't install rnews setuid, group uucp],
    if test "x$enableval" = xno ; then
        RNEWSGRP=$NEWSGRP
        RNEWSMODE=0500
    fi)
AC_SUBST(RNEWSGRP)
AC_SUBST(RNEWSMODE)

AC_ARG_WITH(perl,
    [  --with-perl             Embedded Perl script support],
    DO_PERL=DO,
    DO_PERL=DONT)
AC_SUBST(DO_PERL)

AC_ARG_WITH(python,
    [  --with-python           Embedded Python module support],
    DO_PYTHON='define',
    DO_PYTHON='undef')
AC_SUBST(DO_PYTHON)

AC_ARG_WITH(tcl,
    [  --with-tcl              Embedded TCL script support],
    DO_TCL=DO TCL_LIB="-ltcl -lm" TCL_INC="-I/usr/local/include",
    DO_TCL=DONT TCL_LIB="" TCL_INC="")
AC_SUBST(DO_TCL)
AC_SUBST(TCL_LIB)
AC_SUBST(TCL_INC)

AC_ARG_WITH(largefiles,
    [  --with-largefiles       Support for files greater than 2GB],
    DO_LFS=DO,
    DO_LFS=DONT)
AC_SUBST(DO_LFS)

AC_ARG_WITH(log-compress,
    [  --with-log-compress=METHOD   Log compression method [gzip]],
    LOG_COMPRESS=$with_log_compress,
    LOG_COMPRESS=gzip)
case "$LOG_COMPRESS" in
bzip2) LOG_COMPRESSEXT=".bz2" ;;
gzip)  LOG_COMPRESSEXT=".gz"  ;;
*)     LOG_COMPRESSEXT=".Z"   ;;
esac
AC_SUBST(LOG_COMPRESS)
AC_SUBST(LOG_COMPRESSEXT)

dnl FIXME: Should be replaced with @mandir@ anywhere it occurs.
MANDIR=`eval echo $mandir`
AC_SUBST(MANDIR)

dnl FIXME: hostname is more reliable on most systems; uname may truncate.
HOSTNAME=`uname -n`
AC_SUBST(HOSTNAME)

dnl If libtool was requested, configure it now.
if test x"$EXTOBJ" = xlo ; then
    AM_PROG_LIBTOOL
fi

dnl Checks for programs.
AC_PROG_CC
AC_PROG_GCC_TRADITIONAL
AC_PROG_LEX
AC_PROG_LN_S            dnl NOTUSED
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_YACC

dnl System specific checks.
AC_AIX                  dnl NOTUSED
AC_ISC_POSIX

dnl We only use this check in one place, namely below to decide that
dnl memory.h is useless on Digital UNIX.  Host-specific checks are evil
dnl and should be avoided whenever possible, and I think this one can be;
dnl can't we just go with the results of AC_HEADER_STDC?
AC_DEFUN(INN_DEC_UNIX, [
    AC_REQUIRE([AC_PROG_CC])dnl
    AC_BEFORE([$0], [AC_TRY_COMPILE])dnl
    AC_BEFORE([$0], [AC_TRY_RUN])dnl
    AC_MSG_CHECKING(for Digital Unix)
    if test -f /osf_boot ; then
        AC_MSG_RESULT(yes)
        DEC_UNIX=yes
    else
        AC_MSG_RESULT(no)
        DEC_UNIX=
    fi
])
INN_DEC_UNIX

dnl Checks for pathnames.

dnl FIXME: Should just be CTAGS.
AC_PATH_PROG(PATH_CTAGS, ctags, echo)
if test x"$PATH_CTAGS" != xecho ; then
    PATH_CTAGS="$PATH_CTAGS -t -w"
fi

dnl Use INN_PATH_PROG if it's an error not to find a program.
AC_DEFUN(INN_ENSURE_PATH_PROG, [
    AC_PATH_PROG($1, $2)
    if test -z "${$1}" ; then
        AC_MSG_ERROR($2 was not found in path and is required)
    fi
])

INN_ENSURE_PATH_PROG(_PATH_AWK,awk)
INN_ENSURE_PATH_PROG(_PATH_EGREP,egrep)
INN_ENSURE_PATH_PROG(_PATH_PERL,perl)
INN_ENSURE_PATH_PROG(_PATH_SH,sh)
INN_ENSURE_PATH_PROG(_PATH_SED,sed)
INN_ENSURE_PATH_PROG(_PATH_SORT,sort)

dnl Check for a required version of Perl.  We have to use English to get
dnl around the fact Perl's version variable is $], a variable that m4 simply
dnl cannot cope with (even with changequote).
AC_DEFUN(INN_PERL_VERSION,
    AC_CACHE_CHECK(for Perl version, inn_cv_perl_version, [
    if $_PATH_PERL -e 'require $1;' > /dev/null 2>&1 ; then
        inn_cv_perl_version=`$_PATH_PERL -MEnglish -e 'print $PERL_VERSION'`
    else
        AC_MSG_ERROR(Perl $1 or greater is required)
    fi
]))

dnl If DO_PERL is set, require 5.004; otherwise, 5.003 is sufficient.
if test x"$DO_PERL" = xDO ; then
    INN_PERL_VERSION(5.004)
else
    INN_PERL_VERSION(5.003)
fi

dnl Look for PGP 5.0's pgpv, or pgp if pgpv is not found.
pgpverify=true
AC_PATH_PROGS(_PATH_PGP, pgpv pgp)
if test -z "$_PATH_PGP" ; then
    pgpverify=false
fi
AC_SUBST(pgpverify)

dnl Look for a program that takes an ftp URL as a command line argument and
dnl retrieves the file to the current directory.  Shame we can't also use
dnl lynx -source; it only writes to stdout.
AC_PATH_PROGS(GETFTP, ncftp wget, $prefix/bin/simpleftp)

dnl If we're going to be configuring large file support, we'll need getconf.
if test x"$DO_LFS" = xDO ; then
    AC_PATH_PROG(GETCONF, getconf)
    if test -z "$GETCONF" ; then
      AC_MSG_ERROR(getconf not found, required to configure largefile support)
    fi
fi

dnl Make sure we have both compress and gzip, since the UUCP batching
dnl scripts require both.  Then, if we're using a log compression method
dnl other than compress or gzip, check for it too and make sure it exists.
dnl If we don't find compress or gzip, just use the bare program names in
dnl the hope that the path will be better at the time the script runs (or
dnl that the script will never run).
case "$LOG_COMPRESS" in
compress|gzip) ;;
*)             INN_ENSURE_PATH_PROG(LOG_COMPRESS, "$LOG_COMPRESS")
esac
AC_PATH_PROG(COMPRESS, compress, compress)
if test x"$LOG_COMPRESS" = xcompress ; then
    if test x"$COMPRESS" = xcompress ; then
        AC_MSG_ERROR(compress not found but specified for log compression)
    fi
    LOG_COMPRESS="$COMPRESS"
fi
AC_PATH_PROG(GZIP, gzip, gzip)
if test x"$LOG_COMPRESS" = xgzip ; then
    if test x"$GZIP" = xgzip ; then
        AC_MSG_ERROR(gzip not found but specified for log compression)
    fi
    LOG_COMPRESS="$GZIP"
fi

dnl The sendmail code takes this philosophy:  We assume that there are some
dnl sites which don't have sendmail in the path for a reason, whatever that
dnl may be.  And we also assume that there are some of those sites which
dnl don't want us to automatically pick one from a likely place.  So we
dnl detect it, then search for it, but then notify the human.
if test "${with_sendmail+set}" = set ; then
    AC_MSG_CHECKING(for sendmail)
    AC_MSG_RESULT($SENDMAIL)
else
    AC_PATH_PROG(SENDMAIL, sendmail)
    if test -z "$SENDMAIL" ; then
        echo ''
        echo 'No sendmail in path.  Looking in likely places....'
        echo ''
        AC_PATH_PROG(SENDMAIL, sendmail, ,
            $PATH:/usr/lib:/usr/sbin:/usr/ucblib)
        echo ''
        if test -n "$SENDMAIL" ; then
            echo "sendmail was found at $SENDMAIL.  If this is correct, re-run"
            echo with --with-sendmail=$SENDMAIL.
            echo ''
        fi
        AC_MSG_ERROR(sendmail not found, re-run with --with-sendmail)
    fi
fi

dnl FIXME: innshellvars* wants to know if we have uustat, send-uucp expects
dnl it to be in the old subst DO/DONT format.  Should take a path.
AC_CHECK_PROG(HAVE_UUSTAT, uustat, DO, DONT)
AC_SUBST(HAVE_UUSTAT)

dnl If we're compiling with Python support, make sure Python is available.
if test x"$DO_PYTHON" = xdefine ; then
    INN_ENSURE_PATH_PROG(_PATH_PYTHON, python)
fi

dnl Checks for libraries.  Remember that these tests are done by linking a
dnl small program referring to the function with that library, so if the
dnl function exists in libc and the library exists, the test will always
dnl succeed regardless of whether the library is needed for the function.
dnl In several cases, we explicitly just add the library to LIBS on success
dnl rather than using default actions so as not to clutter config.h with
dnl defines we never use.

dnl Several OSes have crypt() in a seperate library for legal reasons.
AC_CHECK_LIB(crypt, crypt, LIBS="$LIBS -lcrypt")

dnl Check for setproctitle in libc first, then libutil if not found there.
AC_CHECK_FUNCS(setproctitle, AC_DEFINE(HAVE_SETPROCTITLE),
    AC_CHECK_LIB(util, setproctitle, [
        LIBS="$LIBS -lutil"
        AC_DEFINE(HAVE_SETPROCTITLE)
        inn_lib_util=1
    ]))

dnl FIXME: What platform is this actually needed on?
AC_CHECK_LIB(44bsd, inet_addr, LIBS="$LIBS -l44bsd")

dnl The rat's nest of networking libraries.  The common cases are not to
dnl need any extra libraries, or to need -lsocket -lnsl.  We need to avoid
dnl linking with libnsl unless we need it, though, since on some OSes where
dnl it isn't necessary it will totally break networking.  Unisys also
dnl includes gethostbyname in libsocket but needs libnsl for socket().
dnl Always link with libresolv if it's found.
AC_CHECK_FUNC(gethostbyname, , [
    AC_CHECK_LIB(nsl, gethostbyname, LIBS="$LIBS -lnsl")
])
AC_CHECK_LIB(resolv, gethostbyname, LIBS="$LIBS -lresolv")
AC_CHECK_FUNC(socket, , [
    AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket", [
        AC_CHECK_LIB(nsl, socket, LIBS="$LIBS -lsocket -lnsl", , -lsocket)
    ], "$LIBS")
])

dnl By this point, we almost certainly have inet_aton, but if we don't,
dnl check in another place.  If we still can't find it, add it to LIBOBJS.
AC_CHECK_FUNC(inet_aton, , [
    AC_CHECK_LIB(bind, inet_aton, LIBS="$LIBS -bind",
                 LIBOBJS="$LIBOBJS inet_addr.o")
])

dnl INN currently doesn't use the threading libraries, but check for them in
dnl preparation for the day we do.
AC_CHECK_LIB(thread, pthread_create, [
    inn_have_threads=1
    THREADLIB=-lthread
], [
    AC_CHECK_LIB(pthread, pthread_create, [
        inn_have_threads=1
        THREADLIB=-lpthread
    ])
])
if test -n "$inn_have_threads" ; then
    THREADFLAGS="-D_REENTRANT -DPOSIX_PTHREAD_SEMANTICS -D_THREAD_SAFE"
fi
AC_SUBST(THREADLIB)
AC_SUBST(THREADFLAGS)

dnl FIXME: These shouldn't go into the global LIBS variable.  getspnam() is
dnl only used by the authentication programs.
AC_CHECK_LIB(shadow, getspnam)

dnl FIXME: This should be combined with AC_FUNC_GETLOADAVG
AC_CHECK_LIB(elf, nlist)

dnl AIX needs libbsd for flock().
AC_CHECK_LIB(bsd, flock)

dnl FIXME: This is only used by the keywords code in innd/art.c and
dnl shouldn't be in the global LIBS variable.
AC_CHECK_LIB(regex, regexec)

dnl Some of the authentication programs want to be able to open dbm files.
AC_CHECK_LIB(ndbm, dbm_open, DBM_LIB="-lndbm")
AC_CHECK_LIB(dbm, dbm_open, DBM_LIB="-ldbm")
AC_SUBST(DBM_LIB)

dnl Libraries and flags for embedded Perl.
if test x"$DO_PERL" = xDO ; then
    AC_MSG_CHECKING(for Perl linkage)
    inn_perl_core_path=`$_PATH_PERL -MConfig -e 'print $Config{archlib}'`
    inn_perl_core_libs=`$_PATH_PERL -MExtUtils::Embed -e ldopts | tail -1`
    for i in $LIBS ; do
        inn_perl_core_libs=`echo "$inn_perl_core_libs" | sed "s/ $i//"`
    done
    inn_perl_core_libs=`echo "$inn_perl_core_libs" | sed 's/^  *//'`
    PERL_LIB="$inn_perl_core_libs"
    PERL_INC="-I${inn_perl_core_path}/CORE"
    AC_MSG_RESULT($inn_perl_core_path)
else
    PERL_LIB=''
    PERL_INC=''
fi
AC_SUBST(PERL_LIB)
AC_SUBST(PERL_INC)

dnl Libraries and flags for embedded Python.
dnl FIXME: I wish there was a less icky way to get this.
if test x"$DO_PYTHON" = xdefine ; then
    AC_MSG_CHECKING(for Python linkage)
    py_prefix=`$_PATH_PYTHON -c 'import sys; print sys.prefix'`
    py_ver=`$_PATH_PYTHON -c 'import sys; print sys.version[[:3]]'`
    py_libdir="${py_prefix}/lib/python${py_ver}"
    PYTHON_INC="-I${py_prefix}/include/python${py_ver}"
    py_libs=`grep '^LIBS=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
    py_libc=`grep '^LIBC=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
    py_libm=`grep '^LIBM=' $py_libdir/config/Makefile | sed -e 's/^.*=//'`
    PYTHON_LIB="-L$py_libdir/config $py_libs $py_libc $py_libm -lpython$py_ver"
    PYTHON_LIB=`echo $PYTHON_LIB | sed -e 's/[ \\t]*/ /g'`
    AC_MSG_RESULT($py_libdir)
else
    PYTHON_LIB=""
    PYTHON_INC=""
fi
AC_SUBST(PYTHON_LIB)
AC_SUBST(PYTHON_INC)

dnl If configuring with large file support, use getconf to set our compile
dnl and link flags and check for some necessary functions.
if test x"$DO_LFS" = xDO ; then
    AC_MSG_CHECKING(for largefile linkage)
    LFS_CFLAGS=`$GETCONF LFS_CFLAGS`
    LFS_LDFLAGS=`$GETCONF LFS_LDFLAGS`
    LFS_LIBS=`$GETCONF LFS_LIBS`
    AC_SUBST(LFS_CFLAGS)
    AC_SUBST(LFS_LDFLAGS)
    AC_SUBST(LFS_LIBS)
    AC_MSG_RESULT(ok)
    AC_CHECK_FUNCS(ftello fseeko)
fi

dnl Special checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_TIME          dnl NOTUSED
AC_HEADER_SYS_WAIT      dnl NOTUSED

dnl Generic checks for header files.
dnl NOTUSED: sgtty.h sys/file.h sys/ioctl.h sys/select.h sys/time.h
dnl
dnl FIXME: Checks for stdlib, stdarg, etc. are somewhat redundant with the
dnl overall HEADER_STDC check.  Some of the other checks here are probably
dnl also redundant with other standard checks.  This code, config.h, and
dnl clibrary.h badly need an overhaul.

AC_CHECK_HEADERS(fcntl.h limits.h memory.h sgtty.h stdarg.h)
AC_CHECK_HEADERS(stdlib.h string.h sys/file.h sys/filio.h sys/ioctl.h)
AC_CHECK_HEADERS(sys/select.h sys/signal.h sys/time.h unistd.h)
AC_CHECK_HEADERS(varargs.h wait.h getopt.h sys/sysinfo.h)
AC_CHECK_HEADERS(ndbm.h db1/ndbm.h)

dnl malloc.h doesn't contain function declarations for malloc() and friends
dnl on Digital Unix.
dnl
dnl FIXME: This check should be irrelevant; AC_HEADER_STDC takes care of
dnl this and stdlib.h should be used in preference to malloc.h if
dnl STDC_HEADERS is defined by it (which is the case on Digital Unix).

if test -z "$DEC_UNIX" ; then
    AC_CHECK_HEADERS(malloc.h)
else
    AC_MSG_WARN(not checking for malloc.h as this is Digital Unix)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_STRUCT_ST_BLKSIZE
AC_STRUCT_TM            dnl NOTUSED

dnl FIXME: These all need config.h magic that doesn't appear to be present.
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_UID_T
AC_TYPE_OFF_T
AC_TYPE_PID_T

dnl From Paul D. Smith <psmith@baynetworks.com> on the autoconf mailing
dnl list, this is a version of AC_CHECK_TYPE that allows specification of
dnl additional headers.  It's a modified version of the standard autoconf
dnl macro.
AC_DEFUN(INN_CHECK_TYPE, [
    AC_REQUIRE([AC_HEADER_STDC])dnl
    AC_MSG_CHECKING(for $1)
    AC_CACHE_VAL(ac_cv_type_$1, [AC_EGREP_CPP(dnl
changequote(<<, >>)dnl
<<(^|[^a-zA-Z_0-9])$1[^a-zA-Z_0-9]>>dnl
changequote([, ]), [
#include <sys/types.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#endif
$3],
        ac_cv_type_$1=yes,
        ac_cv_type_$1=no
    )])dnl
    AC_MSG_RESULT($ac_cv_type_$1)
    if test x"$ac_cv_type_$1" = xno ; then
        AC_DEFINE($1, $2)
    fi
])

dnl If sig_atomic_t is available, use it instead of int as the type of a
dnl variable that can be set inside signal handlers.
INN_CHECK_TYPE(sig_atomic_t, int, [#include <signal.h>])

dnl FIXME: Old subst linkage.
if test "$ac_cv_type_sig_atomic_t" = yes ; then
    ac_cv_type_atomic=sig_atomic_t
else
    ac_cv_type_atomic="$ac_cv_type_sig_atomic_t"
fi
AC_SUBST(ac_cv_type_atomic)

dnl FIXME: The external variable timezone is available on some platforms and
dnl accomplishes the same purpose (but is more standard).
AC_CACHE_CHECK(for tm_gmtoff in struct tm, inn_cv_struct_tm_gmtoff,
    AC_TRY_LINK([#include <time.h>],
        [struct tm t; t.tm_gmtoff = 0],
        inn_cv_struct_tm_gmtoff=yes,
        inn_cv_struct_tm_gmtoff=no))
if test "$inn_cv_struct_tm_gmtoff" = yes ; then
    AC_DEFINE(HAVE_TM_GMTOFF)
fi

dnl FIXME: You don't want to use this result on HP-UX; see clibrary.h.
dnl Plus, according to the autoconf docs, you want to prefer the return type
dnl of int rather than the union return type, and define your own macros if
dnl HAVE_SYS_WAIT_H isn't true.  See docs in AC_HEADER_SYS_WAIT.
AC_CACHE_CHECK(for union wait, inn_cv_union_wait,
    AC_TRY_LINK([
#ifdef HAVE_WAIT_H
# include <wait.h>
#else
# include <sys/wait.h>
#endif],
        [union wait w],
        inn_cv_union_wait=yes,
        inn_cv_union_wait=no))
if test "$inn_cv_union_wait" = yes ; then
    AC_DEFINE(HAVE_UNION_WAIT)
fi

dnl Find a 32 bit type, by trying likely candidates.
dnl FIXME: Old subst linkage.
AC_CHECK_SIZEOF(int, 4)
if test "$ac_cv_sizeof_int" = 4 ; then
    ac_cv_subst_int32_t=int
else
    AC_CHECK_SIZEOF(long, 4)
    if test "$ac_cv_sizeof_long" = 4 ; then
        ac_cv_subst_int32_t=long
    else
	AC_CHECK_SIZEOF(short, 2)
        if test "$ac_cv_sizeof_short" = 4 ; then
            ac_cv_subst_int32_t=short
        else
            AC_MSG_ERROR(no 32 bits integer available)
	fi
    fi
fi
AC_SUBST(ac_cv_subst_int32_t)

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_SETVBUF_REVERSED        dnl NOTUSED
AC_FUNC_VFORK
AC_FUNC_VPRINTF                 dnl NOTUSED

dnl FIXME: Old subst linkage
AC_TYPE_SIGNAL
AC_SUBST(ac_cv_type_signal)

dnl Check for various other functions.
dnl
dnl NOTUSED: gethostname mkdir mkfifo select strcspn strspn strstr
dnl
dnl FIXME: Some of these are only used internally and shouldn't export stuff
dnl into config.h.  Also, there used to be a comment that getdtab was a
dnl permanent part of INN?

AC_CHECK_FUNC(syslog, , AC_MSG_ERROR(syslog not found, required by INN))

AC_CHECK_FUNCS(fchmod getdtab gethostname getrusage)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(mkdir mkfifo select setbuffer)
AC_CHECK_FUNCS(setsid strcspn)
AC_CHECK_FUNCS(strspn strstr symlink sysconf ulimit)
AC_CHECK_FUNCS(waitpid socketpair getpagesize getspnam pwrite pread)

dnl Locking style.
AC_CHECK_FUNCS(flock lockf fcntl)

AC_REPLACE_FUNCS(mktemp memchr memcpy memmove memset strcasecmp strchr)
AC_REPLACE_FUNCS(strerror strrchr)

MISSING_OBJ="$LIBOBJS"
MISSING_SRC=`echo "$MISSING_OBJ" | sed 's/\.o/.c/g'`

if test "$ac_cv_func_strcasecmp" = no ; then
    MISSING_MAN=strcasecmp.3
else
    MISSING_MAN=''
fi

AC_SUBST(MISSING_MAN)
AC_SUBST(MISSING_SRC)
AC_SUBST(MISSING_OBJ)

dnl Figure out how to get file system information for inndf.
AC_CHECK_FUNCS(statvfs, AC_DEFINE(HAVE_STATVFS), [
    AC_CHECK_FUNCS(statfs)
    AC_CHECK_HEADERS(sys/vfs.h sys/param.h sys/mount.h)
])

dnl We need both *rlimit functions.
AC_CHECK_FUNC(getrlimit, AC_CHECK_FUNC(setrlimit, AC_DEFINE(HAVE_RLIMIT)))

dnl This portion is similar to what AC_FUNC_MMAP does, only it tests shared,
dnl non-fixed mmaps.

AC_CACHE_CHECK(for working mmap, ac_cv_func_mmap_shared,
    [AC_TRY_RUN([
/* test shared mmap */
#include <sys/types.h>
#include <fcntl.h>
#include <sys/mman.h>

/* This mess was copied from the GNU getpagesize.h.  */
#ifndef HAVE_GETPAGESIZE
# ifdef HAVE_UNISTD_H
#  include <unistd.h>
# endif

/* Assume that all systems that can run configure have sys/param.h.  */
# ifndef HAVE_SYS_PARAM_H
#  define HAVE_SYS_PARAM_H 1
# endif

# ifdef _SC_PAGESIZE
#  define getpagesize() sysconf(_SC_PAGESIZE)
# else /* no _SC_PAGESIZE */
#  ifdef HAVE_SYS_PARAM_H
#   include <sys/param.h>
#   ifdef EXEC_PAGESIZE
#    define getpagesize() EXEC_PAGESIZE
#   else /* no EXEC_PAGESIZE */
#    ifdef NBPG
#     define getpagesize() NBPG * CLSIZE
#     ifndef CLSIZE
#      define CLSIZE 1
#     endif /* no CLSIZE */
#    else /* no NBPG */
#     ifdef NBPC
#      define getpagesize() NBPC
#     else /* no NBPC */
#      ifdef PAGESIZE
#       define getpagesize() PAGESIZE
#      endif /* PAGESIZE */
#     endif /* no NBPC */
#    endif /* no NBPG */
#   endif /* no EXEC_PAGESIZE */
#  else /* no HAVE_SYS_PARAM_H */
#   define getpagesize() 8192   /* punt totally */
#  endif /* no HAVE_SYS_PARAM_H */
# endif /* no _SC_PAGESIZE */

#endif /* no HAVE_GETPAGESIZE */

#ifdef __cplusplus
extern "C" { void *malloc(unsigned); }
#else
char *malloc();
#endif

int
main()
{
        char *data, *data2;
        int i, pagesize;
        int fd;

        pagesize = getpagesize();

        /*
         * First, make a file with some known garbage in it.
         */
        data = malloc(pagesize);
        if (!data)
                exit(1);
        for (i = 0; i < pagesize; ++i)
                *(data + i) = rand();
        umask(0);
        fd = creat("conftestmmaps", 0600);
        if (fd < 0)
                exit(1);
        if (write(fd, data, pagesize) != pagesize)
                exit(1);
        close(fd);

        /*
         * Next, try to mmap the file.  If we can,
         * also make sure that we see the same garbage.
         */
        fd = open("conftestmmaps", O_RDWR);
        if (fd < 0)
                exit(1);
        if (! (data2 = mmap((void*)0, pagesize, PROT_READ | PROT_WRITE,
            MAP_SHARED, fd, 0L)) )
                exit(1);
        for (i = 0; i < pagesize; ++i)
                if (*(data + i) != *(data2 + i))
                        exit(1);

        close(fd);
        unlink("conftestmmaps");
        exit(0);
}
],
    ac_cv_func_mmap_shared=yes,
    ac_cv_func_mmap_shared=no,
    ac_cv_func_mmap_shared=no)
])
if test $ac_cv_func_mmap_shared = yes ; then
    AC_DEFINE(HAVE_MMAP)
    AC_CHECK_FUNCS(madvise)
fi

AC_CACHE_CHECK(whether msync is needed, ac_cv_func_need_msync,
    [AC_TRY_RUN([
/* test shared mmap (msync) */
#include <sys/types.h>
#include <fcntl.h>
#include <sys/mman.h>

/* This mess was copied from the GNU getpagesize.h.  */
#ifndef HAVE_GETPAGESIZE
# ifdef HAVE_UNISTD_H
#  include <unistd.h>
# endif

/* Assume that all systems that can run configure have sys/param.h.  */
# ifndef HAVE_SYS_PARAM_H
#  define HAVE_SYS_PARAM_H 1
# endif

# ifdef _SC_PAGESIZE
#  define getpagesize() sysconf(_SC_PAGESIZE)
# else /* no _SC_PAGESIZE */
#  ifdef HAVE_SYS_PARAM_H
#   include <sys/param.h>
#   ifdef EXEC_PAGESIZE
#    define getpagesize() EXEC_PAGESIZE
#   else /* no EXEC_PAGESIZE */
#    ifdef NBPG
#     define getpagesize() NBPG * CLSIZE
#     ifndef CLSIZE
#      define CLSIZE 1
#     endif /* no CLSIZE */
#    else /* no NBPG */
#     ifdef NBPC
#      define getpagesize() NBPC
#     else /* no NBPC */
#      ifdef PAGESIZE
#       define getpagesize() PAGESIZE
#      endif /* PAGESIZE */
#     endif /* no NBPC */
#    endif /* no NBPG */
#   endif /* no EXEC_PAGESIZE */
#  else /* no HAVE_SYS_PARAM_H */
#   define getpagesize() 8192   /* punt totally */
#  endif /* no HAVE_SYS_PARAM_H */
# endif /* no _SC_PAGESIZE */

#endif /* no HAVE_GETPAGESIZE */

#ifdef __cplusplus
extern "C" { void *malloc(unsigned); }
#else
char *malloc();
#endif

int
main()
{
        char *data, *data2, *data3;
        int i, pagesize;
        int fd, rval;

        pagesize = getpagesize();

        /*
         * First, make a file with some known garbage in it.
         */
        data = malloc(pagesize);
        if (!data)
                exit(1);
        for (i = 0; i < pagesize; ++i)
                *(data + i) = rand();
        umask(0);
        fd = creat("conftestmmapm", 0600);
        if (fd < 0)
                exit(1);
        if (write(fd, data, pagesize) != pagesize)
                exit(1);
        close(fd);

        /*
         * Next, try to mmap the file.
         */
        fd = open("conftestmmapm", O_RDWR);
        if (fd < 0)
                exit(1);
        if (! (data2 = mmap((void*)0, pagesize, PROT_READ | PROT_WRITE,
            MAP_SHARED, fd, 0L)) )
                exit(1);

        /*
         * Finally, see if changes to the mapped area automatically
         * percolate back to the file as seen by read().
         * I.E., msync is not needed
         */
	rval = 0;
        for (i = 0; i < pagesize; ++i)
                *(data2 + i) = *(data2 + i) + 1;
        data3 = malloc(pagesize);
        if (!data3)
                exit(1);
        if (read(fd, data3, pagesize) != pagesize)
                exit(1);
        for (i = 0; i < pagesize; ++i)
                if (*(data + i) != *(data3 + i))
                        rval = 1;
        close(fd);
        unlink("conftestmmapm");
        exit(rval);
}
],
    ac_cv_func_need_msync=yes,
    ac_cv_func_need_msync=no,
    ac_cv_func_need_msync=no)
])

dnl Turn on keyword support if we have the regex library.
dnl
dnl FIXME: This code makes no sense to me at all.  What is it supposed to
dnl be doing?  ac_cv_lib_regex_regexec isn't set by anything previous to
dnl this, and it seems like we're setting DO_KEYWORDS only if regexec exists
dnl in libc but *not* in libregex?
if test $ac_cv_lib_regex_regexec = no; then
    AC_CHECK_FUNC(regexec, DO_KEYWORDS=DO, DO_KEYWORDS=DONT)
fi
AC_SUBST(DO_KEYWORDS)

dnl FIXME: I think we only need this if we need msync().
AC_CACHE_CHECK(for three argument msync, inn_cv_func_msync_3_args,
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/mman.h>],
        [char *p; int psize; msync(p,psize,MS_ASYNC); ],
        inn_cv_func_msync_3_args=yes,
        inn_cv_func_msync_3_args=no))
if test "$inn_cv_func_msync_3_args" = yes ; then
    AC_DEFINE(HAVE_MSYNC_3_ARG)
fi

dnl Various checks for return types.  If we're trying to decide between an
dnl int and a void, we can just try to compile a program that assigns the
dnl result of the function to a variable.  Otherwise, try to compile a
dnl function that prototypes the function and see if that fails.
dnl
dnl FIXME: Old subst linkage.
dnl FIXME: In several cases here, I think we only cared for lint, and we
dnl don't run lint any more.  So we could probably get rid of a bunch of
dnl this.

AC_CACHE_CHECK(for return type of abort, ac_cv_type_abort,
    AC_TRY_COMPILE([
#ifdef STDC_HEADERS
# include <stdlib.h>
#endif],
    [int a;a=abort()],
    ac_cv_type_abort=int,
    ac_cv_type_abort=void))
AC_SUBST(ac_cv_type_abort)

AC_CACHE_CHECK(for return type of alarm, ac_cv_type_alarm,
    AC_TRY_COMPILE([
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif],
    [unsigned int alarm()],
    ac_cv_type_alarm="unsigned int",
    ac_cv_type_alarm=int))
AC_SUBST(ac_cv_type_alarm)

AC_CACHE_CHECK(for return type of sleep, ac_cv_type_sleep,
    AC_TRY_COMPILE([
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif],
    [unsigned int sleep()],
    ac_cv_type_sleep="unsigned int",
    ac_cv_type_sleep=int))
AC_SUBST(ac_cv_type_sleep)

AC_CACHE_CHECK(for return type of qsort, ac_cv_type_qsort,
    AC_TRY_COMPILE([
#ifdef STDC_HEADERS
# include <stdlib.h>
#endif],
    [int a; a = qsort(0,0,0,0)],
    ac_cv_type_qsort=int,
    ac_cv_type_qsort=void))
AC_SUBST(ac_cv_type_qsort)

AC_CACHE_CHECK(for return type of free, ac_cv_type_free,
    AC_TRY_COMPILE([
#ifdef STDC_HEADERS
# include <stdlib.h>
#else
# ifdef HAVE_MALLOC_H
#  include <malloc.h>
# endif
#endif],
    [int a; a = free(0)],
    ac_cv_type_free=int,
    ac_cv_type_free=void))
AC_SUBST(ac_cv_type_free)

AC_CACHE_CHECK(for return type of exit, ac_cv_type_exit,
    AC_TRY_COMPILE([
#ifdef STDC_HEADERS
# include <stdlib.h>
#endif],
    [int a; a = exit(0)],
    ac_cv_type_exit=int,
    ac_cv_type_exit=void))
AC_SUBST(ac_cv_type_exit)

AC_CACHE_CHECK(for return type of _exit, ac_cv_type__exit,
    AC_TRY_COMPILE([
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif],
    [int a; a = _exit(0)],
    ac_cv_type__exit=int,
    ac_cv_type__exit=void))
AC_SUBST(ac_cv_type__exit)

dnl If AF_UNIX is set in <sys/socket.h>, assume we have Unix domain sockets.
AC_MSG_CHECKING(for Unix domain sockets)
AC_EGREP_CPP(yes, [
#include <sys/socket.h>
#ifdef AF_UNIX
yes
#endif], [
        AC_DEFINE(HAVE_UNIX_DOMAIN_SOCKETS)
        AC_MSG_RESULT(yes)
    ],
    AC_MSG_RESULT(no))

dnl How to set file descriptors close on exec.  -- fjc mibsoftware.com
AC_MSG_CHECKING(for close on exec style)
CLX_STYLE=unknown
if test "$ac_cv_header_fcntl_h" = yes ; then
    AC_EGREP_CPP(yes, [
#include <fcntl.h>
#ifdef FD_CLOEXEC
yes
#else
# ifdef FD_SETFD
yes
# endif
#endif], [
        AC_DEFINE(CLX_FCNTL)
        AC_MSG_RESULT(FCNTL)
        CLX_STYLE=fcntl
    ])
fi
if test "$CLX_STYLE" = unknown ; then
    if test "$ac_cv_header_sys_filio_h" = yes ; then
        AC_EGREP_CPP(yes, [
#include <sys/filio.h>
#ifdef FIOCLEX
yes
#endif], [
            AC_DEFINE(CLX_IOCTL)
            AC_MSG_RESULT(IOCTL)
            CLX_STYLE=ioctl
        ])
    fi
fi
if test "$CLX_STYLE" = unknown ; then
    AC_MSG_ERROR(Must set CLX_STYLE)
fi

dnl How to set non-blocking I/O.  -- fjc mibsoftware.com
dnl
dnl Want to avoid fcntl(FNDELAY) which is inconsistent.  If O_NONBLOCK is
dnl present, we use that, otherwise fall back to FIONBIO.
AC_MSG_CHECKING(for non-blocking I/O style)
NBIO_STYLE=unknown
if test "$ac_cv_header_fcntl_h" = yes ; then
    AC_EGREP_CPP(yes, [
#include <fcntl.h>
#ifdef O_NONBLOCK
yes
#endif], [
        AC_DEFINE(NBIO_FCNTL)
        AC_MSG_RESULT(FCNTL)
        NBIO_STYLE=FCNTL
    ])
fi
if test "$NBIO_STYLE" = unknown ; then
    if test "$ac_cv_header_sys_filio_h" = yes ; then
        AC_EGREP_CPP(yes, [
#include <sys/filio.h>
#ifdef FIONBIO
yes
#endif], [
            AC_DEFINE(NBIO_IOCTL)
            AC_MSG_RESULT(IOCTL)
            NBIO_STYLE=IOCTL
        ])
    fi
fi
if test "$NBIO_STYLE" = unknown ; then
    AC_MSG_ERROR(Must set NBIO_STYLE)
fi

AC_DEFUN(AC_SYS_COMPILER_FLAG,
[
  AC_MSG_CHECKING($1)
  OLD_CFLAGS="[$]CFLAGS"
  AC_CACHE_VAL(inn_cv_option_$2,
  [
    CFLAGS="[$]OLD_CFLAGS $1"
    AC_TRY_RUN([int main(){exit(0);}],inn_cv_option_$2=yes,inn_cv_option_$2=no)
  ])
  
  CFLAGS="[$]OLD_CFLAGS"
  
  if test x"[$]inn_cv_option_$2" = "xyes" ; then
    $3="[$]$3 $1"
    AC_MSG_RESULT(yes)
  else
    AC_MSG_RESULT(no)
  fi
])

# We need some special hacks when running slowaris
AC_PATH_PROG(uname_prog,uname,no)
AC_MSG_CHECKING(operating system)
AC_CACHE_VAL(inn_cv_sys_os,
[
if test "$uname_prog" != "no"; then
  inn_cv_sys_os="`uname`"

  case "$inn_cv_sys_os" in
    SunOS)
      case "`uname -r`" in
        5.*) inn_cv_sys_os="Solaris";
      esac
    ;;
  esac
else
  inn_cv_sys_os="Not Solaris"
fi
])
AC_MSG_RESULT($inn_cv_sys_os)

case "$inn_cv_sys_os" in
  SCO*)
     case "$CFLAGS" in
       *-belf*) 
          AC_SYS_COMPILER_FLAG(-belf,sco_belf_option,CFLAGS,[],[
           case "$LDFLAGS" in
             *-belf*) ;;
             *)
	        echo "Adding -belf option to ldflags."
                LDFLAGS="$LDFLAGS -belf"
             ;;
           esac
          ])
	;;
       *)
          AC_SYS_COMPILER_FLAG(-belf,sco_belf_option,CFLAGS,[],[
           case "$LDFLAGS" in
             *-belf*) ;;
             *)
	        echo "Adding -belf option to ldflags."
                LDFLAGS="$LDFLAGS -belf"
             ;;
           esac
          ])
       ;;
     esac
  ;;

  UnixWare*)
    if test "$GCC" != "yes"; then
      # We are using built-in inline function
      CFLAGS="$CFLAGS -Kalloca"
      CXX="CC -DNO_CPLUSPLUS_ALLOCA"
    fi
  ;;
esac
AC_SUBST(CFLAGS)
AC_SUBST(CXX)
AC_SUBST(LD)
AC_SUBST(LDFLAGS)



dnl Default to LOG_NEWS for syslog facility if it's available, but if it's
dnl not, fall back on LOG_LOCAL1.
dnl
dnl FIXME: We should just define LOG_NEWS to be LOG_LOCAL1.
AC_MSG_CHECKING(log facility for news)
AC_EGREP_CPP(yes, [
#include <syslog.h>
#ifdef LOG_NEWS
yes
#endif],
    [
        AC_DEFINE(FACILITY_NEWS)
        AC_MSG_RESULT(LOG_NEWS)
    ],
    AC_MSG_RESULT(LOG_LOCAL1))

dnl This test will probably eventually go away, since we're now assuming
dnl ANSI C and support for void.
dnl
dnl FIXME: Old subst linkage.
AC_CACHE_CHECK(generic pointer, ac_cv_type_generic,
    AC_TRY_COMPILE([
#ifdef STDC_HEADERS
# include <stdlib.h>
#else
# ifdef HAVE_MALLOC_H
#  include <malloc.h>
# endif
#endif],
    [void *a; a = malloc(sizeof(a))],
    ac_cv_type_generic=void,
    ac_cv_type_generic=char))
AC_SUBST(ac_cv_type_generic)

dnl Convert a yes no value to a ac_cv_subst value which is not already
dnl overridden by config.cache.
dnl
dnl FIXME: Old subst linkage.
AC_DEFUN(YN_to_cv_subst, [
    if test -z "${$2}" ; then
        if test x"${$1}" = xno ; then
            echo setting $2...$4
            $2=$4
        else
            if test x"${$1}" = xyes ; then
                echo setting $2...$3
                $2=$3
            else
                AC_MSG_ERROR($1 = ${$1}. Must be yes or no)
            fi
       fi
    else
        echo "setting $2... (cached) ${$2}"
    fi
    AC_SUBST($2)
])


dnl FIXME: Old subst linkage.
if test "$ac_cv_type_uid_t" = "no" ; then
    ac_cv_subst_uid_t=int
    ac_cv_subst_gid_t=int
else
    ac_cv_subst_uid_t=uid_t
    ac_cv_subst_gid_t=gid_t
fi
AC_SUBST(ac_cv_subst_uid_t)
AC_SUBST(ac_cv_subst_gid_t)

dnl fjc mibsoftware.com Removed getrlimit.  Prefer SYSCONF
dnl FIXME: Old subst linkage.
if test "$ac_cv_func_getdtab" = no ; then
    if test "$ac_cv_func_sysconf" = no ; then
        if test $"ac_cv_func_ulimit" = no ; then
            ac_cv_subst_fdcount_style=CONSTANT
        else
            ac_cv_subst_fdcount_style=ULIMIT
        fi
    else
        ac_cv_subst_fdcount_style=SYSCONF
    fi
else
    ac_cv_subst_fdcount_style=GETDTAB
fi
AC_SUBST(ac_cv_subst_fdcount_style)

dnl Convert ac_cv_ yes or no values into subst values for config.data (but
dnl only if the cv_subst value is not already defined.  This is to permit
dnl overriding in config.cache.
YN_to_cv_subst(ac_cv_type_size_t, ac_cv_subst_size_t, size_t, unsigned)
YN_to_cv_subst(ac_cv_type_pid_t, ac_cv_subst_pid_t, pid_t, int)
YN_to_cv_subst(ac_cv_type_off_t, ac_cv_subst_lseekval, off_t, long)
YN_to_cv_subst(ac_cv_func_getrusage, ac_cv_subst_res_style, RUSAGE, TIMES)
YN_to_cv_subst(ac_cv_header_time, ac_cv_subst_need_time, DO, DONT)
YN_to_cv_subst(ac_cv_func_mmap_shared, ac_cv_subst_act_style, MMAP, READ)
YN_to_cv_subst(ac_cv_func_need_msync, ac_cv_subst_mmap_sync, DO, DONT)

dnl Clean up our LIBS, just for grins.
LIBS=`echo "$LIBS" | sed 's/^  *//' | sed 's/   */ /g'`

grep "^  ||" config/config.scoreboard | sed 's/  ||//g' > config/config.data.in
AC_CONFIG_HEADER(include/config.h:include/config.h)
AC_OUTPUT(
	Makefile.global
	makedirs.sh
	config/config.data
	backends/actmerge.sh
	backends/actsyncd.sh
	backends/sendxbatches.sh
	frontends/c7unbatch.sh
	frontends/gunbatch.sh
	include/clibrary.h
	include/config.h
	include/paths.h
	innfeed/innfeed-convcfg
	innfeed/procbatch
	samples/actsync.cfg
	samples/checkgroups
	samples/checkgroups.pl
	samples/cnfsheadconf
	samples/cnfsstat
	samples/controlbatch
	samples/controlchan
	samples/default
	samples/docheckgroups
	samples/expirerm
	samples/ihave
	samples/ihave.pl
	samples/inn.conf
	samples/inncheck
	samples/innmail
	samples/innreport
	samples/innreport.conf
	samples/innshellvars
	samples/innshellvars.pl
	samples/innshellvars.tcl
	samples/innstat
	samples/innwatch
	samples/innwatch.ctl
	samples/mailpost
	samples/mod-active
	samples/news2mail
	samples/news.daily
	samples/newgroup
	samples/newgroup.pl
	samples/newsfeeds
	samples/nnrpd_auth.pl
	samples/nntpsend
	samples/parsecontrol
	samples/pgpverify
	samples/pullnews
	samples/rc.news
	samples/rmgroup
	samples/rmgroup.pl
	samples/scanlogs
	samples/scanspool
	samples/send-ihave
	samples/send-nntp
	samples/send-uucp
	samples/sendbatch
	samples/sendme
	samples/sendme.pl
	samples/sendsys
	samples/sendsys.pl
	samples/senduuname
	samples/senduuname.pl
	samples/signcontrol
	samples/simpleftp
	samples/startup.tcl
	samples/tally.control
	samples/version
	samples/version.pl
	samples/writelog
	storage/buildconfig
	storage/ovbuildconfig
	,
	chmod +x storage/buildconfig storage/ovbuildconfig
)

cat .now_do

if test -d "$RUNDIR" ; then
    ownergroup=`echo "${RUNDIR}" | $_PATH_PERL -e 'local (@sb, $owner, $group); $_ = <>; chop; @sb = stat; $owner = (getpwuid($sb[[4]]))[[0]]; $group = (getgrgid($sb[[5]]))[[0]]; print "$owner:$group\n";'`
    if test x"$ownergroup" != x"${NEWSUSER}:${NEWSGRP}" ; then
        echo <<EOF
NOTE: The owner and the group of "${RUNDIR}" which is specified by
      "--with-run-dir=" is incorrect.  It should be owned by "${NEWSUSER}"
      with a group of "${NEWSGRP}".  Set its owner and group correctly
      before you start innd, or run configure again with "--with-run-dir="
      to specify another directory.  Otherwise, you may encounter serious
      problems.
EOF
    fi
fi
