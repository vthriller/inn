dnl Process this file with autoconf to produce a configure script.
dnl $Id$

AC_REVISION($Revision$)dnl
AC_PREREQ(2.13)

dnl FIXME: The separable tests in this file should be broken out into
dnl individual .m4 files and submitted back to autoconf or the general
dnl macro repository.  autoconf 2.15 should have better support for doing
dnl this.

AC_INIT(Makefile.global.in)
AC_CONFIG_AUX_DIR(support)
AC_PREFIX_DEFAULT(/usr/local/news)

dnl Make sure $prefix is set so that we can use it internally.
test x"$prefix" = xNONE && prefix="$ac_default_prefix"

dnl Parse the arguments.  libtool, then specifying alternate paths, then
dnl various other compile options.

inn_use_libtool=no
AC_ARG_ENABLE(libtool,
    [  --enable-libtool        Use libtool for lib generation [default=no]],
    if test "$enableval" = yes ; then
        inn_use_libtool=yes
    fi)

AC_ARG_WITH(control-dir,
    [  --with-control-dir=PATH Control programs [PREFIX/bin/control]],
    CONTROLDIR=$with_control_dir,
    CONTROLDIR=$prefix/bin/control)
AC_SUBST(CONTROLDIR)

AC_ARG_WITH(db-dir,
    [  --with-db-dir=PATH      News database files [PREFIX/db]],
    DBDIR=$with_db_dir,
    DBDIR=$prefix/db)
AC_SUBST(DBDIR)

AC_ARG_WITH(etc-dir,
    [  --with-etc-dir=PATH     News config files [PREFIX/etc]],
    ETCDIR=$with_etc_dir,
    ETCDIR=$prefix/etc)
AC_SUBST(ETCDIR)

AC_ARG_WITH(filter-dir,
    [  --with-filter-dir=PATH  Embedded filters [PREFIX/bin/filter]],
    FILTERDIR=$with_filter_dir,
    FILTERDIR=$prefix/bin/filter)
AC_SUBST(FILTERDIR)

AC_ARG_WITH(lib-dir,
    [  --with-lib-dir=PATH     News lib files [PREFIX/lib]],
    LIBDIR=$with_lib_dir,
    LIBDIR=$prefix/lib)
AC_SUBST(LIBDIR)

AC_ARG_WITH(log-dir,
    [  --with-log-dir=PATH     Logging directory [PREFIX/log]],
    LOGDIR=$with_log_dir,
    LOGDIR=$prefix/log)
AC_SUBST(LOGDIR)

AC_ARG_WITH(run-dir,
    [  --with-run-dir=PATH     News pid/runtime files [PREFIX/run]],
    RUNDIR=$with_run_dir,
    RUNDIR=$prefix/run)
AC_SUBST(RUNDIR)

AC_ARG_WITH(spool-dir,
    [  --with-spool-dir=PATH   News storage [PREFIX/spool]],
    SPOOLDIR=$with_spool_dir,
    SPOOLDIR=$prefix/spool)
AC_SUBST(SPOOLDIR)

AC_ARG_WITH(tmp-path,
    [  --with-tmp-path=PATH    Temporary files directory [PREFIX/tmp]],
    TMPPATH=$with_tmp_path,
    TMPPATH=$prefix/tmp)
AC_SUBST(TMPPATH)

AC_ARG_WITH(sendmail,
    [  --with-sendmail=PATH    Specify path to sendmail],
    SENDMAIL=$with_sendmail)

AC_ARG_WITH(news-user,
    [  --with-news-user=USER   News user id [news]],
    NEWSUSER=$with_news_user,
    NEWSUSER=news)
AC_SUBST(NEWSUSER)
AC_DEFINE_UNQUOTED(NEWSUSER, "$NEWSUSER")

AC_ARG_WITH(news-group,
    [  --with-news-group=GROUP News group id [news]],
    NEWSGRP=$with_news_group,
    NEWSGRP=news)
AC_SUBST(NEWSGRP)
AC_DEFINE_UNQUOTED(NEWSGRP, "$NEWSGRP")

AC_ARG_WITH(news-master,
    [  --with-news-master=USER News master [usenet]],
    NEWSMASTER=$with_news_master,
    NEWSMASTER=usenet)
AC_SUBST(NEWSMASTER)
AC_DEFINE_UNQUOTED(NEWSMASTER, "$NEWSMASTER")

dnl This is actually give to AC_SUBST later on.
AC_ARG_WITH(syslog-facility,
    [  --with-syslog-facility=LOG_FAC  Syslog facility [LOG_NEWS or LOG_LOCAL1]],
    SYSLOG_FACILITY=$with_syslog_facility,
    SYSLOG_FACILITY=none)

NEWSUMASK=02
FILEMODE=0664
DIRMODE=0775
RUNDIRMODE=0770
AC_ARG_WITH(news-umask,
    [  --with-news-umask=UMASK umask for news files [002]],
    with_news_umask=`echo "$with_news_umask" | sed 's/^0*//'`
    if test "x$with_news_umask" = x22 ; then
        NEWSUMASK=022
        FILEMODE=0644
        DIRMODE=0755
        RUNDIRMODE=0750
    else
        if test "x$with_news_umask" != x2 ; then
            AC_MSG_ERROR(Valid umasks are 02 or 022)
        fi
    fi)
AC_SUBST(NEWSUMASK)
AC_SUBST(FILEMODE)
AC_SUBST(DIRMODE)
AC_SUBST(RUNDIRMODE)
AC_DEFINE_UNQUOTED(ARTFILE_MODE, $FILEMODE)
AC_DEFINE_UNQUOTED(BATCHFILE_MODE, $FILEMODE)
AC_DEFINE_UNQUOTED(GROUPDIR_MODE, $DIRMODE)
AC_DEFINE_UNQUOTED(NEWSUMASK, $NEWSUMASK)

AC_ARG_WITH(innd-port,
    [  --with-innd-port=PORT   Additional low-numbered port for inndstart],
    AC_DEFINE_UNQUOTED(INND_PORT, $with_innd_port))

AC_ARG_ENABLE(tagged-hash,
    [  --enable-tagged-hash    Use tagged hash table for history],
    if test "x$enableval" = xyes ; then
	DO_DBZ_TAGGED_HASH=DO
	AC_DEFINE(DO_TAGGED_HASH)
    else
	DO_DBZ_TAGGED_HASH=DONT
    fi)
AC_SUBST(DO_DBZ_TAGGED_HASH)

INEWSMODE=0550
AC_ARG_ENABLE(setgid-inews,
    [  --enable-setgid-inews   Install inews setgid],
    if test "x$enableval" = xyes ; then
        INEWSMODE=2555
    fi)
AC_SUBST(INEWSMODE)

RNEWSGRP=$NEWSGRP
RNEWSMODE=0500
AC_ARG_ENABLE(uucp-rnews,
    [  --enable-uucp-rnews     Install rnews setuid, group uucp],
    if test "x$enableval" = xyes ; then
        RNEWSGRP=uucp
        RNEWSMODE=4550
    fi)
AC_SUBST(RNEWSGRP)
AC_SUBST(RNEWSMODE)

AC_ARG_WITH(perl,
    [  --with-perl             Embedded Perl script support [default=no]],
    [case "${withval}" in
        yes) DO_PERL=DO
             AC_DEFINE(DO_PERL)
             ;;
        no)  DO_PERL=DONT ;;
        *)   AC_MSG_ERROR(invalid argument to --with-perl or --without-perl) ;;
    esac],
    DO_PERL=DONT)

AC_ARG_WITH(python,
    [  --with-python           Embedded Python module support [default=no]],
    [case "${withval}" in
        yes) DO_PYTHON=define
             AC_DEFINE(DO_PYTHON)
             ;;
        no)  DO_PYTHON=DONT ;;
        *)   AC_MSG_ERROR(invalid argument to --with-python or --without-python) ;;
    esac],
    DO_PYTHON=DONT)

AC_ARG_WITH(tcl,
    [  --with-tcl              Embedded TCL script support [default=no]],
    [case "${withval}" in
        yes) DO_TCL=DO ;;
        no)  DO_TCL=DONT ;;
        *)   AC_MSG_ERROR(invalid argument to --with-tcl or --without-tcl) ;;
    esac],
    DO_TCL=DONT)
if test $DO_TCL = DO ; then
  TCL_LIB="-ltcl -lm"
  TCL_INC="-I/usr/local/include"
  AC_DEFINE(DO_TCL)
else
  TCL_LIB=""
  TCL_INC=""
fi
AC_SUBST(TCL_LIB)
AC_SUBST(TCL_INC)

AC_ARG_WITH(largefiles,
    [  --with-largefiles       Support for files greater than 2GB [default=no]],
    [case "${withval}" in
        yes) DO_LFS=DO ;;
        no)  DO_LFS=DONT ;;
        *)   AC_MSG_ERROR(invalid argument to --with-largefiles or --without-largefiles) ;;
    esac],
    DO_LFS=DONT)
AC_SUBST(DO_LFS)

if test "x$DO_LFS" = "xDO"
then
    if test "x$DO_DBZ_TAGGED_HASH" = "xDO"
    then
        AC_MSG_ERROR(--enable-tagged-hash and --with-largefiles can not be used at the same time.)
    fi
fi

AC_ARG_WITH(log-compress,
    [  --with-log-compress=METHOD   Log compression method [gzip]],
    LOG_COMPRESS=$with_log_compress,
    LOG_COMPRESS=gzip)
case "$LOG_COMPRESS" in
bzip2) LOG_COMPRESSEXT=".bz2" ;;
gzip)  LOG_COMPRESSEXT=".gz"  ;;
*)     LOG_COMPRESSEXT=".Z"   ;;
esac
AC_SUBST(LOG_COMPRESS)
AC_SUBST(LOG_COMPRESSEXT)

AC_ARG_WITH(berkeleydb,
    [  --with-berkeleydb[=PATH]  Enable BerkeleyDB (for ovdb overview method)],
    BERKELEY_DB_DIR=$with_berkeleydb,
    BERKELEY_DB_DIR=no)

case "$BERKELEY_DB_DIR" in
  no)
    BERKELEY_DB_LDFLAGS=
    BERKELEY_DB_CFLAGS=
    BERKELEY_DB_LIB=
    BERKELEY_DB_BINDIR=
    ;;

  yes)
    AC_MSG_CHECKING(for BerkeleyDB location)
    for v in BerkeleyDB BerkeleyDB.3.0 BerkeleyDB.3.1 BerkeleyDB.3.2 ; do
        for d in /usr /opt /usr/local ; do
            test -d "$d/$v" && BERKELEY_DB_DIR="$d/$v"  
        done
    done

    if test x"$BERKELEY_DB_DIR" = xyes ; then
        for v in db3 db2 ; do
            if test -d "/usr/local/include/$v" ; then
                BERKELEY_DB_LDFLAGS="-L/usr/local/lib"
                BERKELEY_DB_CFLAGS="-I/usr/local/include/$v"
                BERKELEY_DB_LIB="-l$v"
                BERKELEY_DB_BINDIR="/usr/local/bin"
                AC_MSG_RESULT(FreeBSD locations)
                break
            fi
        done
        if test x"$BERKELEY_DB_LIB" = x ; then
            for v in db3 db2 ; do
                if test -d "/usr/include/$v" ; then
                    BERKELEY_DB_CFLAGS="-I/usr/include/$v"
                    BERKELEY_DB_LIB="-l$v"
                    BERKELEY_DB_BINDIR="/usr/bin"
                    AC_MSG_RESULT(Linux locations)
                    break
                fi
            done
            if test x"$BERKELEY_DB_LIB" = x ; then        
                AC_MSG_ERROR(Cannot find BerkeleyDB)
            fi
        fi
    else
        BERKELEY_DB_LDFLAGS="-L$BERKELEY_DB_DIR/lib"
        BERKELEY_DB_CFLAGS="-I$BERKELEY_DB_DIR/include"
        BERKELEY_DB_LIB="-ldb"
        BERKELEY_DB_BINDIR="$BERKELEY_DB_DIR/bin"
        AC_MSG_RESULT($BERKELEY_DB_DIR)
    fi
    AC_DEFINE(USE_BERKELEY_DB)
    ;;

  *)
    BERKELEY_DB_LDFLAGS="-L$BERKELEY_DB_DIR/lib"
    BERKELEY_DB_CFLAGS="-I$BERKELEY_DB_DIR/include"
    BERKELEY_DB_LIB="-ldb"
    BERKELEY_DB_BINDIR="$BERKELEY_DB_DIR/bin"
    AC_DEFINE(USE_BERKELEY_DB)
    ;;
esac
AC_SUBST(BERKELEY_DB_LDFLAGS)
AC_SUBST(BERKELEY_DB_CFLAGS)
AC_SUBST(BERKELEY_DB_LIB)
AC_SUBST(BERKELEY_DB_BINDIR)

dnl Set some configuration file defaults from the machine hostname.
HOSTNAME=`hostname 2> /dev/null || uname -n`
AC_SUBST(HOSTNAME)

dnl Use libtool if it was requested.  Otherwise, hunt up that information
dnl ourselves.  Manually set a few things for makefiles.
if test x"$inn_use_libtool" = xyes ; then
    AC_PROG_LIBTOOL
    EXTLIB='la'
    EXTOBJ='lo'
    LIBTOOL='../libtool'
    UPLIBTOOL='../../libtool'
else
    AC_CANONICAL_HOST
    AC_PROG_CC
    EXTLIB='a'
    EXTOBJ='o'
    LIBTOOL=''
    UPLIBTOOL=''
    AC_SUBST(LIBTOOL)
fi
AC_SUBST(EXTLIB)
AC_SUBST(EXTOBJ)
AC_SUBST(UPLIBTOOL)

dnl Checks for programs.
AC_PROG_GCC_TRADITIONAL
AC_PROG_LEX
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_YACC

dnl On MacOS X Server, -traditional-cpp is needed for gcc for compiling as
dnl well as preprocessing according to Miro Jurisic <meeroh@meeroh.org>.
case "$CPP" in
*-traditional-cpp*)
    CFLAGS="-traditional-cpp $CFLAGS"
    ;;
esac

dnl System specific checks.
AC_AIX
AC_ISC_POSIX

case "$host" in

dnl HP-UX's native compiler needs a special flag to turn on ANSI, and needs
dnl -g on link as well as compile for debugging to work.
*hpux*)
    if test x"$GCC" != xyes ; then
        dnl Need flag to turn on ANSI.
        CFLAGS="$CFLAGS -Ae"

        dnl Need -g on link command for debug to work properly.
        case "$CFLAGS" in
        *-g*)
            LDFLAGS="$LDFLAGS -g"
            ;;
        esac
    fi
    ;;

dnl From Boyd Gerber <gerberb@zenez.com>, needed in some cases to compile
dnl the bison-generated parser for innfeed.conf.
*UnixWare*|*unixware*|*-sco3*)
    if test x"$GCC" != xyes ; then
        CFLAGS="$CFLAGS -Kalloca"
    fi
esac
  
dnl Checks for pathnames.

dnl See if we have ctags; if so, set CTAGS to its full path plus the -t -w
dnl options.  Otherwise, set CTAGS to echo.
AC_PATH_PROG(CTAGS, ctags, echo)
if test x"$CTAGS" != xecho ; then
    CTAGS="$CTAGS -t -w"
fi

dnl Use INN_PATH_PROG if it's an error not to find a program.
AC_DEFUN(INN_ENSURE_PATH_PROG, [
    AC_PATH_PROG($1, $2)
    if test -z "${$1}" ; then
        AC_MSG_ERROR($2 was not found in path and is required)
    fi
])

INN_ENSURE_PATH_PROG(_PATH_AWK,awk)
INN_ENSURE_PATH_PROG(_PATH_EGREP,egrep)
INN_ENSURE_PATH_PROG(_PATH_PERL,perl)
INN_ENSURE_PATH_PROG(_PATH_SH,sh)
INN_ENSURE_PATH_PROG(_PATH_SED,sed)
INN_ENSURE_PATH_PROG(_PATH_SORT,sort)

dnl Check for a required version of Perl.  The separate shell variable and
dnl the changequotes are necessary for autoconf 2.13; autoconf 2.15 will
dnl provide a different interface that will allow this to work correctly.
changequote(<<,>>)dnl
inn_perl_command='print $]'
changequote([,])dnl
AC_DEFUN(INN_PERL_VERSION,
    AC_CACHE_CHECK(for Perl version, inn_cv_perl_version, [
    if $_PATH_PERL -e 'require $1;' > /dev/null 2>&1 ; then
        inn_cv_perl_version=`$_PATH_PERL -e "$inn_perl_command"`
    else
        AC_MSG_ERROR(Perl $1 or greater is required)
    fi
]))

dnl If DO_PERL is set, require 5.004; otherwise, 5.003 is sufficient.
if test x"$DO_PERL" = xDO ; then
    INN_PERL_VERSION(5.004)
else
    INN_PERL_VERSION(5.003)
fi

dnl Look for PGP 5.0's pgpv, or pgp/pgpgpg if pgpv is not found.
pgpverify=true
AC_PATH_PROGS(_PATH_PGP, pgpv pgp pgpgpg)
if test -z "$_PATH_PGP" ; then
    pgpverify=false
fi
AC_SUBST(pgpverify)

dnl Look for a program that takes an ftp URL as a command line argument and
dnl retrieves the file to the current directory.  Shame we can't also use
dnl lynx -source; it only writes to stdout.
AC_PATH_PROGS(GETFTP, ncftp wget, $prefix/bin/simpleftp)

dnl Look for both compress and gzip, since the UUCP batching scripts require
dnl both.  If we're using a log compression method other than compress or
dnl gzip, check for it too and make sure whatever log compressor we're using
dnl exists.  If we don't find compress or gzip for the UUCP scripts, just
dnl use the bare program names in the hope that the path will be better at
dnl the time the script runs (or that the script will never run).
case "$LOG_COMPRESS" in
compress|gzip) ;;
*)             INN_ENSURE_PATH_PROG(LOG_COMPRESS, "$LOG_COMPRESS")
esac
AC_PATH_PROG(COMPRESS, compress, compress)
if test x"$LOG_COMPRESS" = xcompress ; then
    if test x"$COMPRESS" = xcompress ; then
        AC_MSG_ERROR(compress not found but specified for log compression)
    fi
    LOG_COMPRESS="$COMPRESS"
fi
AC_PATH_PROG(GZIP, gzip, gzip)
if test x"$LOG_COMPRESS" = xgzip ; then
    if test x"$GZIP" = xgzip ; then
        AC_MSG_ERROR(gzip not found but specified for log compression)
    fi
    LOG_COMPRESS="$GZIP"
fi

dnl Figure out what program to use to uncompress .Z files.  On systems that
dnl have gzip but don't have compress, we can use gzip for this purpose and
dnl should rather than hoping compres will be found at runtime.
if test x"$COMPRESS" = xcompress && test x"$GZIP" != xgzip ; then
    UNCOMPRESS="$GZIP -d"
else
    UNCOMPRESS="$COMPRESS -d"
fi
AC_SUBST(UNCOMPRESS)

dnl The sendmail code takes this philosophy:  We assume that there are some
dnl sites which don't have sendmail in the path for a reason, whatever that
dnl may be.  And we also assume that there are some of those sites which
dnl don't want us to automatically pick one from a likely place.  So we
dnl detect it, then search for it, but then notify the human.
if test "${with_sendmail+set}" = set ; then
    AC_MSG_CHECKING(for sendmail)
    AC_MSG_RESULT($SENDMAIL)
else
    AC_PATH_PROG(SENDMAIL, sendmail)
    if test -z "$SENDMAIL" ; then
        echo ''
        echo 'No sendmail in path.  Looking in likely places....'
        echo ''
        AC_PATH_PROG(SENDMAIL, sendmail, ,
            $PATH:/usr/sbin:/usr/lib:/usr/ucblib)
        echo ''
        if test -n "$SENDMAIL" ; then
            echo "sendmail was found at $SENDMAIL.  If this is correct, re-run"
            echo "with --with-sendmail=$SENDMAIL."
            echo ''
        fi
        AC_MSG_ERROR(sendmail not found, re-run with --with-sendmail)
    fi
fi

dnl FIXME: innshellvars* wants to know if we have uustat, send-uucp expects
dnl it to be in the old subst DO/DONT format.  Should take a path.
AC_CHECK_PROG(HAVE_UUSTAT, uustat, DO, DONT)
AC_SUBST(HAVE_UUSTAT)

dnl If we're compiling with Python support, make sure Python is available.
if test x"$DO_PYTHON" = xdefine ; then
    INN_ENSURE_PATH_PROG(_PATH_PYTHON, python)
fi

dnl Checks for libraries.  Use AC_SEARCH_LIBS where possible to avoid
dnl adding libraries when the function is found in libc.  In several
dnl cases, we explicitly just add the library to LIBS on success rather
dnl than using default actions so as not to clutter config.h with defines
dnl we never use.

dnl Several OSes have crypt() in a seperate library for legal reasons.
AC_SEARCH_LIBS(crypt, crypt)

dnl Check for setproctitle in libc first, then libutil if not found there.
AC_SEARCH_LIBS(setproctitle, util, AC_DEFINE(HAVE_SETPROCTITLE))

dnl The rat's nest of networking libraries.  The common cases are not to
dnl need any extra libraries, or to need -lsocket -lnsl.  We need to avoid
dnl linking with libnsl unless we need it, though, since on some OSes where
dnl it isn't necessary it will totally break networking.  Unisys also
dnl includes gethostbyname in libsocket but needs libnsl for socket().
dnl Always link with libresolv if it's found.
AC_SEARCH_LIBS(gethostbyname, nsl)
AC_CHECK_LIB(resolv, gethostbyname, LIBS="-lresolv $LIBS")
AC_CHECK_FUNC(socket, , [
    AC_CHECK_LIB(socket, socket, LIBS="$LIBS -lsocket", [
        AC_CHECK_LIB(nsl, socket, LIBS="$LIBS -lsocket -lnsl", , -lsocket)
    ], "$LIBS")
])
AC_SEARCH_LIBS(inet_addr, 44bsd)

dnl INN currently doesn't use the threading libraries, but check for them in
dnl preparation for the day we do.
AC_CHECK_LIB(thread, pthread_create, [
    inn_have_threads=1
    THREADLIB=-lthread
], [
    AC_CHECK_LIB(pthread, pthread_create, [
        inn_have_threads=1
        THREADLIB=-lpthread
    ])
])
if test -n "$inn_have_threads" ; then
    THREADFLAGS="-D_REENTRANT -DPOSIX_PTHREAD_SEMANTICS -D_THREAD_SAFE"
fi
AC_SUBST(THREADLIB)
AC_SUBST(THREADFLAGS)

dnl FIXME: These shouldn't go into the global LIBS variable.  getspnam() is
dnl only used by the authentication programs.
AC_CHECK_LIB(shadow, getspnam)

dnl FIXME: This should be combined with AC_FUNC_GETLOADAVG
AC_CHECK_LIB(elf, nlist)

dnl FIXME: This is only used by the keywords code in innd/art.c and
dnl shouldn't be in the global LIBS variable.
AC_CHECK_LIB(regex, regexec)

dnl Some of the authentication programs want to be able to open dbm files.
inn_save_LIBS=$LIBS
LIBS=
AC_SEARCH_LIBS(dbm_open, ndbm dbm,
               [DBM_LIB=$LIBS
	        AC_DEFINE(HAVE_DBM, 1, [Define if you have a dbm library.])])
LIBS=$inn_save_LIBS
AC_SUBST(DBM_LIB)

dnl Libraries and flags for embedded Perl.  Some distributions of Linux have
dnl Perl linked with gdbm but don't normally have gdbm installed, so on that
dnl platform only strip -lgdbm out of the Perl libraries.  Leave it in on
dnl other platforms where it may be necessary (it isn't on Linux; Linux
dnl shared libraries can manage their own dependencies).
if test x"$DO_PERL" = xDO ; then
    AC_MSG_CHECKING(for Perl linkage)
    inn_perl_core_path=`$_PATH_PERL -MConfig -e 'print $Config{archlibexp}'`
    inn_perl_core_flags=`$_PATH_PERL -MExtUtils::Embed -e ccopts`
    inn_perl_core_libs=`$_PATH_PERL -MExtUtils::Embed -e ldopts 2>&1 | tail -1`
    for i in $LIBS ; do
        inn_perl_core_libs=`echo "$inn_perl_core_libs" | sed "s/ $i//"`
    done
    case $host in
    *-linux*)
        inn_perl_core_libs=`echo "$inn_perl_core_libs" | sed 's/ -lgdbm//'`
        ;;
    esac
    inn_perl_core_flags=`echo "$inn_perl_core_flags" | sed 's/^  *//'`
    inn_perl_core_libs=`echo "$inn_perl_core_libs" | sed 's/^  *//'`
    PERL_INC="$inn_perl_core_flags"
    PERL_LIB="$inn_perl_core_libs"
    AC_MSG_RESULT($inn_perl_core_path)
else
    PERL_INC=''
    PERL_LIB=''
fi
AC_SUBST(PERL_INC)
AC_SUBST(PERL_LIB)

dnl Libraries and flags for embedded Python.
dnl FIXME: I wish there was a less icky way to get this.
if test x"$DO_PYTHON" = xdefine ; then
    AC_MSG_CHECKING(for Python linkage)
    py_prefix=`$_PATH_PYTHON -c 'import sys; print sys.prefix'`
    py_ver=`$_PATH_PYTHON -c 'import sys; print sys.version[[:3]]'`
    py_libdir="${py_prefix}/lib/python${py_ver}"
    PYTHON_INC="-I${py_prefix}/include/python${py_ver}"
    py_linkage=""
    for py_linkpart in LIBS LIBC LIBM LOCALMODLIBS BASEMODLIBS \
                       LINKFORSHARED LDFLAGS ; do
        py_linkage="$py_linkage "`grep "^${py_linkpart}=" \
                                       $py_libdir/config/Makefile \
                                  | sed -e 's/^.*=//'`
    done
    PYTHON_LIB="-L$py_libdir/config -lpython$py_ver $py_linkage"
    PYTHON_LIB=`echo $PYTHON_LIB | sed -e 's/[ \\t]*/ /g'`
    AC_MSG_RESULT($py_libdir)
else
    PYTHON_LIB=""
    PYTHON_INC=""
fi
AC_SUBST(PYTHON_LIB)
AC_SUBST(PYTHON_INC)

dnl Source used by INN_TYPE_FPOS_T_LARGE.
define([_INN_TYPE_FPOS_T_LARGE_SOURCE],
[#include <stdio.h>
#include <sys/types.h>

int
main ()
{
  fpos_t fpos = 9223372036854775807ULL;
  off_t off;
  off = fpos;
  exit(off == (off_t) 9223372036854775807ULL ? 0 : 1);
}])

dnl Check whether fpos_t is 64 bits and can be assigned to an off_t.  If so,
dnl sets HAVE_LARGE_FPOS_T; this means that a missing fseeko or ftello can
dnl be emulated usint fgetpos and fsetpos.
AC_DEFUN([INN_TYPE_FPOS_T_LARGE],
[AC_CACHE_CHECK(for off_t-compatible fpos_t, inn_cv_type_fpos_t_large,
[AC_TRY_RUN(_INN_TYPE_FPOS_T_LARGE_SOURCE(),
            [inn_cv_type_fpos_t_large=yes],
            [inn_cv_type_fpos_t_large=no],
            [inn_cv_type_fpos_t_large=no])
if test "$inn_cv_type_fpos_t_large" = yes ; then
    AC_DEFINE([HAVE_LARGE_FPOS_T], 1,
        [Define if fpos_t is at least 64 bits and compatible with off_t.])
fi])])

dnl If configuring with large file support, use getconf to set our compile
dnl and link flags and check for some necessary functions.
if test x"$DO_LFS" = xDO ; then
    AC_MSG_CHECKING(for largefile linkage)
    case "$host" in
    *-aix4.[01]*)
        AC_MSG_RESULT(no)
        AC_MSG_ERROR([AIX before 4.2 does not support large files])
        ;;
    *-aix4*)
        AC_MSG_RESULT(ok)
        LFS_CFLAGS="-D_LARGE_FILES"
        LFS_LDFLAGS=""
        LFS_LIBS=""
        ;;
    *-hpux*)
        AC_MSG_RESULT(ok)
        LFS_CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
        LFS_LDFLAGS=""
        LFS_LIBS=""
        ;;
    *-irix*)
        AC_MSG_RESULT(no)
        AC_MSG_ERROR([Large files not supported on this platform])
        ;;
    *-solaris*)
        AC_MSG_RESULT(ok)
        AC_PATH_PROG(GETCONF, getconf)
        if test -z "$GETCONF" ; then
            AC_MSG_ERROR([getconf required to configure large file support])
        fi
        LFS_CFLAGS=`$GETCONF LFS_CFLAGS`
        LFS_LDFLAGS=`$GETCONF LFS_LDFLAGS`
        LFS_LIBS=`$GETCONF LFS_LIBS`
        ;;
    *)
        AC_MSG_RESULT(maybe)
        LFS_CFLAGS="-D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"
        LFS_LDFLAGS=""
        LFS_LIBS=""
        ;;
    esac
    AC_SUBST(LFS_CFLAGS)
    AC_SUBST(LFS_LDFLAGS)
    AC_SUBST(LFS_LIBS)
fi

dnl Check for whether the user wants to compile with OpenSSL, and if so what
dnl the path to the various components of it is.
AC_DEFUN([INN_LIB_OPENSSL],
[AC_ARG_WITH(openssl,
    [  --with-openssl=PATH     Enable OpenSSL (for NNTP over SSL support)],
    OPENSSL_DIR=$with_openssl,
    OPENSSL_DIR=no)
AC_MSG_CHECKING(if OpenSSL is desired)
if test x"$OPENSSL_DIR" = xno ; then
    AC_MSG_RESULT(no)
    SSL_BIN=
    SSL_INC=
    SSL_LIB=
else
    AC_MSG_RESULT(yes)
    AC_MSG_CHECKING(for OpenSSL location)
    if test x"$OPENSSL_DIR" = xyes ; then
        for dir in $prefix /usr/local/ssl /usr/lib/ssl /usr/ssl /usr/pkg \
                   /usr/local /usr ; do
            if test -f "$dir/include/openssl/ssl.h" ; then
                OPENSSL_DIR=$dir
                break
            fi
        done
    fi
    if test x"$OPENSSL_DIR" = xyes ; then
        AC_MSG_ERROR(Can not find OpenSSL)
    else
        AC_MSG_RESULT($OPENSSL_DIR)
	SSL_BIN="${OPENSSL_DIR}/bin"
	SSL_INC="-I${OPENSSL_DIR}/include"

        # This is mildly tricky.  In order to satisfy most linkers, libraries
        # have to be listed in the right order, which means that libraries
        # with dependencies on other libraries need to be listed first.  But
        # the -L flag for the OpenSSL library directory needs to go first of
        # all.  So put the -L flag into LIBS and accumulate actual libraries
        # into SSL_LIB, and then at the end, restore LIBS and move -L to the
        # beginning of SSL_LIB.
        inn_save_LIBS=$LIBS
        LIBS="$LIBS -L${OPENSSL_DIR}/lib"
	SSL_LIB=''
	AC_CHECK_LIB(rsaref, RSAPublicEncrypt,
	    [AC_CHECK_LIB(RSAglue, RSAPublicEncrypt,
                          [SSL_LIB="-lRSAglue -lrsaref"], , -lrsaref)])
	AC_CHECK_LIB(crypto, BIO_new,
                     [AC_CHECK_LIB(dl, DSO_load,
		                   SSL_LIB="-lcrypto -ldl $SSL_LIB",
		                   SSL_LIB="-lcrypto $SSL_LIB",
                                   -lcrypto -ldl $SSL_LIB)],
                     [AC_MSG_ERROR(Can not find OpenSSL)],
                     $SSL_LIB)
	AC_CHECK_LIB(ssl, SSL_library_init,
                     [SSL_LIB="-lssl $SSL_LIB"],
                     [AC_MSG_ERROR(Can not find OpenSSL)],
                     $SSL_LIB)
        SSL_LIB="-L${OPENSSL_DIR}/lib $SSL_LIB"
        LIBS=$inn_save_LIBS
        AC_DEFINE(HAVE_SSL, 1, [Define if OpenSSL is available.])
    fi
fi
AC_SUBST(SSL_BIN)
AC_SUBST(SSL_INC)
AC_SUBST(SSL_LIB)])
INN_LIB_OPENSSL

dnl Special checks for header files.

dnl Start by checking for standard C headers.  AC_HEADER_STDC will set
dnl STDC_HEADERS if stdlib.h, stdarg.h, string.h, and float.h all exist,
dnl if memchr() (and probably the other mem functions) is in string.h,
dnl if free() (and probably malloc() and friends) are in stdlib.h, and if
dnl ctype.h will work on high-bit characters.
AC_HEADER_STDC

dnl Only if that wasn't set do we need to go hunting for other headers to
dnl include on non-ANSI systems and check for functions that all ANSI C
dnl systems should have.
if test x"$ac_cv_header_stdc" = xno ; then
    AC_CHECK_HEADERS(memory.h stdarg.h string.h varargs.h)
    AC_CHECK_FUNCS(memcpy strchr)
    AC_REPLACE_FUNCS(memchr memmove memset)
fi

dnl Special checks for header files.
AC_HEADER_DIRENT
AC_HEADER_TIME
AC_HEADER_SYS_WAIT

dnl Generic checks for header files.
dnl NOTUSED: sys/file.h sys/ioctl.h
AC_CHECK_HEADERS(crypt.h fcntl.h limits.h ndbm.h stddef.h stdint.h \
                 sys/bitypes.h sys/file.h sys/filio.h sys/ioctl.h \
                 sys/select.h sys/sysinfo.h sys/time.h unistd.h)

dnl Some Linux systems have db1/ndbm.h instead of ndbm.h.
if test x"$ac_cv_header_ndbm_h" = xno ; then
    AC_CHECK_HEADERS(db1/ndbm.h)
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_STRUCT_ST_BLKSIZE
AC_STRUCT_TM
AC_C_CONST
AC_TYPE_SIZE_T
AC_TYPE_UID_T
AC_TYPE_OFF_T
AC_TYPE_PID_T
AC_CHECK_TYPE(caddr_t, char *)
AC_CHECK_TYPE(ssize_t, int)

dnl From Paul D. Smith <psmith@baynetworks.com> on the autoconf mailing
dnl list, this is a version of AC_CHECK_TYPE that allows specification of
dnl additional headers.  It's a modified version of the standard autoconf
dnl macro.
AC_DEFUN(INN_CHECK_TYPE, [
    AC_REQUIRE([AC_HEADER_STDC])dnl
    AC_MSG_CHECKING(for $1)
    AC_CACHE_VAL(ac_cv_type_$1, [AC_EGREP_CPP(dnl
changequote(<<, >>)dnl
<<(^|[^a-zA-Z_0-9])$1[^a-zA-Z_0-9]>>dnl
changequote([, ]), [
#include <sys/types.h>
#ifdef STDC_HEADERS
# include <stdlib.h>
# include <stddef.h>
#endif
$3],
        ac_cv_type_$1=yes,
        ac_cv_type_$1=no
    )])dnl
    AC_MSG_RESULT($ac_cv_type_$1)
    if test x"$ac_cv_type_$1" = xno ; then
        AC_DEFINE_UNQUOTED($1, $2)
    fi
])

INN_CHECK_TYPE(sig_atomic_t, int, [#include <signal.h>])
INN_CHECK_TYPE(socklen_t, int, [#include <sys/socket.h>])

dnl Check for the number of elements in an iovec (IOV_MAX).  SVr4 systems
dnl appear to use that name for this limit (checked Solaris 2.6, IRIX 6.5,
dnl and HP-UX 11.00).  Linux doesn't have it, but instead has UIO_MAXIOV
dnl defined in <iovec.h> included from <sys/uio.h>.  The platforms that
dnl have IOV_MAX appear to also offer it via sysconf(3), but it should be
dnl a constant for a given implementation.  Set IOV_MAX if it's not
dnl defined in <sys/uio.h> or <limits.h>.
AC_DEFUN(INN_MACRO_IOV_MAX, [
    AC_MSG_CHECKING(value of IOV_MAX)
    AC_CACHE_VAL(inn_cv_macro_iov_max, [AC_TRY_RUN(dnl
changequote(<<, >>)dnl
<<
#include <sys/types.h>
#include <stdio.h>
#include <sys/uio.h>
#include <errno.h>
#ifdef HAVE_FCNTL_H
# include <fcntl.h>
#endif
#ifdef HAVE_UNISTD_H
# include <unistd.h>
#endif
#ifdef HAVE_LIMITS_H
# include <limits.h>
#endif

main()
{
    int fd, size;
    struct iovec array[1024];
    char data;

    FILE *f = fopen("conftestval", "w");
    if (!f) exit(1);
#ifdef IOV_MAX
    fprintf(f, "set in limits.h\n");
#else
# ifdef UIO_MAXIOV
    fprintf(f, "%d\n", UIO_MAXIOV);
# else
    fd = open("/dev/null", O_WRONLY, 0666);
    if (fd < 0) exit(1);
    for (size = 1; size <= 1024; size++) {
        array[size - 1].iov_base = &data;
        array[size - 1].iov_len = sizeof data;
        if (writev(fd, array, size) < 0) {
            if (errno != EINVAL) exit(1);
            fprintf(f, "%d\n", size - 1);
            exit(0);
        }
    }
    fprintf(f, "1024\n");
# endif /* UIO_MAXIOV */
#endif /* IOV_MAX */
    exit(0);
}>>
changequote([, ]),
    inn_cv_macro_iov_max=`cat conftestval`,
    inn_cv_macro_iov_max=error, 16)])dnl
    if test x"$inn_cv_macro_iov_max" = xerror ; then
        AC_MSG_WARN([probe failure, assuming 16])
        inn_cv_macro_iov_max=16
    else
        AC_MSG_RESULT($inn_cv_macro_iov_max)
    fi
    if test x"$inn_cv_macro_iov_max" != x"set in limits.h" ; then
        AC_DEFINE_UNQUOTED(IOV_MAX, $inn_cv_macro_iov_max)
    fi
])
INN_MACRO_IOV_MAX

dnl Check for SUN_LEN (size of a Unix domain socket struct, macro required
dnl POSIX.1g but not that widespread yet).
AC_DEFUN(INN_MACRO_SUN_LEN, [
    AC_MSG_CHECKING(for SUN_LEN)
    AC_CACHE_VAL(inn_cv_macro_sun_len, AC_TRY_LINK([
#include <sys/types.h>
#include <sys/un.h>
    ], [
    struct sockaddr_un sun;
    int i;

    i = SUN_LEN(&sun);
    ],
    inn_cv_macro_sun_len=yes,
    inn_cv_macro_sun_len=no))
    AC_MSG_RESULT($inn_cv_macro_sun_len)
    if test x"$inn_cv_macro_sun_len" = xyes ; then
        AC_DEFINE(HAVE_SUN_LEN)
    fi
])
INN_MACRO_SUN_LEN

dnl BSD hosts have a tm_gmtoff element in struct tm containing the offset
dnl from GMT/UTC for that time.  This is the strongly preferred way of
dnl getting time zone information.
AC_DEFUN([INN_STRUCT_TM_GMTOFF],
[AC_CACHE_CHECK(for tm_gmtoff in struct tm, inn_cv_struct_tm_gmtoff,
    AC_TRY_LINK([#include <time.h>],
        [struct tm t; t.tm_gmtoff = 3600],
        inn_cv_struct_tm_gmtoff=yes,
        inn_cv_struct_tm_gmtoff=no))
if test x"$inn_cv_struct_tm_gmtoff" = xyes ; then
    AC_DEFINE([HAVE_TM_GMTOFF], 1,
        [Define if your struct tm has a tm_gmtoff member.])
fi])
INN_STRUCT_TM_GMTOFF

dnl BSD hosts have the name of the local time zone in struct tm, which is
dnl much nicer to use than the tzname variable (and also potentially handles
dnl renamings of the time zone in the  past).
AC_DEFUN([INN_STRUCT_TM_ZONE],
[AC_CACHE_CHECK(for tm_zone in struct tm, inn_cv_struct_tm_zone,
    AC_TRY_LINK([#include <time.h>],
        [struct tm t; t.tm_zone = "UTC"],
        inn_cv_struct_tm_zone=yes,
        inn_cv_struct_tm_zone=no))
if test x"$inn_cv_struct_tm_zone" = xyes ; then
    AC_DEFINE([HAVE_TM_ZONE], 1,
        [Define if your struct tm has a tm_zone member.])
fi])
INN_STRUCT_TM_ZONE

dnl Many System V hosts have an external variable timezone containing the
dnl offset of local time from GMT/UTC.  We can use this for the timezone
dnl offset for current time, although it's not usable for anything else.
dnl Unfortunately, some BSD varients have a function named timezone instead.
AC_DEFUN([INN_VAR_TIMEZONE],
[AC_CACHE_CHECK(for timezone variable, inn_cv_var_timezone,
    AC_TRY_LINK([#include <time.h>], [timezone = 3600; altzone = 7200],
        inn_cv_var_timezone=yes,
        inn_cv_var_timezone=no))
if test x"$inn_cv_var_timezone" = xyes ; then
    AC_DEFINE([HAVE_VAR_TIMEZONE], 1,
        [Define if timezone is an external variable in <time.h>.])
fi])
INN_VAR_TIMEZONE

dnl Many System V hosts and some BSD systems have an external variable
dnl tzname containing the abbreviations of the main and alternate time
dnl zone.  We can use these as a reasonable approximation of the correct
dnl time zone names, although they could be incorrect if the time zone
dnl name has changed in the past.
AC_DEFUN([INN_VAR_TZNAME],
[AC_CACHE_CHECK(for tzname variable, inn_cv_var_tzname,
    AC_TRY_LINK([#include <time.h>], [*tzname = "UTC"],
        inn_cv_var_tzname=yes, inn_cv_var_tzname=no))
if test x"$inn_cv_var_tzname" = xyes ; then
    AC_DEFINE([HAVE_VAR_TZNAME], 1,
        [Define if tzname is an external variable in <time.h>.])
fi])
INN_VAR_TZNAME

dnl A modified version of AC_CHECK_SIZEOF that doesn't always AC_DEFINE, but
dnl instead lets you execute shell code based on success or failure.  This
dnl is to avoid config.h clutter.
AC_DEFUN(INN_IF_SIZEOF,
[changequote(<<, >>)dnl
dnl The name to #define.
define(<<AC_TYPE_NAME>>, translit(sizeof_$1, [a-z *], [A-Z_P]))dnl
dnl The cache variable name.
define(<<AC_CV_NAME>>, translit(ac_cv_sizeof_$1, [ *], [_p]))dnl
changequote([, ])dnl
AC_MSG_CHECKING(size of $1)
AC_CACHE_VAL(AC_CV_NAME,
[AC_TRY_RUN([#include <stdio.h>
main()
{
    FILE *f = fopen("conftestval", "w");
    if (!f) exit(1);
    fprintf(f, "%d\n", sizeof($1));
    exit(0);
}], AC_CV_NAME=`cat conftestval`, AC_CV_NAME=0,
ifelse([$2], , , AC_CV_NAME=$2))
])dnl
AC_MSG_RESULT($AC_CV_NAME)
if test x"$AC_CV_NAME" = x"$3" ; then
    ifelse([$4], , :, [$4])
else
    ifelse([$5], , :, [$5])
fi
undefine([AC_TYPE_NAME])dnl
undefine([AC_CV_NAME])dnl
])

dnl Find a 32 bit type, by trying likely candidates.  First, check for the
dnl C9X int32_t, then look for something else with a size of four bytes.
INN_IF_SIZEOF(int, 4, 4, INN_INT32=int, [
    INN_IF_SIZEOF(long, 4, 4, INN_INT32=long, [
        INN_IF_SIZEOF(short, 2, 4, INN_INT32=short)
    ])
])
INN_CHECK_TYPE(int32_t, $INN_INT32,
[#ifdef HAVE_STDINT_H
# include <stdint.h>
#endif
#ifdef HAVE_SYS_BITYPES_H
# include <sys/bitypes.h>
#endif
])

dnl Figure out the unsigned version.
INN_CHECK_TYPE(uint32_t, unsigned $INN_INT32,
[#ifdef HAVE_STDINT_H
# include <stdint.h>
#endif
#ifdef HAVE_SYS_BITYPES_H
# include <sys/bitypes.h>
#endif
])

dnl Checks for library functions.
AC_FUNC_MEMCMP
AC_FUNC_VFORK
AC_TYPE_SIGNAL

dnl Check for various other functions.
dnl
dnl NOTUSED: gethostname mkfifo strcspn strstr
dnl
dnl FIXME: fchmod and gettimeofday are checked some of the places they're
dnl used, but not all of them.
AC_CHECK_FUNCS(atexit fchmod fcntl gethostname getpagesize getrusage \
               getspnam gettimeofday mkfifo setbuffer sigaction setsid \
               socketpair statvfs strcspn strncasecmp strstr strtoul \
               symlink waitpid)

dnl We only care if we have setreuid() if we don't have seteuid().
AC_CHECK_FUNCS(seteuid setreuid, break)

dnl We need both *rlimit functions.
dnl
dnl FIXME: Better to use the standard #defines.
AC_CHECK_FUNC(getrlimit, AC_CHECK_FUNC(setrlimit, AC_DEFINE(HAVE_RLIMIT)))

dnl Check for sysconf, getdtablesize, and then ulimit in that order; we'll
dnl use them to figure out our current file descriptor limit.
dnl
dnl FIXME: sysconf should go into the main check loop, and instead here we
dnl should see if we have sysconf or getrlimit and only in the absense of
dnl either fall back on the CHECK_FUNCS.
AC_CHECK_FUNCS(sysconf getdtablesize ulimit, break)

dnl If we don't have fcntl, try to find another locking function.
if test x"$ac_cv_func_fcntl" = xno ; then
    AC_CHECK_FUNC(flock, AC_DEFINE(HAVE_FLOCK),
        AC_CHECK_LIB(bsd, flock, 
                     AC_DEFINE(HAVE_FLOCK)
                     LIBS="-lbsd $LIBS",
                     [AC_CHECK_FUNCS(lockf)]))
fi

dnl If we don't have statvfs, gather some more information for inndf.
if test x"$ac_cv_func_statvfs" = xno ; then
    AC_CHECK_FUNCS(statfs)
    AC_CHECK_HEADERS(sys/vfs.h sys/param.h sys/mount.h)
fi

dnl If we can't find any of the following, we have replacements for them.
AC_REPLACE_FUNCS(fseeko ftello getopt inet_aton inet_ntoa pread pwrite \
                 strcasecmp strdup strerror strspn setenv hstrerror)

dnl If replacing fseeko or ftello, see if we can use fsetpos/fgetpos.
if test "$ac_cv_func_fseeko" = no || test "$ac_cv_func_ftello" = no ; then
   INN_TYPE_FPOS_T_LARGE
fi

MISSING_OBJ="$LIBOBJS"
MISSING_SRC=`echo "$MISSING_OBJ" | sed 's/\.o/.c/g'`

if test "$ac_cv_func_strcasecmp" = no ; then
    MISSING_MAN=strcasecmp.3
else
    MISSING_MAN=''
fi

AC_SUBST(MISSING_MAN)
AC_SUBST(MISSING_SRC)
AC_SUBST(MISSING_OBJ)

dnl See if mmap sees writes. 
dnl ========================================================
dnl For cross compiling, just define it as no, which is a safe default
AC_MSG_CHECKING(if mmap() sees write()s)
AC_TRY_RUN(
    #include <stdlib.h>
    #include <unistd.h>
    #include <sys/mman.h>
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <fcntl.h>

    char fname[[]] = "conftest.file";
    char zbuff[[1024]]; /* Fractional page is probably worst case */

    int main() {
       char *map;
       int fd;
       int i;
       unlink(fname);
       fd = open(fname, O_RDWR | O_CREAT, 0660);
       if(fd<0) exit(1);
       unlink(fname);
       write(fd, zbuff, sizeof(zbuff));
       lseek(fd, 0, SEEK_SET);
       map = (char*)mmap(0, sizeof(zbuff), PROT_READ, MAP_SHARED, fd, 0);
       if(map==(char*)-1) exit(2);
       for(i=0; fname[[i]]; i++) {
           int rc = write(fd, &fname[[i]], 1);
           if(map[[i]]!=fname[[i]]) exit(4);
       }
       exit(0);
    }
    , [ result="yes"],
    [result="no"],
    [result="yes"] )

AC_MSG_RESULT("$result")

if test "$result" = "no"; then
    AC_DEFINE(MMAP_MISSES_WRITES)
fi

dnl This portion is similar to what AC_FUNC_MMAP does, only it tests shared,
dnl non-fixed mmaps.

AC_CACHE_CHECK(for working mmap, ac_cv_func_mmap_shared,
    [AC_TRY_RUN([
/* test shared mmap */
#include <sys/types.h>
#include <fcntl.h>
#include <sys/mman.h>

/* This mess was copied from the GNU getpagesize.h.  */
#ifndef HAVE_GETPAGESIZE
# ifdef HAVE_UNISTD_H
#  include <unistd.h>
# endif

/* Assume that all systems that can run configure have sys/param.h.  */
# ifndef HAVE_SYS_PARAM_H
#  define HAVE_SYS_PARAM_H 1
# endif

# ifdef _SC_PAGESIZE
#  define getpagesize() sysconf(_SC_PAGESIZE)
# else /* no _SC_PAGESIZE */
#  ifdef HAVE_SYS_PARAM_H
#   include <sys/param.h>
#   ifdef EXEC_PAGESIZE
#    define getpagesize() EXEC_PAGESIZE
#   else /* no EXEC_PAGESIZE */
#    ifdef NBPG
#     define getpagesize() NBPG * CLSIZE
#     ifndef CLSIZE
#      define CLSIZE 1
#     endif /* no CLSIZE */
#    else /* no NBPG */
#     ifdef NBPC
#      define getpagesize() NBPC
#     else /* no NBPC */
#      ifdef PAGESIZE
#       define getpagesize() PAGESIZE
#      endif /* PAGESIZE */
#     endif /* no NBPC */
#    endif /* no NBPG */
#   endif /* no EXEC_PAGESIZE */
#  else /* no HAVE_SYS_PARAM_H */
#   define getpagesize() 8192   /* punt totally */
#  endif /* no HAVE_SYS_PARAM_H */
# endif /* no _SC_PAGESIZE */

#endif /* no HAVE_GETPAGESIZE */

#ifdef __cplusplus
extern "C" { void *malloc(unsigned); }
#else
char *malloc();
#endif

int
main()
{
        char *data, *data2;
        int i, pagesize;
        int fd;

        pagesize = getpagesize();

        /*
         * First, make a file with some known garbage in it.
         */
        data = malloc(pagesize);
        if (!data)
                exit(1);
        for (i = 0; i < pagesize; ++i)
                *(data + i) = rand();
        umask(0);
        fd = creat("conftestmmaps", 0600);
        if (fd < 0)
                exit(1);
        if (write(fd, data, pagesize) != pagesize)
                exit(1);
        close(fd);

        /*
         * Next, try to mmap the file.  If we can,
         * also make sure that we see the same garbage.
         */
        fd = open("conftestmmaps", O_RDWR);
        if (fd < 0)
                exit(1);
        if (! (data2 = mmap((void*)0, pagesize, PROT_READ | PROT_WRITE,
            MAP_SHARED, fd, 0L)) )
                exit(1);
        for (i = 0; i < pagesize; ++i)
                if (*(data + i) != *(data2 + i))
                        exit(1);

        close(fd);
        unlink("conftestmmaps");
        exit(0);
}
],
    ac_cv_func_mmap_shared=yes,
    ac_cv_func_mmap_shared=no,
    ac_cv_func_mmap_shared=no)
])
if test $ac_cv_func_mmap_shared = yes ; then
    AC_DEFINE(HAVE_MMAP)
    AC_CHECK_FUNCS(madvise)
fi

AC_CACHE_CHECK(whether msync is needed, ac_cv_func_need_msync,
    [AC_TRY_RUN([
/* test shared mmap (msync) */
#include <sys/types.h>
#include <fcntl.h>
#include <sys/mman.h>

/* This mess was copied from the GNU getpagesize.h.  */
#ifndef HAVE_GETPAGESIZE
# ifdef HAVE_UNISTD_H
#  include <unistd.h>
# endif

/* Assume that all systems that can run configure have sys/param.h.  */
# ifndef HAVE_SYS_PARAM_H
#  define HAVE_SYS_PARAM_H 1
# endif

# ifdef _SC_PAGESIZE
#  define getpagesize() sysconf(_SC_PAGESIZE)
# else /* no _SC_PAGESIZE */
#  ifdef HAVE_SYS_PARAM_H
#   include <sys/param.h>
#   ifdef EXEC_PAGESIZE
#    define getpagesize() EXEC_PAGESIZE
#   else /* no EXEC_PAGESIZE */
#    ifdef NBPG
#     define getpagesize() NBPG * CLSIZE
#     ifndef CLSIZE
#      define CLSIZE 1
#     endif /* no CLSIZE */
#    else /* no NBPG */
#     ifdef NBPC
#      define getpagesize() NBPC
#     else /* no NBPC */
#      ifdef PAGESIZE
#       define getpagesize() PAGESIZE
#      endif /* PAGESIZE */
#     endif /* no NBPC */
#    endif /* no NBPG */
#   endif /* no EXEC_PAGESIZE */
#  else /* no HAVE_SYS_PARAM_H */
#   define getpagesize() 8192   /* punt totally */
#  endif /* no HAVE_SYS_PARAM_H */
# endif /* no _SC_PAGESIZE */

#endif /* no HAVE_GETPAGESIZE */

#ifdef __cplusplus
extern "C" { void *malloc(unsigned); }
#else
char *malloc();
#endif

int
main()
{
        char *data, *data2, *data3;
        int i, pagesize;
        int fd, rval;

        pagesize = getpagesize();

        /*
         * First, make a file with some known garbage in it.
         */
        data = malloc(pagesize);
        if (!data)
                exit(1);
        for (i = 0; i < pagesize; ++i)
                *(data + i) = rand();
        umask(0);
        fd = creat("conftestmmapm", 0600);
        if (fd < 0)
                exit(1);
        if (write(fd, data, pagesize) != pagesize)
                exit(1);
        close(fd);

        /*
         * Next, try to mmap the file.
         */
        fd = open("conftestmmapm", O_RDWR);
        if (fd < 0)
                exit(1);
        if (! (data2 = mmap((void*)0, pagesize, PROT_READ | PROT_WRITE,
            MAP_SHARED, fd, 0L)) )
                exit(1);

        /*
         * Finally, see if changes to the mapped area automatically
         * percolate back to the file as seen by read().
         * I.E., msync is not needed
         */
	rval = 0;
        for (i = 0; i < pagesize; ++i)
                *(data2 + i) = *(data2 + i) + 1;
        data3 = malloc(pagesize);
        if (!data3)
                exit(1);
        if (read(fd, data3, pagesize) != pagesize)
                exit(1);
        for (i = 0; i < pagesize; ++i)
                if (*(data + i) != *(data3 + i))
                        rval = 1;
        close(fd);
        unlink("conftestmmapm");
        exit(rval);
}
],
    ac_cv_func_need_msync=yes,
    ac_cv_func_need_msync=no,
    ac_cv_func_need_msync=no)
])
if test x"$ac_cv_func_need_msync" = xyes ; then
    AC_DEFINE(MMAP_NEEDS_MSYNC)
fi

dnl Turn on keyword support if we have the regex library.
dnl
dnl FIXME: This is completely broken and makes no sense whatsoever.  It
dnl needs to be moved up to a --with-keywords flag and an error printed
dnl if --with-keywords is given and regexec() can't be found.
if test $ac_cv_lib_regex_regexec = no; then
    AC_CHECK_FUNC(regexec, AC_DEFINE(DO_KEYWORDS))
fi

dnl FIXME: I think we only need this if we need msync().
AC_CACHE_CHECK(for three argument msync, inn_cv_func_msync_3_args,
    AC_TRY_LINK([
#include <sys/types.h>
#include <sys/mman.h>],
        [char *p; int psize; msync(p,psize,MS_ASYNC); ],
        inn_cv_func_msync_3_args=yes,
        inn_cv_func_msync_3_args=no))
if test "$inn_cv_func_msync_3_args" = yes ; then
    AC_DEFINE(HAVE_MSYNC_3_ARG)
fi

dnl If AF_UNIX is set in <sys/socket.h>, assume we have Unix domain sockets.
AC_MSG_CHECKING(for Unix domain sockets)
AC_EGREP_CPP(yes, [
#include <sys/socket.h>
#ifdef AF_UNIX
yes
#endif], [
        AC_DEFINE(HAVE_UNIX_DOMAIN_SOCKETS)
        AC_MSG_RESULT(yes)
    ],
    AC_MSG_RESULT(no))

dnl Default to LOG_NEWS for syslog facility if it's available, but if it's
dnl not, fall back on LOG_LOCAL1.  --with-syslog-facility may have already
dnl set this.
AC_MSG_CHECKING(log facility for news)
if test x"$SYSLOG_FACILITY" = xnone ; then
    AC_EGREP_CPP(yes, [
#include <syslog.h>
#ifdef LOG_NEWS
yes
#endif], [
        SYSLOG_FACILITY=LOG_NEWS
        AC_MSG_RESULT(LOG_NEWS)
    ], [
        SYSLOG_FACILITY=LOG_LOCAL1
        AC_MSG_RESULT(LOG_LOCAL1)
    ])
else
    AC_MSG_RESULT($SYSLOG_FACILITY)
fi
AC_DEFINE_UNQUOTED(LOG_INN_SERVER, $SYSLOG_FACILITY)
AC_DEFINE_UNQUOTED(LOG_INN_PROG, $SYSLOG_FACILITY)
AC_SUBST(SYSLOG_FACILITY)

dnl Clean up our LIBS, just for grins.
LIBS=`echo "$LIBS" | sed 's/^  *//' | sed 's/   */ /g' | sed 's/  *$//'`

AC_CONFIG_HEADER(include/config.h)
AC_OUTPUT(
        Makefile.global
        backends/controlchan
        backends/pgpverify
        include/paths.h
        samples/actsync.cfg
        samples/checkgroups
        samples/inn.conf
        samples/innreport.conf
        samples/innwatch.ctl
        samples/newsfeeds
        samples/nnrpd_auth.pl
        samples/nnrpd_auth.py
        samples/startup.tcl
        samples/sasl.conf
        scripts/inncheck
        scripts/innreport
        scripts/innshellvars
        scripts/innshellvars.pl
        scripts/innshellvars.tcl
        scripts/news.daily
        support/fixscript
        ,
        chmod +x support/fixscript
)

cat .now_do

if test -d "$RUNDIR" ; then
    ownergroup=`echo "${RUNDIR}" | $_PATH_PERL -e 'local (@sb, $owner, $group); $_ = <>; chop; @sb = stat; $owner = (getpwuid($sb[[4]]))[[0]]; $group = (getgrgid($sb[[5]]))[[0]]; print "$owner:$group\n";'`
    if test x"$ownergroup" != x"${NEWSUSER}:${NEWSGRP}" ; then
        echo <<EOF
NOTE: The owner and the group of "${RUNDIR}" which is specified by
      "--with-run-dir=" is incorrect.  It should be owned by "${NEWSUSER}"
      with a group of "${NEWSGRP}".  Set its owner and group correctly
      before you start innd, or run configure again with "--with-run-dir="
      to specify another directory.  Otherwise, you may encounter serious
      problems.
EOF
    fi
fi

dnl Finally, double-check the configured temporary directory.  Some people
dnl point this at the system temporary directories or at other
dnl world-writeable directories, which can be a local security hole.
if $_PATH_PERL -e "exit((stat('$TMPPATH'))[[2]] & 2)" > /dev/null ; then
    :
else
    cat <<EOM

WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING

  The temporary directory you have configured is world-writeable.  It is
  currently set to $TMPPATH.

  This directory is used by INN for temporary files and should only be
  writeable by the news user.  INN does not go to great lengths to prevent
  symlink attacks and the like because it assumes this directory is not
  world-writeable.  By configuring INN in this fashion, you may be
  introducing a locally exploitable security hole.

  It is STRONGLY recommended that you use a temporary directory reserved for
  INN's exclusive use, one which is not world-writeable.  You can do this
  either with --with-tmp-dir or by setting --prefix to something other than
  /usr or /.

EOM
fi
