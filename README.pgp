This README.pgp file is based very heavily on David C Lawrence's README.

                    AUTHENTICATION OF USENET GROUP CHANGES
                                       
   This document addresses a method for the authentication of the special
   types of Usenet articles that are used to maintain the namespace of
   Usenet groups. A basic familiarity with what the Usenet control
   message types "newgroup", "rmgroup" and "checkgroups" do is assumed;
   this is not a tutorial in namespace administration.
   
   Usenet articles are notoriously easy to forge, and control messages
   are no exception. Since administrators often want to have their news
   systems automatically honor requests from some particular people to
   add or remove newsgroups, it is risky to trust the From: and Sender:
   headers to identify the real sender of a message, as has historically
   been done. Thus a system using Philip Zimmerman's Pretty Good
   Privacy(tm) (PGP (tm)) was developed to provide a more secure means of
   authenticating the sender of a control message.
   
   Unlike traditional PGP authentication of messages, which just verifies
   that the contents of the body of a message are unchanged from when it
   was digitally "signed", this system also needed to sign a few headers
   of the control message to verify the action to be taken and to guard
   against certain other pitfalls. Another goal was to make the signature
   as unobtrusive as possible and require minimal changes to existing
   software in order to work.
   
How to Verify Control Messages

   Listed below are the steps you need to take to enable PGP
   authentication of control messages on your system.
   
   Here is the short and simple version for someone who feels confident
   hacking around the news system and doesn't like to read a lot:
   
    1. Add maintainers' PGP public keys to the news system key ring.

       Short version:

         Use pgp -ka, possibly on ftp://ftp.isc.org/pub/pgpcontrol/PGPKEYS,
         to add keys to your PGP key ring.

       Long version:

       To verify messages, you must have a PGP public key for each signer
       that you wish to trust. It should be entered in a key ring that is
       accessible to the user-id that runs the news system by running
       pgp -ka on a file containing the key to add. For example, at a
       site that runs the news server software as news, the following
       command run by the news user-id should add the key bounded by
       BEGIN and END "PGP PUBLIC KEY BLOCK" lines in the file /tmp/key
       to the default key ring that would be used for authentication:

                pgp -ka /tmp/key

       You can get can an up-to-date list of keys for signers in many
       widely available hierarchies from:

                ftp://ftp.isc.org/pub/pgpcontrol/PGPKEYS

       When copied to a local file it can be used as the the input
       for pgp -ka.  It is ok to add keys for hierarchies you don't
       get, because control.ctl will determine whether you use them.

       As a general policy rule, control message signers will not use their
       control message keys to introduce other keys, so when PGP asks you
       a question similar to, "Would you trust this user to act as an
       introducer and certify other people's public keys to you?" answer
       that you would not.

    2. Enable verification through the news system authorization system.

       Short version:
       
	 Use the action verify-pgp_userid (possibly appended =logfile) in
	 control.ctl.

       Long Version:

       After you have added the appropriate key to your key ring, you
       need to tell the news software to validate the control messages
       received. As implemented, the system will perform the requested
       action if the message can be authenticated and it will mail the
       message to the news system administrator if it cannot. Clearly
       there are other possible actions that could be implemented, but I
       wanted to keep the patches minimal. Future releases of the server
       software will probably have increased flexibility.
       
       Automatic processing of control messages is handled by control.ctl,
       which you edit in the same site subdirectory where you patched
       parsecontrol. control.ctl has several lines at the beginning of it
       that describe the format of the file, and there is an even longer
       control.ctl(5) manual page. To enable PGP verification in addition
       to the normal authorization done by control.ctl, use the action
       "verify-PGP_USERID" in the fourth field.
            
       For example, if you trust group-admin@isc.org to manage groups in the
       "Big 8" hierarchies, you could have lines like these (but don't use
       the backslash continuation, which I have used here for readability;
       keep it all on one line):

newgroup:group-admin@isc.org:\
comp.*|humanities.*|misc.*|news.*|rec.*|sci.*|soc.*|talk.*:\
verify-news.announce.newgroups
rmgroup:group-admin@isc.org:\
comp.*|humanities.*|misc.*|news.*|rec.*|sci.*|soc.*|talk.*:\
verify-news.announce.newgroups
checkgroups:group-admin@isc.org:\
comp.*|humanities.*|misc.*|news.*|rec.*|sci.*|soc.*|talk.*:\
verify-news.announce.newgroups

       Additionally, if you like the logging feature available with the
       action doit=logfile, you can get the same logging by using
       verify-pgp_userid=logfile.
            
    3. Test the system.

       Short version:

         If you have the news.announce.newgroups key in your key ring, run
         
	       samples/sample.control
  
         (where CONTROLPROGS is as defined in config.data) through
         pgpverify on stdin. It should spit out the string
         "news.announce.newgroups" on stdout.
       
       Long Version:

	 A signed sample control message is in the file
         samples/sample.control. Copy this to /tmp/sample.control.
	 The file name /tmp/sample.control will be used for this example.
       
         To verify the control message, you will need the key for
         news.announce.newgroups and authorization in your news system for
         group-admin@isc.org to automatically perform "newgroup". Go ahead
         and enable it for the test even if you don't want to really allow
         this, because it is easy enough to rescind after the test by
         editing the control message authorization file and removing the
         key with pgp -kr news.announce.newgroups.
       
         You can check that the pgpverify part of the system will work
         properly simply by feeding it the sample control message on stdin:

                pgpverify < /tmp/sample.control

         If if could run pgp and find the correct key in the default key ring,
         the string "news.announce.newgroups" should be printed. The exit
         status of the script, found in most shells with the command 
         
		echo $?

	 as the next command after pgpverify, should be 0 (zero).
       
         If it doesn't work and you've tried and tried to figure out why,
         email inn-bugs@isc.org a complete description of the problem you
         are having and how you have tried to remedy it. At a bare minimum,
         your mail should include a copy of the message you are trying to
         verify, a typescript of the attempted execution, and the output of
         pgp -kc and pgp -kvc news.announce.newgroups.
       
         When pgpverify passes its test, use the procedure below to verify
         the authorization system.
         
            First, cd to the directory where parsecontrol is installed.
            Then execute the following four lines, in order, as the user
            who owns the news system:

                /bin/sh
                PROG=newgroup
                set -- group-admin@isc.org "" /tmp/sample.control
                (. ./parsecontrol "$@"; echo $ACTION)

            If the message verified correctly, the echo command should
            output doit; otherwise, verification failed and the output
            should be mail.
            
            Edit /tmp/sample.control and change all occurences of
            newusers to newgroups. Then repeat the parsecontrol
            and echo lines. This time verification should fail.
            
Frequently Asked Questions

  HOW COME THIS PRESUMABLY VALID MESSAGES DOESN'T CHECK OUT WITH PGPVERIFY?
               o You don't have the latest version of pgpverify, which
                 fixed whatever bug is causing authentication of the
                 message to fail.
               o You don't have your PGP configuration files and keyrings
                 in the default path used by pgp and PGPPATH is not correctly
                 set in your environment.  Either move your PGP directory
                 to the default location or set the $ENV{'PGPPATH'} line in
                 pgpverify.
               o You don't have the correct key for the user that signed
                 it in your key ring.
               o You cut-and-pasted the message in your window system,
                 which converted the tab characters in the original
                 message into spaces in the message you are trying to
                 decode. Having this handled completely correctly by the
                 signing/verifying code is harder than you might first
                 think.
               o You are running pgpverify on a saved copy of the article
                 that includes an extraneous trailing newline, such
                 as might be inserted by saving the message from a mail
                 handler or news reader, that was not present in the
                 original message. 
               o You cut-and-pasted the sample INN control.ctl lines above
                 and left the continuation lines in, instead of joining
                 each group of three physical lines comprising one logical
                 line to just one physical line.
   
         _____________________________________________________________
       
Signing Control Messages

       If you are responsible for sending control messages about
       authorized changes to a newsgroup hierarchy, then

		signcontrol

       (in the samples directory) will sign your control messages so that
       pgpverify can authenticate them. It is a Perl script that requires
       Perl version 5 or higher to work. It has several configuration
       parameters that should be reviewed before use. Note that INN's
       normal subst program is *not* run over signcontrol. You'll need to
       fix the configuration section inside it by hand.
       
       When establishing a PGP key and control message sender, please use
       tokens that are not tied to a particular individual. This makes it
       easier to transfer the administrative responsibility when it
       finally comes time. (The all-too-common "tale@uunet.uu.net" sender
       is still used for control messages because of its legacy in the
       installed server base; I would prefer to use
       newgroups-request@uunet.uu.net.) Please also do not sign other
       keys with the key that is used for control messages.
       
       If you will be using this script to sign control messages, please
       let me know the hierarchy that you are responsible for maintaining
       and the information that you would like to appear in the List of
       PGP Public Keys for Newsgroup Administration.
       
         _____________________________________________________________
       
How to Get PGP

       Information about obtaining PGP can be found in the Where to get the
       latest PGP FAQ article, posted regularly in the alt.security.pgp
       newsgroup.
       
How to Get Perl

       Information about obtaining Perl can be found in the comp.lang.perl.*
       FAQ 1/5 - Availability article, posted regularly in the
       comp.lang.perl.misc newsgroup.
         _____________________________________________________________
       
Last modified: 24 Feb 1998
David C Lawrence
tale@isc.org

