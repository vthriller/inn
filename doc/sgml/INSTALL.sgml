<!DOCTYPE book PUBLIC "-//Davenport//DTD DocBook V2.4.1//EN"> 
<!-- -->
<!-- $Id$ -->
<!-- -->
<!-- $Log$
<!-- Revision 1.3  1999/06/11 18:31:58  scrappy
<!-- Russ's INSTALL.sgml converted/output'd as html ...
<!-- -->
<!-- -->
<!-- General reminders: -->

<book>

<chapter id="pod2docbook-ch-1"><title>Welcome to INN 2.3!</title>
<chapter id="pod2docbook-ch-1"><title>Welcome to INN 2.3!

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
Please read this document thoroughly before trying to install INN. You'll
be glad you did.


</para>

<para>
If you are upgrading from a previous release of INN, it is recommended that
you make copies of your old configuration files and use them as guides for
doing a clean installation and configuration of 2.3. Many config files have
changed, some have been added, and some have been removed. You'll find it
much easier to start with a fresh install than to try to update your old
installation. This is particularly true if you're upgrading from a version
of INN prior to 2.0.


</para>

<sect1 id="pod2docbook-ch-1-sect-1"><title>Supported Systems

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
INN has been confirmed to work on the following operating systems:


</para>

<para>
<screen>
  FreeBSD 2.2.x
  FreeBSD 3.x
  Linux 2.0.x (with libc 5.4 or libc 6.0)
  OpenBSD ?.?
  SCO 5.0.4 (tested with gcc 2.8.1)
  Solaris 2.5.x
  Solaris 2.6.x
  SunOS 4.1.4
  UX/4800 R11 and up
  AIX 4.2
</screen>


</para>

<para>
FIXME: I'm pretty sure that Clayton's work makes this list outdated and we
should reverify all platforms again. It would surprise me if SunOS has an
<literal>mmap()</literal> up to the task, for example.


</para>

<para>
So far as possible, INN is written in portable C and should work on any
Unix platform. It does, however, make extensive use of
<literal>mmap()</literal> and certain other constructs that may be poorly
or incompletely implemented, particularly on old operating systems.


</para>

<para>
If you have gotten INN working on an operating system other than the ones
listed above, please let us know at inn-workers@isc.org.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-2"><title>Before You Begin

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
INN requires several other packages be installed in order to be fully
functional (or in some cases, to work at all):


</para>

<itemizedList>
<listitem><para>
</para>

<para>
In order to build INN, you will need a C compiler that understands ANSI C.
If you are trying to install INN on an operating system that doesn't have
an ANSI C compiler (such as SunOS), installing gcc is recommended. You can
get it from ftp://ftp.gnu.org/gcc/ or its mirrors. INN is tested with gcc
more thoroughly than with any other compiler, so even if you have another
compiler available, you may wish to use gcc instead.


</para>

</listitem>
<listitem><para>
</para>

<para>
INN requires Perl to build and to run several subsystems. Though most of
those components are compatible with Perl 4, some features (such as script
embedded in the server) mandate Perl 5. Effort is made to ensure that all
parts of INN will work with Perl 5.004; older versions may or may not be
adequate. It's therefore recommended that you have at least Perl 5.004
installed before attempting to compile INN. For instructions on obtaining
and installing Perl, see http://www.perl.com/latest/.


</para>

</listitem>
<listitem><para>
</para>

<para>
The INN Makefiles use the syntax <literal>include FILE</literal>, rather than the syntax common on BSDish systems of <literal>.include &lt;FILE&gt;</literal>. If your system expects the BSDish syntax, you can address this in two
ways: change each Makefile's include lines, or install GNU make
(ftp://ftp.gnu.org/make/). If you choose the latter route, make sure that
the path to make in
<emphasis>site/do-subst.sh</emphasis> points to GNU make.


</para>

<para>
FIXME: Is this reference to <emphasis>site/do-subst.sh</emphasis> still needed? Is there any way we can make autoconf handle this for us,
including putting the right make program in <emphasis>site/do-subst.sh</emphasis>? (Is anyone still using subst or this script now that the build system
isn't any more?)


</para>

</listitem>
<listitem><para>
</para>

<para>
If you want to enable support for authenticated control messages (this is
NOT required) then you will need to install PGP. Unfortunately, the
licensing restrictions on PGP are extremely unclear; it's possible that if
you are installing INN for a company, even if the news server is not part
of the business of that company, you would need to purchase a commercial
license for PGP. For an educational or non-profit organization, this
shouldn't be a problem. See http://www.pgp.com/ for more information about
PGP, including the licensing restrictions.


</para>

<para>
You may also want to look at GnuPG (http://www.gnupg.org/), a free software
OpenPGP implementation. Unfortunately, most control message signatures are
currently PGP 2.6.2-compatible signatures, which cannot be handled by stock
GnuPG for patent reasons. However, there are add-on modules for GnuPG that
allow verification of those types of signatures, particularly if you are
outside the United States.


</para>

</listitem></itemizedList>

<para>
Also, if you want to use either the Tcl or Python embedded hooks, you'll
need to have suitable versions of Tcl and/or Python installed. See
README.tcl_hook and README.python_hook for more information.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-3"><title>Unpacking the Distribution

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
Obtain the INN source distribution from ftp.isc.org in directory
/isc/inn/snapshots. The files in the snapshots directory are snapshots of
the current inn source taken daily. They are stored in date format; in
other words, 0400 5 May 1998 GMT's file is named
<emphasis>inn-1998-05-17_04-00.tar.gz</emphasis>. Choose the newest file. The distribution is in gzip compressed tar
archive format. To extract it, execute:


</para>

<para>
<screen>
    gunzip -c &lt;inn-src-file&gt; | tar -xf -
</screen>


</para>

<para>
Extracting the source distribution will create a directory named inn where
the source resides.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-4"><title>Installing INN

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
Before beginning installation, you should make sure that there is a user on
your system named <literal>news</literal>, and that this user's primary group is set to a group called <literal>news</literal>. The home directory of this user should be set to the directory under
which you wish to install INN (/usr/local/news is the default and is a good
choice). INN will install itself as this user and group. You can change
these if you want but these are the defaults and it's easier to stick with
them on a new installation.


</para>

<para>
As a side note, whenever doing anything with a running news server, first
log in as this user. That way, you can ensure that all files created by any
commands you run are created with the right ownership to be readable by the
server. Particularly avoid doing anything in the news spool itself as root,
and make sure you fix the ownership of any created files if you have to.
INN doesn't like files in the news spool owned by a user other than the
news user.


</para>

<para>
INN 2.3 uses GNU autoconf and a generated configure script to make
configuration rather painless. Unless you have a rather abnormal setup,
configure should be able to completely configure INN for your system. If
you want to change the defaults, you can invoke the configure script with
one or more command line options. Type:


</para>

<para>
<screen>
    ./configure --help
</screen>


</para>

<para>
for a full list of supported options. Some of the most commonly used
options are:


</para>

<variableList>
<varlistentry><term><emphasis>--prefix=PATH

</emphasis></term>
<listitem><para></para>

<para>
Sets the installation prefix for INN. The default is /usr/local/news. All
of INN's programs and support files will be installed under this directory.
You should set this to the home directory of your news user (it will make
installation and maintenance easier).


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--with-db-dir=PATH

</emphasis></term>
<listitem><para></para>

<para>
Sets the prefix for INN database files. The default is PREFIX/db, where
PREFIX is /usr/local/news unless overridden with the option above. All of
the really large files created by INN, including the history file, the
overview files, and the news spool (for tradspool, timehash, and timecaf
storage methods) are created under this directory, so it's the most common
portion of INN to move to a different location on the system (often /news).


</para>

<para>
It's also possible to set the paths for most other sections of the INN
installation independently; see <literal>./configure --help</literal> and look for the
<emphasis>--with-*-dir</emphasis>=PATH options.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--enable-tagged-hash

</emphasis></term>
<listitem><para></para>

<para>
Use tagged hash table for the history database. The tagged hash format uses
much less memory but is somewhat slower. This option is recommended if you
have less than 256 MB of RAM on your news server. If you install INN
without tagged hash (the default) and expire takes an excessive amount of
time, you should make sure the RAM in your system satisfies the following
formula:


</para>

<para>
<screen>
    ram &gt; 10 * tablesize
</screen>


</para>

<para>
<screen>
          ram:  Amount of system RAM
    tablesize:  3rd field on the 1st line of history.dir
</screen>


</para>

<para>
If you don't have at least that much RAM, try rebuilding INN with tagged
hash enabled.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--with-perl

</emphasis></term>
<listitem><para></para>

<para>
Enables support for embedded Perl, allowing you to install filter scripts
written in Perl. Highly recommended, because many really good spam filters
are written in Perl. You will need Perl 5.004 or later installed on your
system to use this option (otherwise, INN will not compile). See
README.perl_hook for all the details.


</para>

<para>
Even if you do not use this option, INN still requires Perl to build (but
an earlier version may suffice).


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--with-python

</emphasis></term>
<listitem><para></para>

<para>
Enables support for Python, allowing you to install filter scripts written
in Python. You will need Python 1.5.2 or later installed on your system to
enable this option. See README.python_hook for all the details.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--with-tcl

</emphasis></term>
<listitem><para></para>

<para>
Enables support for Tcl, allowing you to install filter scripts written in
Tcl. Most available filterse seem to be written in Perl these days, so you
can safely leave out Tcl support. If you choose to enable this, you will
need to have a suitable Tcl distribution installed. See README.tcl_hook for
all the details.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--disable-uucp-rnews

</emphasis></term>
<listitem><para></para>

<para>
By default, rnews is installed setuid root, owned by group uucp, and mode
4550. This is so that the UUCP subsystem can run rnews to process UUCP
batches of news articles (rnews changes UID to the news user right after it
starts). If you don't plan on using UUCP, and particularly if you don't
have a uucp group on your system, you probably want to use this option to
cut down on the number of needless setuid root binaries on your system.
When this option is used, rnews will only be executable by the news user.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>--disable-setgid-inews

</emphasis></term>
<listitem><para></para>

<para>
By default, inews is installed setgid news so that it can be run by regular
users and still be able to talk to innd via a Unix domain socket (somewhat
faster than opening a new network connection). If you are installing a
standalone news server that won't have regular users (or at least regular
users who need to run inews), you probably want to use this option to cut
down on needless setgid binaries. When this option is used, inews will only
be executable by users in the news group.


</para>

</listitem></varlistentry></variablelist>

<para>
For the most common installation, a standalone news server, a suggested set
of options is:


</para>

<para>
<screen>
    ./configure --with-perl --disable-uucp-rnews --disable-setgid-inews
</screen>


</para>

<para>
provided that you have the necessary version of Perl installed.


</para>

<para>
If the configure program runs successfully, then you are ready to build the
distribution. From the root of the INN source tree, type:


</para>

<para>
<screen>
    make
</screen>


</para>

<para>
At this point you can step away from the computer for a little while and
have a quick snack while INN compiles. On a decently fast system it should
only take five or ten minutes at the most to build.


</para>

<para>
Once the build has completed successfully, you are ready to install INN
into its final home. Type:


</para>

<para>
<screen>
    make install
</screen>


</para>

<para>
(You will need to run this command as root so that INN can create the
directories it needs and install a couple of setuid wrapper scripts needed
to raise resource limits and allow innd to bind to port 119.) This will
install INN under the install directory (/usr/local/news, unless you
specified something else to the configure script.) You are now ready for
the really fun part: configuring your copy of INN!


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-5"><title>Choosing an Article Storage Format

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
The first thing to decide is how INN should store articles on your system.
There are four different methods for you to choose from, all of which have
their own advantages and disadvantages. INN can support all four at the
same time, so you can store certain newsgroups in one method and other
newsgroups in another method.


</para>

<para>
The supported storage formats are:


</para>

<variableList>
<varlistentry><term><emphasis>tradspool

</emphasis></term>
<listitem><para></para>

<para>
This is the storage method used by all versions of INN previous to 2.0.
Articles are stored as individual text files whose names are the same as
the article number. The articles are divided up into directories based on
the newsgroup name. For example, article 12345 in news.software.nntp would
be stored as news/software/nntp/12345 relative to the root of the article
spool.


</para>

<para>
Advantages: Widely used and well-understood storage mechanism, can read
article spools written by older versions of INN, compatible with all
third-party INN add-ons, provides easy and direct access to the articles
stored on your server and makes writing programs that fiddle with the news
spool very easy, and gives you fine control over article retention times.


</para>

<para>
Disadvantages: Takes a very fast file system and I/O system to keep up with
current Usenet traffic volues due to file system overhead. Groups with
heavy traffic tend to create a bottleneck because of inefficiencies in
storing large numbers of article files in a single directory. Requires a
nightly expire program to delete old articles out of the news spool, a
process that can slow down the server for several hours or more.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>timehash

</emphasis></term>
<listitem><para></para>

<para>
Articles are stored as individual files as in tradspool, but are divided
into directories based on the arrival time to ensure that no single
directory contains so many files as to cause a bottleneck.


</para>

<para>
Advantages: Heavy traffic groups do not cause bottlenecks, and fine control
of article retention time is still possible.


</para>

<para>
Disadvantages: The ability to easily find all articles in a given newsgroup
and manually fiddle with the article spool is lost, and INN still suffers
from speed degredation due to file system overhead (creating and deleting
individual files is a slow operation).


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>timecaf

</emphasis></term>
<listitem><para></para>

<para>
Similar to timehash, articles are stored by arrival time, but instead of
writing a separate file for each article, multiple articles are put in the
same file.


</para>

<para>
Advantages: Roughly four times faster than timehash for article writes,
since much of the file system overhead is bypassed, while still retaining
the same fine control over article retention time.


</para>

<para>
Disadvantages: Even worse than timehash, and similar to cnfs (below), using
this method means giving up all but the most careful manually fiddling with
your article spool. As one of the newer and least widely used storage
types, timecaf has not been as thoroughly tested as the other methods.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>cnfs

</emphasis></term>
<listitem><para></para>

<para>
CNFS stores articles sequentially in pre-configured buffer files. When the
end of the buffer is reached articles new articles are stored from the
beginning of the buffer, overwriting older articles.


</para>

<para>
Advantages: Blazingly fast because no file creations or deletions are
necessary to store an article. Unlike all other storage methods, does not
require manual article expiration; old articles are deleted to make room
for new ones when the buffers get too full. Also, with CNFS your server
will never throttle itself due to a full spool disk, and groups are
restricted to just the buffer files you give them so that they can never
use more than the amount of disk space you allocate to them.


</para>

<para>
Disadvantages: Article retention times are more difficult to control
because old articles are overwritten automatically. Attacks on Usenet, such
as flooding or massive amounts of spam, can cause wanted articles to expire
much faster than you intended with no warning.


</para>

</listitem></varlistentry></variablelist>

<para>
Some general recommendations: If you are installing a transit news server
(one that just accepts news and sends it out again to other servers and
doesn't support any readers), use CNFS exclusively and don't worry about
any of the other storage methods. Otherwise, put high-volume groups and
groups whose articles you don't need to keep around very long (binaries
groups, *.jobs*, news.lists.filters, etc.) in CNFS buffers, and use
timehash, timecaf, or tradspool (if you have a fast I/O subsystem or need
to be able to go through the spool manually) for everything else. You'll
probably find it most convenient to keep special hierarchies like local
hierarchies and hierarchies that should never expire in tradspool.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-6"><title>Configuring INN

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
All documentation from this point on assumes that you have set up the news
user on your system as suggested in <emphasis>Installing INN</emphasis> so that the root of your INN installation is ~news/. If you've moved things
around with by using the options to configure, you'll need to adjust the
instructions to account for that.


</para>

<para>
All of INN's configuration files are located in ~news/etc. Unless noted
otherwise, any files referred to below are in this directory. When you
first install INN, samples of each file (containing lots of comments) are
installed in ~news/etc; refer to them for concrete examples of everything
discussed in this section.


</para>

<para>
All of INN's configuration files, all of the programs that come with it,
and some of its library routines have documentation in the form of man
pages. These man pages were installed in ~news/man as part of the INN
installation process and are the most complete reference to how INN works.
You're strongly encouraged to refer to the man pages frequently while
configuring INN, and for quick reference afterwards. Any detailed questions
about individual configuration files or the behavior of specific programs
should be answered in them. You may want to add ~news/man to your MANPATH
environment variable; otherwise, you may have to use a command like:


</para>

<para>
<screen>
    man -M ~news/man inn.conf
</screen>


</para>

<para>
to see the man page for inn.conf (for example).


</para>

<para>
Before we begin, it is worth mentioning the wildmat pattern matching syntax
used in many configuration files. These are simple wildcard matches using
the asterisk (<literal>*</literal>) as the wildcard character, much like the simple wildcard expansion used
by Unix shells.


</para>

<para>
In many cases, wildmat patterns can be specified in a comma-separated list
to indicate a list of newsgroups. When used in this fashion, each pattern
is checked in turn to see if it matches, and the last pattern in the line
that matches the group name is used. Patterns beginning with <literal>!</literal> mean to exclude groups matching that pattern. For example:


</para>

<para>
<screen>
    *, !comp.*, comp.os.*
</screen>


</para>

<para>
In this case, we're saying we match everything (<literal>*</literal>), except that we don't match anything under comp (<literal>!comp.*</literal>), unless it is actually under the comp.os hierarchy (<literal>comp.os.*</literal>). This is because non-comp groups will match only the first pattern (so we
want them), comp.os groups will match all three patterns (so we want them
too, because the third pattern counts in this case), and all other comp
groups will match the first and second patterns and will be excluded by the
second pattern.


</para>

<para>
Some uses of wildmat patterns also support ``poison'' patterns (patterns
starting with <literal>@</literal>). These patterns behave just like <literal>!</literal> patterns when checked against a single newsgroup name. Where they become
special is for articles crossposted to multiple newsgroups; normally, such
an article will be considered to match a pattern if any of the newsgroups
it is posted to matches the pattern. If any newsgroup the article is posted
to matches an expression beginning with <literal>@</literal>, however, that article will not match the pattern even if other newsgroups
to which it was posted match other expressions.


</para>

<para>
See <literal>wildmat(5)</literal> for full details on wildmat patterns.


</para>

<para>
In most INN configuration files, blank lines and lines beginning with a
<literal>#</literal> symbol are considered comments and are ignored. Any deviations from this
practice will be noted in the description for that particular file.


</para>

<sect2 id="pod2docbook-ch-1-sect-6-a"><title>inn.conf (REQUIRED)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
The first, and most important file is <emphasis>inn.conf</emphasis>. This file is organized as a series of parameter-value pairs, one per
line. The parameter is first, followed by a colon and one or more
whitespace characters and the value itself. For some parameters the value
is a string or a number; for others it is ``yes'' or ``no.''


</para>

<para>
<emphasis>inn.conf</emphasis> contains dozens of changeable parameters (see inn.conf(5) for full
details), but only a few really need to be edited during normal operation:


</para>

<variableList>
<varlistentry><term><emphasis>complaints

</emphasis></term>
<listitem><para></para>

<para>
Used to set the value of the X-Complaints-To: header which is added to all
articles posted locally. The usual value would be something like
<literal>abuse@example.com</literal> or <literal>postmaster@example.com</literal>. If not specified, the newsmaster email address will be used.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>organization

</emphasis></term>
<listitem><para></para>

<para>
Set this to the name of your organization as you want it to appear in the
Organization: header of all articles posted locally. This will be
overridden by the value of the ORGANIZATION environment variable (if it
exists). If neither this parameter nor the environment variable or set then
no Organization: header will be added.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>pathhost

</emphasis></term>
<listitem><para></para>

<para>
This is the name of your news server as you wish it to appear in the Path:
header of all postings which travel through your server (this includes
local posts and incoming posts that you forward out to other sites). If no
pathhost is specified then the fully-qualified domain name (FQDN) of the
machine will be used instead. Please use the FQDN of your server or an
alias for your server unless you have a very good reason not to; a future
version of the news RFCs may require this.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>allownewnews

</emphasis></term>
<listitem><para></para>

<para>
If set to ``yes'' then INN will support the NEWNEWS command for news
readers. This will really kill your server performance if clients use it
heavily, so it is strongly suggested that you set this to ``no'' (the
default).


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>hiscachesize

</emphasis></term>
<listitem><para></para>

<para>
The size in kilobytes to use for caching recently used history file
entries. Setting this to 0 disables history caching. History caching can
greatly increase the number of articles per second that your server is
capable of processing. A value of 16384 (16 MB) is a good choice if you can
spare the RAM.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>logipaddr

</emphasis></term>
<listitem><para></para>

<para>
If set to ``yes'' (the default), INN will log the IP address of the remote
host from which it received an article. If set to ``no'', the trailing
Path: header entry is logged instead. If you are using controlchan (see
below) and need to process ihave/sendme control messages (this is very,
very unlikely, so if you don't know what this means, don't worry about it),
make sure you set this to ``no''.


</para>

<para>
FIXME: Er... why does controlchan have to figure it out from the logs?
Can't it retrieve the message and look at the Path header? This doesn't
make any sense to me....


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>rlimitnofile

</emphasis></term>
<listitem><para></para>

<para>
If set to a non-negative value (the default is -1), INN (both innd and
innfeed) will try to raise the maximum number of open file descriptors to
this value when it starts. This may be needed if you have lots of incoming
and outgoing feeds. Note that the maximum value for this setting is very
operating-system-dependent, and you may have to reconfigure your system
(possibly even recompile your kernel) to increase it. See <emphasis>File Descriptor Limits</emphasis> for complete details.


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>usecontrolchan

</emphasis></term>
<listitem><para></para>

<para>
If set to ``yes'', all control messages except for cancels will be ignored
by innd so that they can be processed by an external program (controlchan).
This is <emphasis>highly</emphasis> recommended, since controlchan will serialize control message processing
and prevent your system load from exploding when you get a flood of control
messages. The only reason why it isn't enabled by default is that it
requires you to set up a special feed in newsfeeds (see below) and requires
you to run:


</para>

<para>
<screen>
    # cd /usr/include
    # h2ph * sys/*
</screen>


</para>

<para>
so that the Sys::Syslog Perl module works correctly. (Otherwise,
controlchan will log messages to errlog, which probably isn't what you
want.)


</para>

</listitem></varlistentry>
<varlistentry><term><emphasis>domain

</emphasis></term>
<listitem><para></para>

<para>
Sets the domain name for your server. Normally this is determined
automatically by INN, but in some cases it is necessary to set it manually.
For example, if you are running NIS on a SunOS system <emphasis>and</emphasis>
your hostnames are not fully-qualified (ie, your systems are named xxxx
instead of xxxx.example.com) then you will need to use this option to set
your domain name manually. If in doubt, leave this option commented out or
remove it completely.


</para>

</listitem></varlistentry></variablelist>

<para>
There are tons of other possible settings; you may want to read through
inn.conf(5) to get a feel for your options. Don't worry if you don't
understand the purpose of most of them right now. Some of the settings are
only needed for very obscure things, and with more experience running your
news server the rest will make more sense.


</para>

</sect2>

<sect2 id="pod2docbook-ch-1-sect-6-b"><title>newsfeeds (REQUIRED)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
<emphasis>newsfeeds</emphasis> determines how incoming articles are redistributed to your peers and to
other INN processes.  <emphasis>newsfeeds</emphasis> is very versatile and contains dozens of options; we will touch on just the
basics here. <literal>newsfeeds(5)</literal> contains more detailed
information.


</para>

<para>
<emphasis>newsfeeds</emphasis> is organized as a series of feed entries. Each feed entry is composed of
four fields separated by colons. Entries may span multiple lines by using
the backslash (\) to indicate that the next line is a continuation of the
current line.


</para>

<para>
The first field in an entry is the name of the feed. It must be unique, and
for feeds to other news servers it is usually set to the actual hostname of
the remote server (this makes things easier). The name can optionally be
followed by a slash and a comma-separated exclude list. If the feed name or
any of the names in the exclude list appear in the Path line of an article,
then that article will not be forwarded to the feed as it is assumed that
it has passed through that site once already. The exclude list is useful
when a news server's hostname is not the same as what it puts in the Path
header of its articles, or when you don't want a feed to receive articles
from a certain source.


</para>

<para>
The second field specifies a set of desired newsgroups and distribution
lists, given as newsgroup-pattern/distribution-list. The distribution list
is not described here; <literal>newsfeeds(5)</literal> for information
(it's not used that frequently in practice). The newsgroup pattern is a
wildmat-style pattern list as described above (supporting <literal>@</literal>).


</para>

<para>
The third field is a comma-separated list of flags that determine both the
type of feed entry and sets certain parameters for the entry. See
<literal>newsfeeds(5)</literal> for information on the flag settings; you
can do a surprising amount with them. The three most common patterns, and
the ones mainly used for outgoing news feeds to other sites, are <literal>Tf,Wnm</literal> (to write out a batch file of articles to be sent, suitable for processing
by nntpsend and innxmit), <literal>Tm</literal> (to send the article to a funnel feed, used with innfeed), and <literal>Tc,Wnm*</literal> (to collect a funnel feed and send it via a channel feed to an external
program, used to send articles to innfeed).


</para>

<para>
The fourth field is a multi-purpose parameter whose meaning depends on the
settings of the flags in the third field. To get a feel for it using the
examples above, for file feeds (<literal>Tf</literal>) it's the name of the file to write, for funnel feeds (<literal>Tm</literal>) it's the name of the feed entry to funnel into, and for channel feeds (<literal>Tc</literal>) it's the name of the program to run and feed references to articles.


</para>

<para>
Now that you have a rough idea of the file layout, we'll begin to add the
actual feed entries. First we'll set up the special ME entry. This entry is
required and serves two purposes: the newsgroup pattern specified here is
prepended to the newsgroup list of all other feeds, and the distribution
pattern for this entry determines what distributions (from the
Distribution: header of incoming articles) are accepted from remote sites
by your server. The example in the sample newsfeeds file is a good starting
point; if you are going to create a local hierarchy that should not be
distributed off of your system, make sure to exclude it from the default
subscription pattern.


</para>

<para>
FIXME: This file originally recommended ME:*,!junk,!local*/!local::, which
is considerably different than the current sample newsfeeds file. This
should be reconciled....


</para>

<para>
The ME entry tends to confuse a lot of people, so this point is worth
repeating: The newsgroup patterns set the default subscription for
<emphasis>outgoing</emphasis> feeds, and the distribution patterns set the acceptable Distribution:
header entries for <emphasis>incoming</emphasis> articles. This is confusing enough that it may change in later versions of
INN.


</para>

<para>
There are two basic ways to feed articles to remote sites. The most common
for large sites and particularly for transit news servers is innfeed, which
sends articles to remote sites in real time (the article goes out to all
peers that are supposed to receive it immediately after your server accepts
it). For smaller sites, particularly sites where the only outgoing messages
will be locally posted articles, it's more common to batch outgoing
articles and send them every ten minutes or so from cron using nntpsend and
innxmit. Batching gives you more control and tends to be extremely stable
and reliable, but it's much slower and can't handle lots of articles well.


</para>

<para>
Batching outgoing posts is easy to set up; for each peer, add an entry to
newsfeeds that looks like:


</para>

<para>
<screen>
    remote.example.com/news.example.com\
        :&lt;newsgroups&gt;\
        :Tf,Wnm:
</screen>


</para>

<para>
where &lt;newsgroups&gt; is the wildmat pattern for the newsgroups that site wants.
In this example, the actual name of the remote site is remote.example.com,
but it puts news.example.com in the Path: header. If the remote site puts
its actual hostname in the Path: header, you won't need the <literal>/news.example.com</literal> part.


</para>

<para>
This entry will cause innd to write out a file in ~news/db/outgoing named
remote.example.com and containing the message ID and storage token of each
message to send to that site. innxmit knows how to read this format of file
and send those articles to the remote site. For information on setting it
up to run periodically, see <emphasis>Setting Up the Cron Jobs</emphasis> below.


</para>

<para>
If instead you want to use innfeed to send outgoing messages (recommended
for sites with more than a couple of peers), you need some slightly more
complex magic. You still set up a separate entry for each of your peers,
but rather than writing out batch files, they all ``funnel'' into a special
innfeed entry. That special entry collects all of the separate funnel feeds
and sends the data through a special sort of feed to an external program,
called a channel feed.


</para>

<para>
First, the special channel feed entry for innfeed that will collect all the
funnel feeds:


</para>

<para>
<screen>
    innfeed!\
        :!*\
        :Tc,Wnm*:/usr/local/news/bin/startinnfeed -y
</screen>


</para>

<para>
(adjust the path to startinnfeed if you installed it elsewhere). Note that
we don't feed this entry any articles directly (its newsgroup pattern is <literal>!*</literal>). Note also that the name of this entry ends in an exclamation point. This
is a standard convention for all special feeds; since the delimiter for the
Path: header is <literal>!</literal>, no site name containing that character can match the name of a real site.


</para>

<para>
FIXME: The original entry had an S16384 flag as well. Is that desired?


</para>

<para>
Next, set up entries for each remote site to which you will be feeding
articles. All of these entries should be of the form:


</para>

<para>
<screen>
    remote.example.com/news.example.com\
        :&lt;newsgroups&gt;\
        :Tm:innfeed!
</screen>


</para>

<para>
specifying that they funnel into the <literal>innfeed!</literal> feed. As in the previous example for batching, remote.example.com is the
actual name of the remote peer, news.example.com is what they put in the
Path: header (if different than the actual name of the server), and
&lt;newsgroups&gt; is the wildmat pattern of newsgroups they want.


</para>

<para>
Finally, if you set usecontrolchan to ``yes'' in <emphasis>inn.conf</emphasis>, you need to set up an entry for the controlchan program. This entry
should look like:


</para>

<para>
<screen>
    controlchan!\
        :!*,control,control.*,!control.cancel\
        :Tc,Wnsm:/usr/local/news/bin/controlchan
</screen>


</para>

<para>
(modified for the actual path to controlchan if you put it somewhere else).
You should be able to just uncomment the example entry in the sample
newsfeeds file, making sure the path is correct.


</para>

<para>
For those of you upgrading from earlier versions of INN, note that the
functionality of overchan and crosspost is now incorporated into INN and
neither of those programs are necessary (and running them could cause
problems). Unfortunately, crosspost currently will not work even with the
tradspool storage method.


</para>

</sect2>

<sect2 id="pod2docbook-ch-1-sect-6-c"><title>incoming.conf (REQUIRED)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
This file specifies which machines are permitted to connect to your host
and feed it articles. Remote servers you peer with should be listed here.
Connections from hosts not listed in this file will (if you don't allow
readers) be rejected or (if you allow readers) be handed off to nnrpd and
checked against the access restrictions in <emphasis>readers.conf</emphasis>.


</para>

<para>
Start with the sample <emphasis>incoming.conf</emphasis> and, for each remote peer, add an entry like:


</para>

<para>
<screen>
    peer remote.example.com { }
</screen>


</para>

<para>
This uses the default parameters for that feed and allows incoming
connections from a machine named remote.example.com. If that peer could be
connecting from several different machines, instead use an entry like:


</para>

<para>
<screen>
     peer remote.example.com {
        hostname: "remote.example.com, news.example.com"
     }
</screen>


</para>

<para>
This will allow either remote.example.com or news.example.com to feed
articles to you. (In general, you should add new peer lines for each
separate remote site you peer with, and list multiple host names using the
hostname key if one particular remote site uses multiple servers.)


</para>

<para>
You can restrict the newsgroups a remote site is allowed to send you using
the same sort of pattern that newsfeeds uses. For example, if you want to
prevent example.com hosts from sending you any articles in the local.*
hierarchy (even if they're crossposted to other groups), change the above
to:


</para>

<para>
<screen>
    peer remote.example.com {
        patterns: "*, @local.*"
        hostname: "remote.example.com, news.example.com"
    }
</screen>


</para>

<para>
There are various other things you can set, including the maximum number of
connections the remote host will be allowed. See incoming.conf(5) for all
the details.


</para>

<para>
Note for those familiar with older versions of INN: This file replaces the
old <emphasis>hosts.nntp</emphasis> configuration file.


</para>

</sect2>

<sect2 id="pod2docbook-ch-1-sect-6-d"><title>cycbuff.conf (required if CNFS is used)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
CNFS stores articles in logical objects called metacycbuffs. Each of the
metacycbuffs is in turn composed of one or more physical buffers called
cycbuffs. As articles are written to the metacycbuff each article is
written to the next cycbuff in the list in a round-robin fashion. This is
so that you can distribute the individual cycbuffs across multiple physical
disks and balance the load between them.


</para>

<para>
There are two ways to create your cycbuffs:


</para>

<orderedList>
<listitem>
<para>


</para>

<para>
Use a raw disk partition (best). This will give you the most speed, but it
required that your OS support <literal>mmap()</literal> on a block device.
Solaris supports this, FreeBSD and Linux do not. Also on many PC-based
Unixes it is difficult to create more than eight partitions, which may
limit your options.


</para>

</listitem>
<listitem>
<para>


</para>

<para>
Use a real file on a filesystem. This will be a bit slower than using a raw
disk partition, but it should work on any Unix system.


</para>

</listitem></orderedlist>

<para>
If you're having doubts, use option #2.


</para>

<para>
Now you need to decide on the sizes of your cycbuffs and metacycbuffs.
You'll probably want to separate the heavy-traffic groups (alt.binaries.*
and maybe a few other things like *.jobs* and news.lists.filters) into
their own metacycbuff so that they don't overrun the server and push out
articles on the more useful groups. If you have any local groups that you
want to stay around for a while then you should put them in their own
metacycbuff as well, so that they don't get pushed out by other traffic.
For each metacycbuff, you now need to determine how many cycbuffs will make
up the metacycbuff, the size of those cycbuffs and where they will be
stored. Some OSs do not support files larger than 2GB which will force all
of your cycbuffs to be &lt; 2GB (even if they are stored on raw disk
partitions). Linux is known to have this limitation, FreeBSD does not. If
in doubt, keep your cycbuffs smaller than 2GB. Also when laying out your
cycbuffs, you will want to try to arrange them across as many physical
disks as possible (or use a striped disk array and put them all on that).


</para>

<para>
For each cycbuff you will be creating, add a line to <emphasis>cycbuff.conf</emphasis> like the following:


</para>

<para>
<screen>
    cycbuff:BUFFNAME:/path/to/buffer:SIZE
</screen>


</para>

<para>
BUFFNAME must be unique and must be &lt; 8 characters in length. Something
simple like ``BUFF00'', ``BUFF01'', etc. is a decent choice, or you may
want to use something that includes the SCSI target and slice number of the
partition. SIZE is the buffer size in kilobytes (if you're trying to stay
under 2GB, keep your sizes below 2097152).


</para>

<para>
Now, you need to tell INN how to group your cycbuffs into metacycbuffs.
This is similar to creating cycbuff entries:


</para>

<para>
<screen>
    metacycbuff:BUFFNAME:CYCBUFF,CYCBUFF,CYCBUFF
</screen>


</para>

<para>
BUFFNAME is the name of the metacycbuff, and like cycbuff names must be
unique and &lt;= 8 characters long. These should be a bit more meaningful
than the cycbuff names since they will be used in other config files as
well. Try to name them after what will be stored in them; for example, if
this metacycbuff will hold alt.binaries postings, ``BINARIES'' would be a
good choice. The last part of the entry is a comma-separated list of all of
the cycbuffs that should be used to build this metacycbuff. Each cycbuff
should only appear in one metacycbuff line, and all metacycbuff lines must
occur after all cycbuff lines in the file.


</para>

</sect2>

<sect2 id="pod2docbook-ch-1-sect-6-e"><title>storage.conf (REQUIRED)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
<emphasis>storage.conf</emphasis> determines where incoming articles will be stored (what storage method, and
in the case of CNFS, what metacycbuff). Each entry in the file defines a
storage class for articles. The first matching storage class is used to
store the article; if no storage class matches, INN will reject that
article. (This is almost never what you want, so make sure this file ends
in a catch-all entry that will match everything.)


</para>

<para>
A storage class definition looks like this:


</para>

<para>
<screen>
    method &lt;methodname&gt; {
        newsgroups: &lt;wildmat&gt;
        class: &lt;storage_class&gt;
        size: &lt;minsize&gt;[,&lt;maxsize&gt;]
        expires: &lt;mintime&gt;[,&lt;maxtime&gt;]
        options: &lt;options&gt;
    }
</screen>


</para>

<para>
&lt;methodname&gt; is the name of the storage method to use to store
articles in this class (``cnfs'', ``timehash'', ``timecaf'', ``tradspool'',
or the special method ``trash'' that accepts the article and throws it
away).


</para>

<para>
The first parameter is a wildmat pattern in the same format used by the
newsfeeds file, and determines what newsgroups are accepted by this storage
class.


</para>

<para>
The second parameter is a unique number identifying this storage class and
should be between 0 and 255. It is used primarily to control article
expiration. The easiest way to deal with this parameter is to just number
all storage classes in storage.conf sequentially.


</para>

<para>
The third parameter can be used to accept only articles in a certain size
range into this storage class. A &lt;maxsize&gt; of zero (or a missing
&lt;maxsize&gt;) means no upper limit (and of course a &lt;minsize&gt; of 0
would mean no lower limit, because an article is always great than zero
bytes long). If you don't want to limit the size of articles accepted by
this storage class, leave this parameter out entirely.


</para>

<para>
The fourth parameter you probably don't want to use; it lets you assign
storage classes based on the Expires: header of incoming articles. The
exact details are in storage.conf(5). It's very easy to use this parameter
incorrectly; leave it out entirely unless you've read the man page and know
what you're doing.


</para>

<para>
The fifth parameter is the options parameter. Currently only CNFS uses this
field; it should contain the name of the metacycbuff used to store articles
in this storage class.


</para>

<para>
If you're using CNFS exclusively, just create one storage class for each
metacycbuff that you have defined (in <emphasis>cycbuff.conf</emphasis>) and set the newsgroups pattern according to what newsgroups should be
stored in that buffer.


</para>

<para>
If you're using timehash or timecaf, the storage class IDs are used to
store articles in separate directory trees so that different expiration
policies can be applied to each storage class. You will need to divide up
your newsgroups based on how long you want to retain articles in those
groups, and create a storage class for each such collection of newsgroups.
Make note of the storage class IDs you assign as they will be needed when
you edit the <emphasis>expire.ctl</emphasis> file a bit later.


</para>

</sect2>

<sect2 id="pod2docbook-ch-1-sect-6-f"><title>expire.ctl (REQUIRED)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
This file sets the expiration policy for articles stored on the server.
Only one entry is required for all storage classes; it looks like:


</para>

<para>
<screen>
    /remember/:14
</screen>


</para>

<para>
This entry says how long to keep the message IDs for articles that have
already expired in the history file so that the server doesn't accept them
again. Occasionally, fairly old articles will get regurgitated somewhere
and offered to you again, so even after you've expired articles from your
spool, you want to keep them around in your history file for a little while
to ensure you don't get duplicates.


</para>

<para>
INN will reject any articles more than a certain number of days old (the
artcutoff parameter in <emphasis>inn.conf</emphasis>, defaulting to 14); the number on the
<literal>/remember/</literal> line should match that.


</para>

<para>
CNFS makes no further use of <emphasis>expire.ctl</emphasis>, since articles stored in CNFS buffers expire automatically when the
buffer runs out of free space. For timehash and timecaf (and currently for
tradspool), <emphasis>expire.ctl</emphasis> takes additional entries of the form:


</para>

<para>
<screen>
    &lt;storage_class&gt;:&lt;keep&gt;:&lt;default&gt;:&lt;purge&gt;
</screen>


</para>

<para>
&lt;storage_class&gt; is the number assigned to a storage class in
<emphasis>storage.conf</emphasis>. &lt;default&gt; is the number of days to keep normal articles in that
storage class (decimal values are allowed). For articles that don't have an
Expires: header, those are the only two values that matter. For articles
with an Expires: header, the other two values come into play; the date
given in the Expires: header of an article will be honored subject to the
contraints set by &lt;keep&gt; and &lt;purge&gt;. All articles in this
storage class will be kept for at least &lt;keep&gt; days, regardless of
their Expires: header, and all articles in this storage class will be
expired after &lt;purge&gt; days, even if their Expires: headers specify a
longer life.


</para>

<para>
All three of these fields can also contain the special keyword <literal>never</literal>. If &lt;default&gt; is <literal>never</literal>, only articles with explicit Expires: headers will ever be expired. If
&lt;keep&gt; is <literal>never</literal>, even those articles will be kept forever. Setting &lt;purge&gt; to <literal>never</literal> says to honor Expires: headers even if they specify dates far into the
future.


</para>

<para>
FIXME: The meaning of <literal>never</literal> in various places isn't fully specified in expire.ctl(5); the above is what
I intuitively think it should mean, but it may not match what the code
actually does.


</para>

</sect2>

<sect2 id="pod2docbook-ch-1-sect-6-g"><title>readers.conf (required if you allow readers)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
Provided that noreader is set to false in <emphasis>inn.conf</emphasis>, any connection from a host that doesn't match an entry in <emphasis>incoming.conf</emphasis> (and any connection from a host that does match such an entry but that then
issues a MODE READER command) will be handed off to nnrpd, the part of INN
that supports newsreading clients. nnrpd uses <emphasis>readers.conf</emphasis> to determine whether a given connection is allowed to read news, and if so
what newsgroups they can read and post to.


</para>

<para>
There are a variety of fairly complicated things that one can do with
<emphasis>readers.conf</emphasis>, things like run external authentication programs that can query RADIUS
servers. See readers.conf(5) and the example file for all the gory details.
Here's an example of probably the simplest reasonable configuration, one
that only allows clients in the example.com domain to read from the server
and allows any host in that domain to read and post to all groups:


</para>

<para>
<screen>
    auth "example.com" {
        hosts: "example.com, *.example.com"
        default: "&lt;user&gt;"
        default-domain: "example.com"
    }
</screen>


</para>

<para>
<screen>
    access "all" {
        users: "*@example.com"
        newsgroups: "*"
        access: "Read Post"
    }
</screen>


</para>

<para>
If you're running a server for one particular domain, want to allow all
hosts within that domain to read and post to any group on the server, and
want to deny access to anyone outside that domain, just use the above and
change <literal>example.com</literal> in the above to your domain and you're all set. Lots of examples of more
complicated things are in the example file.


</para>

</sect2>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-7"><title>Creating the Article Spool (CNFS only)

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
If you are using actual files as your CNFS buffers, you will need to
pre-create those files, ensuring they're the right size. The easiest way to
do this is with dd. For each cycbuff in <emphasis>cycbuff.conf</emphasis>, create the buffer with the following commands as the news user:


</para>

<para>
<screen>
    dd if=/dev/zero of=/path/to/buffer bs=1k count=BUFFERSIZE
    chmod 664 /path/to/buffer
</screen>


</para>

<para>
Substitute the correct path to the buffer and the size of the buffer as
specified in <emphasis>cycbuff.conf</emphasis>. This will create a zero-filled file of the correct size; it may take a
while, so be prepared to wait.


</para>

<para>
If you are using raw devices, you don't technically have to do anything at
all (since INN is capable of using the devices in /dev), but you probably
want to create special device files for those devices somewhere for INN's
private use. Not only is it more convenient to keep all of INN's stuff
together, the device files used by INN really should be owned by the news
user and group and you may not want to do that with the files in /dev.


</para>

<para>
To create the device files for INN, use mknod with a type of b, getting the
major and minor device numbers from the existing devices in /dev. There's a
small shell script in cycbuff.conf(5) that may help with this. Make sure to
create the device files in the location INN expects them (specified in <emphasis>cycbuff.conf</emphasis>).


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-8"><title>Creating the Database Files

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
At this point, you need to set up the news database directory (~news/db).
This directory will hold the active file (the list of newsgroups you
carry), the active.times file (the creator and creation time of newsgroups
created since the server was initialized), the newsgroups file
(descriptions for all the newsgroups you carry), and the history file (a
record of every article the server currently has or has seen in the past
few days, used to decide whether to accept or refuse new incoming
messages).


</para>

<para>
Before starting to work on this, make sure you're logged on as the news
user, since all of these files need to be owned by that user. This is a
good policy to always follow; if you are doing any maintenance work on your
news server, log on as the news user. Don't do maintenance work as root.
Also make sure that ~news/bin is in the default path of the news user (and
while you're at it, make sure ~news/man is in the default MANPATH) so that
you can run INN maintenance commands without having to type the full path.


</para>

<para>
If you already have a server set up (if you're upgrading, or setting up a
new server based on an existing server), copy <emphasis>active</emphasis> and <emphasis>newsgroups</emphasis>
from that server into ~news/db. Otherwise, you'll need to figure out what
newsgroups you want to carry and create new active and newsgroups files for
them. If you plan to carry a full feed, or something close to that, go to
ftp://ftp.isc.org/pub/usenet/CONFIG/ and download <emphasis>active</emphasis> and
<emphasis>newsgroups</emphasis> from there; that will start you off with reasonably complete files. If you
plan to only carry a small set of groups, create <emphasis>active</emphasis>
containing only the following lines:


</para>

<para>
<screen>
    control 0000000000 0000000000 y
    control.cancel 0000000000 0000000000 y
    control.checkgroups 0000000000 0000000000 y
    control.newgroup 0000000000 0000000000 y
    control.rmgroup 0000000000 0000000000 y
    junk 0000000000 0000000000 y
    to 0000000000 0000000000 y
</screen>


</para>

<para>
and then type:


</para>

<para>
<screen>
    touch ~news/db/newsgroups
</screen>


</para>

<para>
to create an empty newsgroups file (or you can add descriptions for those
groups if you want).


</para>

<para>
FIXME: We need to do better than this... surely we can add some sort of
automatic process for initializing the minimum active file and adding a
newsgroups file with descriptions for them before we release 2.3?


</para>

<para>
Either way, type:


</para>

<para>
<screen>
    touch ~news/db/active.times
</screen>


</para>

<para>
to initialize <emphasis>active.times</emphasis>.


</para>

<para>
FIXME: Currently, INN returns errors to clients if <emphasis>active.times</emphasis> doesn't exist. It should create it automatically if it doesn't exist, and
then this part can be taken out of the documentation.


</para>

<para>
Next, you need to create an empty history database. To do this, type:


</para>

<para>
<screen>
    cd ~news/db
    makehistory -i
</screen>


</para>

<para>
When it finishes, rename the files it created to remove the <literal>.n</literal> in the file names and then make sure the file permissions are correct on
all the files you've just created:


</para>

<para>
<screen>
    chmod 644 *
</screen>


</para>

<para>
Your news database files are now ready to go.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-9"><title>Setting Up the Cron Jobs

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
INN requires a special cron job to be set up on your system to run the
news.daily script, which performs daily server maintenance tasks such as
article expiration and the processing and rotation of the server logs.
Since it will slow the server down while it is running, it should be run
during periods of low server usage, such as in the middle of the night. To
run it at 3am, for example, add the following entry to the news user's
crontab file:


</para>

<para>
<screen>
    0 3 * * * /usr/local/news/bin/news.daily expireover lowmark
</screen>


</para>

<para>
or, if your system does not have per-user crontabs, put the following line
into your system crontab instead:


</para>

<para>
<screen>
    0 3 * * * su -c "/usr/local/news/bin/news.daily expireover lowmark" news
</screen>


</para>

<para>
If you use the batching method to send news, also set up a cron job to run
nntpsend every ten minutes. nntpsend will run innxmit for all non-empty
pending batch files to send pending news to your peers. That cron entry
should look something like:


</para>

<para>
<screen>
    0,10,20,30,40,50 * * * * /usr/local/news/bin/nntpsend
</screen>


</para>

<para>
The pathnames and user ID used above are the installation defaults; change
them to match your installation if you used something other than the
defaults.


</para>

<para>
The parameters passed to news.daily in the above example are the most
common (and usually the most efficient) ones to use. More information on
what these parameters do can be found in the news.daily man page.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-10"><title>File Descriptor Limits

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
INN likes to use a <emphasis>lot</emphasis> of file descriptors, particularly if you have a lot of peers. Depending on
what your system defaults are, you may need to make sure the default limit
is increased for INN (particularly innd and innfeed). This is vital on
Solaris, which defaults (at least as of 2.6) to an absurdly low limit of 64
file descriptors per process.


</para>

<para>
One way to increase the number of file descriptors is to set rlimitnofile
in <emphasis>inn.conf</emphasis> to a higher value. This will cause startinnfeed and inndstart, the setuid
root wrapper scripts that start innfeed and innd respectively, to increase
the file descriptor limits before they run the regular INN programs. Note,
however, that you won't be able to increase the limits above the hard
limits set by your operating system; on some systems, that hard limit is
256 file descriptors (Linux, for example). On others, like Solaris, it's
1024. Increasing the limit beyond that value may require serious system
configuration work (on Linux, patching and recompiling the kernel; on
Solaris 2.6 or earlier, the limit cannot be increased beyond 1024 without
breaking <literal>select()</literal> and thereby breaking all of INN).


</para>

<para>
256 file descriptors will probably be enough for all but the largest site.
There is no harm in setting the limits higher than you actually need
(provided they're set to something lower than or equal to your system hard
limit). 256 is therefore a reasonable value to try.


</para>

<para>
If you're installing INN on a Solaris system, particularly if you're
installing it on a dedicated news server machine, it may be easier to just
increase the default file descriptor limit across the board for all
processes. You can do that by putting the line:


</para>

<para>
<screen>
    set rlim_fd_cur = 1024
</screen>


</para>

<para>
in <emphasis>/etc/system</emphasis> and rebooting.


</para>

</sect1>

<sect1 id="pod2docbook-ch-1-sect-11"><title>Starting the System

</title>
<!-- Bogus hack to ensure that each sect has a paragraph in it -->
<para>
</para>


<para>
INN is started via the shell script rc.news. This must be run as the news
user and not as root. To start INN on system boot, you therefore want to
put something like:


</para>

<para>
<screen>
    su news -c /usr/local/news/bin/rc.news
</screen>


</para>

<para>
in the system boot scripts. If innd is stopped or killed, you can restart
it by running rc.news by hand as the news user.


</para>

<para>
FIXME: We really should provide a sample init script for people using
System V-style init.d directories.

</para>

</sect1>

</chapter>


</book>    <!-- End of the book -->
