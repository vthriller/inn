<!--Converted to sgml with html2sgml-->
<!doctype linuxdoc system>
<article>
<title>INN 2.x How-To
<author>You name
<date>
<abstract>
</abstract>
<toc>
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN">


   
   <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=iso-8859-1">
   <META NAME="GENERATOR" CONTENT="Mozilla/3.01Gold (X11; I; Linux 2.0.0 i586) &lsqb;Netscape&rsqb;">
   <META NAME="Author" CONTENT="Elena Samsonova, <E.Samsonova@wxs.nl>">
   <META NAME="Keywords" CONTENT="inn news how-to innd nnrpd">



<figure>
<eps file="help">
</figure>


<tabular ca="l">


<sect>InterNet
News How-To
<p>
<colsep>
</TR>
</tabular>

<tabular ca="ll">

Abstract<colsep>

This document is an attempt to plot out a deployment road map for INN
2.1. The document needs to be revised upon an upgrade. <colsep>
</TR>


Author<colsep>

<htmlurl url="mailto:E.Samsonova@wxs.nl" name="Elena Samsonova ">- <htmlurl url="http://www.wxs.nl" name="World">
Access / Planet Internet<colsep>
</TR>


Date<colsep>

December 18, 1998<colsep>
</TR>


Version<colsep>

1.1<colsep>
</TR>
</tabular>

<sect1>
<HR WIDTH="100&percnt;">Instead a foreword
<p>

Since I only run one particular configuration and often follow plain
vanilla choices, I cannot know all the intricacies of other sites, therefore
<bf><it>contributions are welcome!</it></bf> All the author rights will be
preserved, in the sense that the author's name will appear next to his/her
contribution. 


<label id="legend unfinished">Parts of the document that are not yet
completed, are marked in blue. <figure>
<eps file="pig">
</figure>They
ask for a contribution! Click on the pig. :)


<label id="legend change">Changes are marked between <figure>
<eps file="yellow">
</figure>yellow
and dark pink squares<figure>
<eps file="pink">
</figure>.


This document <bf>is not</bf> a transcript of the manuals, and by no means
a replacement for them! Although it may be a great disappointment to those
who don't like to RTFM :) I'm still not going to copy and paste manuals
into here. Instead, every section that talks of programs or scripts, lists
relevant manual pages on the right. As one of the greatest difficulties
in installing INN is finding the right man page, this is supposed to help.


<sect1>References
<p>

<htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">One
of the best sources I found so far, and the one I used mostly, is presented
by Forrest J. Cavalier, Mib Software (<htmlurl url="http://www.mibsoftware.com/userkt" name="http://www.mibsoftware.com/userkt">).


Other nice pages???


<sect1>Acknowledgements
<p>

Many thanks to the following people who sent me very useful comments:


</tag>Forrest J. Cavalier</DD>

</tag>Ragnar Lonn</DD>

</tag>Hans Lambermont</DD>

</tag>Steve Tremblett</DD>

</tag><bf><it>you??</it></bf></DD>

<sect1>Request for input
<p>

Some of the functionalities are not covered in this How-To simply because
I have insufficient knowledge on them, therefore <bf><it>please contribute!!</it></bf>
At least the following parts are not covered:


<itemize>
<item>actived</item>

<item>overview usage</item>

<item>cyclical buffer and hashed spool formats</item>

<item>other?</item>
</itemize>

<sect1>
<HR WIDTH="100&percnt;">
<p>

<tabular ca="l">


<sect><label id="TOC">Table of Contents
<p>
<colsep>
</TR>
</tabular>

<enum>
<item><bf><htmlurl url="System Architecture" name="SYSTEM ARCHITECTURE"></bf></item>

<itemize>
<item><htmlurl url="Arch. Overview" name="Overview"></item>

<item><htmlurl url="centralized architecture" name="Centralized System Architecture"></item>

<item><htmlurl url="distributed architecture" name="Distributed System Architecture"></item>

<itemize>
<item><htmlurl url="Overal Arch.: Servers" name="Server Level"></item>

<item><htmlurl url="Overal Arch.: Processes" name="Process Level"></item>

<item><htmlurl url="Architectural Details" name="Architectural Details"></item>

<itemize>
<item><htmlurl url="Arch. Details: Readers" name="Readers"></item>

<item><htmlurl url="Arch. Details: Feeder" name="Feeder"></item>
</itemize>
</itemize>
</itemize>

<item><bf><htmlurl url="Implementation" name="IMPLEMENTATION GUIDE"></bf></item>

<itemize>
<item><htmlurl url="impl. centralized" name="Centralized System"> </item>

<item><htmlurl url="impl. distributed" name="Distributed System"> </item>

<itemize>
<item><htmlurl url="impl. reader" name="Readers"> </item>

<item><htmlurl url="impl. feeders" name="Feeder"> </item>
</itemize>
</itemize>
</enum>

<sect>List of Figures
<p>

<tabular ca="">

<TH>title</TH>

<TH>Xfig source</TH>

<TH>PostScript</TH>
</TR>


<htmlurl url="inn-open-source.pictures.html&num;single node INN" name=" target="&lowbar;help">Overal">
architecture of a centralized system <colsep>

<htmlurl url="single&lowbar;node&lowbar;inn.fig" name="single&lowbar;node&lowbar;inn.fig"> <colsep>

<htmlurl url="single&lowbar;node&lowbar;inn.ps" name="single&lowbar;node&lowbar;inn.ps"> <colsep>
</TR>


<htmlurl url="inn-open-source.pictures.html&num;server level architecture" name=" target="&lowbar;help">Overal">
architecture of a distributed system: server level<colsep>

<htmlurl url="servers&lowbar;inn&lowbar;arch.fig" name="servers&lowbar;inn&lowbar;arch.fig"> <colsep>

<htmlurl url="servers&lowbar;inn&lowbar;arch.ps" name="servers&lowbar;inn&lowbar;arch.ps"> <colsep>
</TR>


<htmlurl url="inn-open-source.pictures.html&num;process level architecture" name=" target="&lowbar;help">Overal">
architecture of a distributed system: process level<colsep>

<htmlurl url="procs&lowbar;inn&lowbar;arch.fig" name="procs&lowbar;inn&lowbar;arch.fig"> <colsep>

<htmlurl url="procs&lowbar;inn&lowbar;arch.ps" name="procs&lowbar;inn&lowbar;arch.ps"> <colsep>
</TR>


<htmlurl url="inn-open-source.pictures.html&num;reader architecture" name=" target="&lowbar;help">Distributed">
system: INN reader architecture<colsep>

<htmlurl url="nnrpd&lowbar;arch.fig" name="nnrpd&lowbar;arch.fig"> <colsep>

<htmlurl url="nnrpd&lowbar;arch.ps" name="nnrpd&lowbar;arch.ps"> <colsep>
</TR>


<htmlurl url="inn-open-source.pictures.html&num;feeder architecture" name=" target="&lowbar;help">Distributed">
system: INN feeder architecture<colsep>

<htmlurl url="inn&lowbar;arch.fig" name="inn&lowbar;arch.fig"> <colsep>

<htmlurl url="inn&lowbar;arch.ps" name="inn&lowbar;arch.ps"> <colsep>
</TR>
</tabular>

<sect1>
<HR WIDTH="100&percnt;">
<p>

<tabular ca="ll">


<sect><label id="System Architecture">System Architecture
<p>
<colsep>

<it><htmlurl url="&num;TOC" name="Table">
of</it> 
<it><htmlurl url="TOC" name="Contents"></it><colsep>
</TR>
</tabular>

<sect1><label id="Arch. Overview">Overview

<HR SIZE=1 NOSHADE WIDTH="100&percnt;">
<p>

INN is a package of various programs and scripts meant for different
purposes, and different system and server configuration may require different
programs. This section describes several most commonly used configurations,
as far as I got input on those that I don't run myself.


For now, the section contains two configurations:
centralized and distributed with separate multiple readers and a single
feeder. Input about other configurations is welcome.


In a <bf>centralized system</bf>, one machine runs a set of programs that
handle incoming feed, outgoing feed and user connections for reading and
posting. A stand-alone configuration is also possible when the server is
used for internal purposes only and no incoming or outgoing feed is needed.


In a <bf>distributed system</bf> not every machine runs the same programs.
INN, being a package of multiple programs working together, offers many
mix-and-match possibilities. 


<sect1><label id="centralized architecture">Centralized
System Architecture 
<HR SIZE=1 NOSHADE WIDTH="100&percnt;">
<p>

<htmlurl url="inn-open-source.pictures.html&num;single node INN" name=" target="&lowbar;help">Figure">
1 depicts overal architecture of a centralized system. This section
is meant to shed some light on the interaction of the processes on the
system, it does not explain how to get those processes to behave this way.
See section <htmlurl url="Implementation" name="Implementation Guide"> for further
details.


<tabular ca="ll">

The system runs an innd daemon which handles incoming feeds,
manages the active and history files, as well as the
article spool, and listens on port 119 and accepts user connections. For
each accepted connection it spawns a child nnrpd process which
handles further interaction with the user. <colsep>


</tag>innd</DD>

</tag>nnrpd</DD>

</tag>inn.conf</DD>

</tag>nnrp.access</DD>
<colsep>
</TR>


Each nnrpd process reads the active and history
files to find article information, fetches requested articles from the
spool and sends them to the user. It also accepts user postings. <colsep>


</tag>active</DD>

</tag>history</DD>
<colsep>
</TR>


User postings are first pulled through a filter, filter&lowbar;nnrpd,
which is a Perl script. It is loaded when nnrpd starts up for
subsequent use. The filter may reject certain postings, in which case the
user gets an error back (<htmlurl url="nnrpd&lowbar;filter&lowbar;note" name="see note">). If
a postings passes through the filter, nnrpd passes it on to innd.
<bf>nnrpd does not attempt to store user postings in the spool.</bf>

<itemize>
<label id="nnrpd&lowbar;filter&lowbar;note"><bf><it>Note:</it></bf> I
am currently evaluating a patch to nnrpd which will allow to reject
certain postings without returning an error message to the users.

</itemize>
<colsep>

<colsep>
</TR>


<htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">innd
is configured to accept incoming feed from several external peers. All
the incoming articles are first pulled through a filter which is loaded
at startup. One of the popular filter scripts is cleanfeed. Contributions
about other filters are welcome!&nbsp;The filter drops rejected
articles silently. It does however log relevant information. <colsep>


</tag>incoming.conf</DD>

</tag>news</DD>

</tag>news.log</DD>

</tag>cleanfeed</DD>

</tag>control.ctl</DD>
<colsep>
</TR>


When an article makes it through cleanfeed, innd
registers it in the active and history file and stores
it in the article spool. If configured, innd also sends the article
to the corresponding external peer, either via a channel or via a batch.
<colsep>


</tag>newsfeeds</DD>

</tag>moderators</DD>
<colsep>
</TR>


For peers that receive low volume feed, <htmlurl url="legend change" name="<figure>
<eps file="yellow">
</figure>">a
news administrator can choose to use <figure>
<eps file="pink">
</figure>the
batch method. It therefore spools relevant articles to batch files (one
per peer) for further processing. nntpsend is called on a regular
basis from cron which examins the batch files and spawns one innxmit
process per peer, according to peer configuration. innxmit establishes
connection with the peer, transfers the articles and closes the connection
when done. Note that <bf>when a peer goes down ungracefully (without closing
connection), innxmit hangs.</bf> It is possible to install a script
on the feeder which checks for peers and kills hanging innxmit
processes if necessary. 
<htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">It
is also possible to use innfeed (see below) for low volume feed.
Contributions about performance comparisons are wanted!!

<colsep>


</tag>nntpsend</DD>

</tag>nntpsend.ctl</DD>

</tag>passwd.nntp</DD>

</tag>innxmit</DD>

</tag>cron</DD>
<colsep>
</TR>


For peers that receive high volume feed, as well as for peers that
receive identical feed, <htmlurl url="legend change" name="<figure>
<eps file="yellow">
</figure>">a
news administrator can choose to use <figure>
<eps file="pink">
</figure>the
channel method. It spawns innfeed at startup and opens a channel
to it. Every time innd finds an article to be fed to the peers,
it sends it to the innfeed channel. innfeed is configured
to feed multiple peers with the same articles from the channel. It manages
connections to the peers and writes backlogs in case a peer is unavailable
or too slow. innfeed writes one backlog file per peer. The backlog
is truncated to a specified length in order to prevent disk space overflow.
When this happens, the peer is said to miss articles. innxmit
does not process backlogs; a separate program (e.g. innxmit) should
be called to do that afterwards. <colsep>


</tag>innfeed</DD>

</tag>innfeed.conf</DD>
<colsep>
</TR>


news.daily is run daily for article expiration, log file rotation
and reporting purposes. For article expiration news.daily spawns
expire which processes the history database purging entries
for articles to be expired. It produces a list of articles to be removed
from the spool, and renumbers the active file to reflect changes.
expire calls fastrm to actually remove the articles on
the expire list from the spool. <colsep>


</tag>news.daily</DD>

</tag>expire</DD>

</tag>expire.ctl</DD>

</tag>fastrm</DD>
<colsep>
</TR>


For log rotation and reporting purposes, news.daily calls
scanlogs, which analogous to the one on the readers, rotates the
log files and calls innreport to process them, create a report
and mail it to the news administrator. <colsep>


</tag>scanlogs</DD>

</tag>innreport</DD>
<colsep>
</TR>


There is a separate program that maintains innd, called ctlinnd,
and another special program that watches over innd, called innwatch.
News group maintenance is also done with ctlinnd. See <htmlurl url="&num;impl. feeders" name="Implementation">
Guide for further details.<colsep>


</tag>control.ctl</DD>

</tag>ctlinnd</DD>

</tag>innwatch</DD>

</tag>innwatch.ctl</DD>
<colsep>
</TR>
</tabular>

<sect1><label id="distributed architecture">Distributed
System Architecture 
<HR SIZE=1 NOSHADE WIDTH="100&percnt;">
<p>

<sect2><label id="Overal Arch.: Servers">Server Level
<p>

<htmlurl url="inn-open-source.pictures.html&num;server level architecture" name=" target="&lowbar;help">Figure">
2 depicts overal architecture on server level. Functions of the readers
are all identical, so there may be as many of them as necessary to cope
with the load, which provides for horisontal scaling. 


The <it>readers </it>accept user connections, read articles from the spool
and deliver them to the users, and accept user postings and forward them
to the feeder. <bf>The readers do not write <figure>
<eps file="yellow">
</figure>either
to the spool or to the database files (in &tilde;news/db).</bf> <figure>
<eps file="pink">
</figure>


The <it>feeder </it>accepts incoming feeds from external peers and user
postings from the readers and writes them to the spool and sends them out
to the internet to the external peers. Note that <bf>the feeder replicates
external newsfeed</bf>. 


The <it>newsstore </it>is merely a filer which hosts shared data. 


Because of this functional split, the readers and the feeder are called
the <it>frontend</it>, and the newsstore is called the <it>backend.</it> 


<sect2><label id="Overal Arch.: Processes">Process
level
<p>

<htmlurl url="inn-open-source.pictures.html&num;process level architecture" name=" target="&lowbar;help">Figure">
3 depicts overal architecture on process level. The figure shows only
one reader because all the readers have identical architecture. 


The <it>readers</it> run nnrpd which handles user connections
and spawns one process per user. It reads article information from the
active and history files and the articles from the spool,
and delivers them to the users. It accepts user postings and stores them
in a batch. rnews is run periodically, it reads user postings
from the batch and sends them to the feeder for propagation. <bf>The readers
do not store user postings in the spool, <figure>
<eps file="yellow">
</figure>as
they don't register them in the database.</bf> <figure>
<eps file="pink">
</figure>


The <it>feeder</it> runs innd which handles newsfeeds. It accepts
incoming newsfeeds from external peers and user postings from the readers,
stores them in the spool and updates the active and history
files accordingly. It also propagates newsfeed to external peers and sends
out user postings. The feeder runs expire daily to purge old articles
from the spool. 


All frontend machines also run innreport daily which scans
the log files and creates a daily report which is then mailed to the news
administrator. 


<sect1><label id="Architectural Details">Architectural
Details
<p>

This section is meant to shed some light on the interaction of the processes
on the reader and feeder systems, it does not explain how to get those
processes to behave this way. See section <htmlurl url="&num;Implementation" name="Implementation">
Guide for further details.


<itemize>
<sect3><label id="Arch. Details: Readers">Readers
<p>
</itemize>

<tabular ca="l">

<htmlurl url="inn-open-source.pictures.html&num;reader architecture" name=" target="&lowbar;help">Figure">
4 depicts INN architecture on a reader. <colsep>

<TH NOWRAP></TH>
</TR>


The system runs an nnrpd daemon (started up with the -D
switch), which listens on port 119 and accepts user connections. For each
accepted connection it spawns a child nnrpd process which handles
further interaction with the user. <colsep>


</tag>nnrpd</DD>

</tag>inn.conf</DD>

</tag>nnrp.access</DD>

</tag>moderators</DD>
<colsep>
</TR>


<figure>
<eps file="yellow">
</figure>Alternatively, nnrpd
could be started by inetd from /etc/inetd.conf and /etc/services
by specifying it for port 119. This ensures that the mother daemon will
never die since there's no mother daemon in this case. However, if inetd
dies, you're still in trouble. 
This approach is equivalent to running a mother daemon nnrpd -D
because the program simply forks a new process for each incoming user.<figure>
<eps file="pink">
</figure>

<colsep>


</tag>inetd</DD>

</tag>/etc/inetd.conf</DD>

</tag>/etc/services</DD>
<colsep>
</TR>


Each nnrpd process reads the active and history
files to find article information, fetches requested articles from the
spool and sends them to the user. It also accepts user postings. <colsep>


</tag>active</DD>

</tag>history</DD>
<colsep>
</TR>


User postings are first pulled through a filter, filter&lowbar;nnrpd,
which is a Perl script. It is loaded when nnrpd starts up for
subsequent use. The filter may reject certain postings, in which case the
user gets an error back ( <htmlurl url="nnrpd&lowbar;filter&lowbar;note" name="see note"> ).

<itemize>
<label id="nnrpd&lowbar;filter&lowbar;note"><bf><it>Note:</it></bf> I
am currently evaluating a patch to nnrpd which will allow to reject
certain postings without returning an error message to the users.

</itemize>

<figure>
<eps file="yellow">
</figure>If a posting passes through
the filter, there are two configurations possible: either nnrpd
immediately connects to the feeder and forwards the posting, or nnrpd
stores it in a batch to be sent to the feeder. In either case however <bf>nnrpd
does not attempt to store user postings in the spool.</bf>


The first option has the following properties:


<itemize>
<item>postings get sent out immediately without any delay</item>

<item>users get notified if the postings get rejected by the feeder for some
reason (<htmlurl url="note spam notification" name="see note">)</item>

<label id="note spam notification"><bf>Note:</bf> you
may not always want to notify your users that their spam has been dropped
as it would present a perfect way to find a work-around for your anti-spam
filter.


<item>nnrpd does not return until the article is transferred to
the feeder, or an error returned, which means that it will generally take
longer for the user compared with the second option</item>

<item>users cannot post when the feeder is down or busy expiring or renumbering,
or if it is throttled or overloaded</item>
</itemize>

The second option has the following properties:


<itemize>
<item>postings get spooled into a queue and get sent to the feeder as frequently
as rnews is configured to do it (see below)</item>

<item>users get notified if the postings get rejected by nnrpd but
do not get notified if they get rejected by the feeder (<htmlurl url="&num;note spam notification" name="see">
note)</item>

<item>nnrpd returns as soon as the article gets spooled, which is
very quickly</item>

<item>unavailability of the feeder does not impair the users' ability to
post</item>
</itemize>
<colsep>

<colsep>
</TR>


When the second option is used, <figure>
<eps file="pink">
</figure>rnews
is run on a regular basis from cron to send user postings to the
feeder. It processes the batch created by nnrpd and attempts to
make a connection to the feeder. If the feeder is temporarily down or does
not accept connections for some other reason, rnews leaves the
articles in the batch. Next time it is started, it will try again. <colsep>


</tag>rnews</DD>

</tag>cron</DD>
<colsep>
</TR>


For log file rotation and reporting purposes, news.daily is
run daily. <bf>news.daily on the readers does not run expire.</bf>
It spawns scanlogs which rotates the logs and calls innreport
which analyses them, creates a report and mails it to the news administrator.
<colsep>


</tag>news.daily</DD>

</tag>scanlogs</DD>

</tag>innreport</DD>

</tag>innreport.conf</DD>
<colsep>
</TR>
</tabular>

<itemize>
<sect3><label id="Arch. Details: Feeder">Feeder
<p>
</itemize>

<tabular ca="ll">

<htmlurl url="inn-open-source.pictures.html&num;feeder architecture" name=" target="&lowbar;help">Figure">
5 depicts INN architecture on the feeder. <colsep>

<colsep>
</TR>


The system runs innd daemon which handles incoming feeds and
manages the active and history files, as well as the
article spool. <colsep>


</tag>innd</DD>

</tag>active</DD>

</tag>history</DD>
<colsep>
</TR>


<htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">innd
is configured to accept incoming feed from several external peers and from
the readers. Note that <bf>the feeder does not see any difference between
external feed and user postings from the readers.</bf> All the incoming
articles are first pulled through a filter which is loaded at startup.
One of the popular filter scripts is cleanfeed. Contributions
about other filters are welcome!&nbsp;The filter drops rejected
articles silently, as there is no user to issue the error to. It does however
log relevant information. <colsep>


</tag>incoming.conf</DD>

</tag>news</DD>

</tag>news.log</DD>

</tag>cleanfeed</DD>

</tag>control.ctl</DD>
<colsep>
</TR>


When an article makes it through cleanfeed, innd
registers it in the active and history file and stores
it in the article spool. If configured, innd also sends the article
to the corresponding external peer, either via a channel or via a batch.
<colsep>


</tag>newsfeeds</DD>

</tag>moderators</DD>
<colsep>
</TR>


For peers that receive low volume feed, innd uses the batch
method. It therefore spools relevant articles to batch files (one per peer)
for further processing. nntpsend is called on a regular basis
from cron which examins the batch files and spawns one innxmit
process per peer, according to peer configuration. innxmit establishes
connection with the peer, transfers the articles and closes the connection
when done. Note that <bf>when a peer goes down ungracefully (without closing
connection), innxmit hangs.</bf> It is possible to install a script
on the feeder which checks for peers and kills hanging innxmit
processes if necessary. <colsep>


</tag>nntpsend</DD>

</tag>nntpsend.ctl</DD>

</tag>passwd.nntp</DD>

</tag>innxmit</DD>

</tag>cron</DD>
<colsep>
</TR>


For peers that receive high volume feed, as well as for peers that
receive identical feed, innd uses the channel method. It spawns
innfeed at startup and opens a channel to it. Every time innd
finds an article to be fed to the peers, it sends it to the innfeed
channel. innfeed is configured to feed multiple peers with the
same articles from the channel. It manages connections to the peers and
writes backlogs in case a peer is unavailable or too slow. innfeed
writes one backlog file per peer. The backlog is truncated to a specified
length in order to prevent disk space overflow. When this happens, the
peer is said to miss articles. innxmit does not process backlogs;
a separate program (e.g. innxmit) should be called to do that
afterwards. <colsep>


</tag>innfeed</DD>

</tag>innfeed.conf</DD>
<colsep>
</TR>


news.daily is run daily for article expiration, log file rotation
and reporting purposes. For article expiration news.daily spawns
expire which processes the history database purging entries
for articles to be expired. It produces a list of articles to be removed
from the spool, and renumbers the active file to reflect changes.
expire calls fastrm to actually remove the articles on
the expire list from the spool. <colsep>


</tag>news.daily</DD>

</tag>expire</DD>

</tag>expire.ctl</DD>

</tag>fastrm</DD>
<colsep>
</TR>


For log rotation and reporting purposes, news.daily calls
scanlogs, which analogous to the one on the readers, rotates the
log files and calls innreport to process them, create a report
and mail it to the news administrator. <colsep>


</tag>scanlogs</DD>

</tag>innreport</DD>
<colsep>
</TR>


There is a separate program that maintains innd, called ctlinnd,
and another special program that watches over innd, called innwatch.
News group maintenance is also done with ctlinnd. See <htmlurl url="&num;impl. feeders" name="Implementation">
Guide for further details.<colsep>


</tag>control.ctl</DD>

</tag>ctlinnd</DD>

</tag>innwatch</DD>

</tag>innwatch.ctl</DD>
<colsep>
</TR>
</tabular>

<sect1>
<HR WIDTH="100&percnt;">
<p>

<tabular ca="ll">


<sect><label id="Implementation">Implementation Guide
<p>
<colsep>

<it><htmlurl url="&num;TOC" name="Table">
of</it> 
<it><htmlurl url="TOC" name="Contents"></it><colsep>
</TR>
</tabular>

<sect1><label id="impl. centralized">Centralized System

<HR SIZE=1 NOSHADE WIDTH="100&percnt;">
<p>

<htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">Input
welcome!!


<sect1><label id="impl. distributed">Distributed System

<HR SIZE=1 NOSHADE WIDTH="100&percnt;">
<p>

There are a couple of things to pay attention to when configuring machines
in a distributed system. This section describes those specific things.
Note that I only describe <it>deviations</it> from the norm because explanations
for standard values can be found in the manuals. However, the meaning and
use of the various configuration files is outlined here. 


<sect2><label id="impl. reader">Readers
<p>

<tabular ca="ll">


<tag><bf>nnrpd configuration:</bf></DT>

</tag>nnrpd is configured in inn.conf. This file contains
configuration parameters for innd as well which are ignored on
the readers. </DD>

</tag>&nbsp;</DD>

<tag><figure>
<eps file="yellow">
</figure><bf>Having nnrpd send
postings to the feeder:</bf></DT>

</tag>To make nnrpd connect to the feeder for every posting, set
spoolfirst to false and nnrpdposthost to the feeder.<figure>
<eps file="pink">
</figure></DD>

</tag>&nbsp;</DD>

<tag><bf>Having nnrpd write postings to a queue:</bf></DT>

</tag>To make sure that nnrpd stores user postings in a batch in
queue/incoming directory, set spoolfirst to true <figure>
<eps file="yellow">
</figure>and
nnrpdposthost to the feeder.<figure>
<eps file="pink">
</figure></DD>

</tag>&nbsp;</DD>

<tag><bf>Running rnews:</bf></DT>

</tag>rnews should be run frequently enough to make sure your users
don't complain. The postings will only appear on the news server (and will
only be sent out to the Internet) when they are transmitted to the feeder.
A sensible value is every 5 minutes.</DD>

</tag>The following parameters are usually used: rnews -v -U.</DD>
<colsep>


</tag>nnrpd</DD>

</tag>inn.conf</DD>

</tag>rnews</DD>

</tag>cron</DD>

</tag>crontab</DD>
<colsep>
</TR>



<tag><bf>User access rights and closed groups:</bf></DT>

</tag>User access rights are configured in nnrp.access. Closed groups
are also set up here. All standard stuff.</DD>

<htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">Although
it is all standard stuff, a good description of how to set up a closed
group without turning on authentication for all the public groups as well,
is wanted. <bf><it>Please contribute!</it></bf>

<colsep>


</tag>nnrp.access</DD>
<colsep>
</TR>



<tag><bf>Moderated groups:</bf></DT>

</tag>Moderated groups are marked as m in the active file.
Moderator addresses are listed in the moderators file. nnrpd
consults this file when an article is posted to a moderated group.</DD>

</tag>See feeder section on how to set up a moderated group in the active
file.</DD>
<colsep>


</tag>moderators</DD>

</tag>active</DD>
<colsep>
</TR>



<tag><bf>Rotating logs and creating reports:</bf></DT>

</tag>Use news.daily to do it. Note that you need to <bf>explicitely
turn off expire and renumber<it> </it></bf>of the active file. Use
the following parameters:</DD>

<itemize>
</tag>news.daily noexpire norenumber</DD>
</itemize>

</tag>news.daily calls scanlogs which in turn calls innreport.
The latter is configured in innreport.conf.</DD>
<colsep>


</tag>news.daily</DD>

</tag>scanlogs</DD>

</tag>innreport</DD>

</tag>innreport.conf</DD>
<colsep>
</TR>
</tabular>

<sect2><label id="impl. feeders">Feeder
<p>

<tabular ca="ll">


<tag><bf>innd configuration:</bf></DT>

</tag>innd is configured in inn.conf. Configuration here
is quite standard.</DD>
<colsep>


</tag>innd</DD>

</tag>inn.conf</DD>
<colsep>
</TR>



<tag><bf>Allowing readers to post <figure>
<eps file="yellow">
</figure>in
batch mode<figure>
<eps file="pink">
</figure>:</bf></DT>

</tag>I found it necessary to give the readers access to the feeder in the
feeder's nnrp.access file. Otherwise rnews from the readers
cannot connect.</DD>

</tag>&nbsp;</DD>

<tag><figure>
<eps file="yellow">
</figure><bf>Allowing readers to post
directly:</bf></DT>

</tag>In this case it is necessary to add the readers to incoming.conf
rather than to nnrp.access file.<figure>
<eps file="pink">
</figure></DD>
<colsep>


</tag>nnrp.access</DD>
<colsep>
</TR>



<tag><bf>Setting up incoming feed:</bf></DT>

</tag>Incoming feeds are handled by innd and are configured in incoming.conf.
Pay attention to the peer <it>ME</it> which is your own news server. If this
peer is not configured properly, the articles will not appear in your spool.</DD>

</tag>The peer <it>ME</it> must also be configured in newsfeeds for
the same reasons as above. </DD>
<colsep>


</tag>innd</DD>

</tag>incoming.conf</DD>

</tag>newsfeeds</DD>
<colsep>
</TR>



<tag><bf>Setting up outgoing feed:</bf></DT>

</tag>Outgoing feeds are configured in newsfeeds which determines
the method to be used to transfer the articles to the peer.</DD>

</tag>For low-volume feeds batched method may be used with the transfer handled
by nntpsend (which calls innxmit for each peer). nntpsend
is configured in nntpsend.ctl and passwd.nntp. </DD>

</tag>For high-volume feeds channel method may be used with the transfer
handled by innfeed, one instance of the program serving all the
peers. It is configured in innfeed.conf.</DD>
<colsep>


</tag>newsfeeds</DD>

</tag>nntpsend.ctl</DD>

</tag>passwd.nntp</DD>

</tag>innfeed</DD>

</tag>innfeed.conf</DD>
<colsep>
</TR>



<tag><bf>Setting up anti-spam filters:</bf></DT>

</tag>The feeder may run an anti-spam filter that checks every incoming article
and drops ''bad'' ones. If it is a Perl script, it should be copied
to the bin/filter/filter&lowbar;innd.pl, if it is a Tcl/Tk script, it
goes to bin/filter/filter&lowbar;innd.tcl.</DD>

</tag><htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">One
of the popular filters is cleanfeed which is configured in cleanfeed.conf.
</DD>

</tag>Input about other filters is welcome!</DD>
<colsep>


</tag>cleanfeed</DD>
<colsep>
</TR>



<tag><bf>News groups maintenance:</bf></DT>

</tag>News groups are maintained (added, removed or changed attributes) with
ctlinnd as well as automatically by innd.</DD>

</tag>Automatic news group maintenance is controlled by control.ctl
which defines how specific types of control articles are processed. </DD>
<colsep>


</tag>ctlinnd</DD>

</tag>control.ctl</DD>
<colsep>
</TR>



<tag><bf>Timely updates of active and history:</bf></DT>

</tag>So that the readers would be able to access all the articles in the
spool for all actions (including cancelling when they need to retrieve
the article by message ID), active and history* files
need to be updated frequently enough. If MMAP is used, then MMAP&lowbar;SYNC must
also be used with a sufficiently short interval.</DD>
<colsep>


</tag>active</DD>

</tag>history</DD>
<colsep>
</TR>



<tag><bf>Watching over innd:</bf></DT>

</tag>innwatch watches over innd and can be configure to
do a wide range of things in the configuration file innwatch.ctl.</DD>
<colsep>


</tag>innwatch</DD>

</tag>innwatch.ctl</DD>
<colsep>
</TR>



<tag><bf>Running expire and rotating logs:</bf></DT>

</tag>Both these actions are performed by news.daily which calls
expire and fastrm for expiration, ctlinnd renumber
for active file renumbering, and scanlogs that calls
innreport for log file rotation and reporting.</DD>

</tag>news.daily is run from cron on a daily basis. To
make sure that expire does not take for ever, the following parameters
are given:</DD>

<itemize>
</tag>news.daily delayrm</DD>
</itemize>

</tag><htmlurl url="mailto:E.Samsonova@wxs.nl" name="<figure>
<eps file="pig">
</figure>">Expiration
policies depend on the storage method(s) used. For the traditional spool
they are defined in expire.ctl. Please contribute
for the other storage methods!</DD>

</tag>Reporting is defined in innreport.conf that is used by innreport.</DD>
<colsep>


</tag>news.daily</DD>

</tag>expire</DD>

</tag>fastrm</DD>

</tag>expire.ctl</DD>

</tag>scanlogs</DD>

</tag>innreport</DD>

</tag>innreport.conf</DD>
<colsep>
</TR>
</tabular>



</article>