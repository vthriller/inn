.\" Automatically generated by Pod::Man version 1.14
.\" Fri Mar  2 14:46:16 2001
.\"
.\" Standard preamble:
.\" ======================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R

.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used
.\" to do unbreakable dashes and therefore won't be available.  \*(C` and
.\" \*(C' expand to `' in nroff, nothing in troff, for use with C<>
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr
.\" for titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and
.\" index entries marked with X<> in POD.  Of course, you'll have to process
.\" the output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it
.\" makes way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.bd B 3
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ======================================================================
.\"
.IX Title "readers.conf 5"
.TH readers.conf 5 "INN 2.4.0" "2001-03-02" "InterNetNews Documentation"
.UC
.SH "NAME"
readers.conf \- Access control and configuration for nnrpd
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIreaders.conf\fR in \fIpathetc\fR specifies access control for \fInnrpd\fR\|(8).  It
controls who is allowed to connect as a news reader and what they're
allowed to do after they connect.  nnrpd reads this file when it starts
up.
.PP
There are two types of entries in \fIreaders.conf\fR:  parameter/value pairs
and configuration groups.  Blank lines and anything after a number sign
(\f(CW\*(C`#\*(C'\fR) are ignored, unless the character \f(CW\*(C`#\*(C'\fR is escaped with \f(CW\*(C`\e\*(C'\fR.  The
maximum number of characters on each line is 8,191.
.PP
Parameter/value pairs consist of a keyword immediately followed by a
colon, at least one whitespace character, and a value.  The case of the
parameter is significant (parameter should generally be in all lowercase),
and a parameter may contain any characters except colon, \f(CW\*(C`#\*(C'\fR, and
whitespace.  An example:
.PP
.Vb 1
\&    hosts: *.example.com
.Ve
Values that contain whitespace should be quoted with double quotes, as in:
.PP
.Vb 1
\&    hosts: "*.example.com, *.example.net"
.Ve
If the parameter does not contain whitespace, such as:
.PP
.Vb 1
\&    hosts: *.example.com,*.example.net
.Ve
it's not necessary to quote it, although you may wish to anyway for
clarity.
.PP
There is no way to continue a line on the next line, and therefore no way
to have a single paramenter with a value longer than about 8,180
characters.
.PP
Many parameters take a boolean value.  For all such parameters, the value
may be specified as \f(CW\*(C`true\*(C'\fR, \f(CW\*(C`yes\*(C'\fR, or \f(CW\*(C`on\*(C'\fR to turn it on and may be any
of \f(CW\*(C`false\*(C'\fR, \f(CW\*(C`no\*(C'\fR, or \f(CW\*(C`off\*(C'\fR to turn it off.  The case of these values is
not significant.
.PP
There are two basic types of configuration groups, auth and access.  The
auth group provides mechanisms to establish the identity of the user, who
they are.  The access group determines, given the user's identity, what
they're permitted to do.  Writing a \fIreaders.conf\fR file for your setup is
a two-step process, first assigning an identity to each incoming
connection using auth groups, and then giving each identity appropriate
privileges with access group.
.PP
A user identity, as established by an auth group, looks like an e-mail
address; in other words, it's in the form \*(L"<username>@<domain>\*(R" (or
sometimes just \*(L"<username>\*(R" if no domain is specified.
.PP
An auth group definition looks like:
.PP
.Vb 8
\&    auth <name> {
\&        hosts: <host-wildmat>
\&        auth: <auth-program>
\&        res: <res-program>
\&        default: <defuser>
\&        default-domain: <defdomain>
\&        # ...possibly other settings
\&    }
.Ve
The <name> is used as a label for the group and is only for documentation
purposes.
.PP
A given auth group applies only to hosts whose name or \s-1IP\s0 address matches
the wildmat expression given with the hosts: parameter (comma-separated
wildmat expressions allowed, but \f(CW\*(C`@\*(C'\fR is not supported).  Rather than
wildmat expressions, you may also use \s-1CIDR\s0 notation to match any \s-1IP\s0
address in a netblock; for example, \*(L"10.10.10.0/24\*(R" will match any \s-1IP\s0
address between 10.10.10.0 and 10.10.10.255 inclusive.
.PP
If compiled against the \s-1SSL\s0 libraries, an auth group with the ssl_required:
parameter set to true only applies if the incoming connection is using \s-1SSL\s0.
.PP
For any connection from a host that matches that wildmat expression or
netblock, <res-program> (the program given with the res: parameter, if
present) is run to determine the identity of the user just from the
connection information.  If it fails, or if the res: parameter isn't
present, the user is assigned an identity of \*(L"<defuser>@<defdomain>\*(R"; in
other words, the values of the default: and default-domain: parameters are
used.  If <res-program> only returns a username, <defdomain> is used as
the domain.
.PP
If the user later authenticates via the \s-1AUTHINFO\s0 \s-1USER/PASS\s0 commands, the
provided username and password is passed to <auth-program>, the value of
the auth: parameter (if present).  If this succeeds and returns a
different identity than the one assigned at the time of the connection, it
is matched against the available access groups again and the actions the
user is authorized to do may change.
.PP
When matching auth groups, the last auth group in the file that matches a
given connection or username/password combination is used.
.PP
An access group definition usually looks like:
.PP
.Vb 5
\&    access <name> {
\&        users: <identity-wildmat>
\&        newsgroups: <group-wildmat>
\&        # ...possibly other settings
\&    }
.Ve
Again, <name> is just for documentation purposes.  This says that all
users whose identity matches <identity-wildmat> can read and post to all
newsgroups matching <group-wildmat> (as before, comma-separated wildmat
expressions are allowed, but \f(CW\*(C`@\*(C'\fR is not supported).  Alternately, you can
use the form:
.PP
.Vb 5
\&    access <name> {
\&        users: <identity-wildmat>
\&        read: <read-wildmat>
\&        post: <post-wildmat>
\&    }
.Ve
and matching users will be able to read any group that matches
<read-wildmat> and post to any group that matches <post-wildmat>.  You can
also set several other things in the access group as well as override
various \fIinn.conf\fR\|(5) parameters for just that group of users.
.PP
Just like with auth groups, when matching access groups the last matching
one in the file is used to determine the user's permissions.
.PP
There is one additional special case to be aware of.  First, when forming
particularly complex authentication and authorization rules, it is
sometimes useful for the identities provided by a given auth group to only
apply to particular access groups; in other words, rather than checking
the identity against the users: parameter of every access group, it's
checked against the users: parameter of only some specific access groups.
This is done with the key: parameter.  For example:
.PP
.Vb 5
\&    auth example {
\&        key: special
\&        hosts: *.example.com
\&        default: <SPECIAL>
\&    }
.Ve
.Vb 5
\&    access example {
\&        key: special
\&        users: <SPECIAL>
\&        newsgroups: *
\&    }
.Ve
In this case, the two key: parameters bind this auth group with this
access group.  For any incoming connection matching \*(L"*.example.com\*(R"
(assuming there isn't any later auth group that also matches such hosts),
no access group that doesn't have \*(L"key: special\*(R" will even be checked.
Similarly, the above access group will only be checked if the user was
authenticated with an auth group containing \*(L"key: special\*(R".  This
mechanism normally isn't useful.
.PP
Also note in the above that there's no default-domain: parameter, which
means that no domain is appended to the default username and the identity
for such connections is just \*(L"<\s-1SPECIAL\s0>\*(R".  Note that some additional
add-ons to \s-1INN\s0 may prefer that authenticated identities always return a
full e-mail address (including a domain), so you may want to set up your
system that way.
.PP
Below is the full list of allowable parameters for auth groups and access
groups, and after that are some examples that may make this somewhat
clearer.
.SH "AUTH GROUP PARAMETERS"
.IX Header "AUTH GROUP PARAMETERS"
.Ip "\fBhosts:\fR" 4
.IX Item "hosts:"
A comma-separated list of remote hosts, wildmat patterns matching either
hostnames or \s-1IP\s0 addresses, or \s-1IP\s0 netblocks specified in \s-1CIDR\s0 notation.  If
a user connects from a host that doesn't match this parameter, this auth
group will not match the connection and is ignored.
.Sp
Note that if you have a large number of patterns that can't be merged into
broader patterns (such as a large number of individual systems scattered
around the net that should have access), the hosts: parameter may exceed
the maximum line length of 8,192 characters.  In that case, you'll need to
break that auth group into multiple auth groups, each with a portion of
the hosts listed in its hosts: parameter, and each assigning the same user
identity.
.Sp
All hosts match, if this parameter does not exist.
.Ip "\fBlocaladdress:\fR" 4
.IX Item "localaddress:"
A comma-separated list of local hosts.  All usage of this parameter follows
\&\fBhosts:\fR.  This parameter can be useful when the server has multiple \s-1IP\s0
addresses.  All local addresses match, if not specified.
.Ip "\fBres:\fR" 4
.IX Item "res:"
A command line for a user resolver.  The program executed must be located
in \fIpathbin\fR/auth/resolv.  A resolver is an authentication program which
attempts to figure out the identity of the connecting user using nothing
but the connection information (in other words, a username and password
aren't used).  An examples of a resolver would be a program that gets the
username from an ident callback or from the user's hostname.
.Sp
One auth group can have multiple res: parameters, and they will be tried
in the order they're listed in and the results of the first successful one
will be used.
.Ip "\fBauth:\fR" 4
.IX Item "auth:"
A command line for a user authenticator.  The program executed must be
located in \fIpathbin\fR/auth/passwd.  An authenticator is a program used to
handle a user-supplied username and password, via a mechanism such as
\&\s-1AUTHINFO\s0 \s-1USER/PASS\s0.  Like with res:, one auth group can have multiple
auth: parameters; they will be tried in order and the results of the first
successful one will be used.
.Ip "\fBdefault:\fR" 4
.IX Item "default:"
The default username for connections matching this auth group.  This is
the username assigned to the user at connection time if all resolvers fail
or if there are no res: parameters.  Note that it can be either a bare
username, in which case default-domain: is appended after an \f(CW\*(C`@\*(C'\fR if set,
or a full identity string containing an \f(CW\*(C`@\*(C'\fR, in which case it will be
used verbatim.
.Ip "\fBdefault-domain:\fR" 4
.IX Item "default-domain:"
The default domain string for this auth group.  If a user resolver or
authenticator doesn't provide a domain, or if the default username is used
and it doesn't contain a \f(CW\*(C`@\*(C'\fR, this domain is used to form the user
identity.  (Note that for a lot of setups, it's not really necessary for
user identities to be qualified with a domain name, in which case there's
no need to use this parameter.)
.Ip "\fBkey:\fR" 4
.IX Item "key:"
If this parameter is present, any connection matching this auth group will
have its privileges determined only by access groups containing a matching
key parameter.
.Ip "\fBrequire_ssl:\fR" 4
.IX Item "require_ssl:"
If set to true, an incoming connection only matches this auth group if
it is encrypted using \s-1SSL\s0.  This parameter is only valid given at configure
time with \fB\*(--with-openssl\fR.
.SH "ACCESS GROUP PARAMETERS"
.IX Header "ACCESS GROUP PARAMETERS"
.Ip "\fBusers:\fR" 4
.IX Item "users:"
The privileges given by this access group apply to any user identity which
matches this comma-separated list of wildmat patterns.  If this parameter
isn't given, the access group applies to all users.  Note that the absence
of this parameter is not the same as \f(CW\*(C`users: *\*(C'\fR; the latter will match
all successful authentications and any client matching an auth group with
a default: parameter, but the former will match any client including one
that failed authentication and is in an auth group without a default.
.Ip "\fBnewsgroups:\fR" 4
.IX Item "newsgroups:"
Users that match this access group are allowed to read and post to all
newsgroups matching this comma-separated list of wildmat patterns.
.Ip "\fBread:\fR" 4
.IX Item "read:"
Like the newsgroups: parameter, but the client is only given permission to
read the matching newsgroups.  This parameter is often used with post:
(below) and cannot be used in the same access group with a newsgroups:
parameter.
.Ip "\fBpost:\fR" 4
.IX Item "post:"
Like the newsgroups: parameter, but the client is only given permission to
post to the matching newsgroups.  This parameter is often used with read:
(above) to define the patterns for reading and posting separately (usually
to give the user permission to read more newsgroups than they're permitted
to post to).  It cannot be used in the same access group with a
newsgroups: parameter.
.Ip "\fBaccess:\fR" 4
.IX Item "access:"
A set of letters specifying the permissions granted to the client.  The
letters are chosen from the following set:
.RS 4
.Ip "R" 3
.IX Item "R"
The client may read articles.
.Ip "P" 3
.IX Item "P"
The client may post articles.
.Ip "A" 3
.IX Item "A"
The client may post articles with Approved: headers (in other words, may
approve articles for moderated newsgroups).  By default, this is not
allowed.
.Ip "N" 3
.IX Item "N"
The client may use the \s-1NEWNEWS\s0 command, overriding the global setting.
.Ip "L" 3
.IX Item "L"
The client may post to newsgroups that are set to disallow local posting
(mode \f(CW\*(C`n\*(C'\fR in the \fIactive\fR\|(5) file).
.RE
.RS 4
.Sp
Note that if this parameter is given and \f(CW\*(C`R\*(C'\fR isn't present in the access
string, the client cannot read regardless of newsgroups: or read:
parameters.  Similarly, if this parameter is given and \f(CW\*(C`P\*(C'\fR isn't present,
the client cannot post.  And if this parameter is given, \fIallownewnews\fR in
\&\fIinn.conf\fR\|(5) is never used to determine permission of \s-1NEWNEWS\s0 command usage.
This use of access: is deprecated and confusing;
it's strongly recommended that if the access: parameter is used, \f(CW\*(C`R\*(C'\fR and
\&\f(CW\*(C`P\*(C'\fR always be included in the access string and newsgroups:, read:, and
post: be used to control access.  (To grant read access but no posting
access, one can have just a read: parameter and no post: parameter.)
.RE
.Ip "\fBkey:\fR" 4
.IX Item "key:"
If this parameter is present, this access group is only considered when
finding privileges for users matching auth groups with this same key:
parameter.
.Ip "\fBlocaltime:\fR" 4
.IX Item "localtime:"
If a Date: header is not included in a posted article, \fInnrpd\fR\|(8) normally
adds a new Date: header in \s-1UTC\s0.  If this is set to true, the Date: header
will be formatted in local time instead.  This is a boolean value and the
default is false.
.Ip "\fBnewsmaster:\fR" 4
.IX Item "newsmaster:"
Used as the contact address in the help message returned by \fInnrpd\fR\|(8) if
the virtualhost: parameter is set to true.
.Ip "\fBstrippath:\fR" 4
.IX Item "strippath:"
If set to true, any Path: header provided by a user in a post is stripped
rather than used as the beginning of the Path: header of the article.
This is a boolean value and the default is false.
.Ip "\fBperlfilter:\fR" 4
.IX Item "perlfilter:"
If set to false, posts made by these users do not pass through the Perl
filter even if it is otherwise enabled.  This is a boolean value and the
default is true.
.Ip "\fBpythonfilter:\fR" 4
.IX Item "pythonfilter:"
If set to false, posts made by these users do not pass through the Python
filter even if it is otherwise enabled.  This is a boolean value and the
default is true.
.Ip "\fBvirtualhost:\fR" 4
.IX Item "virtualhost:"
If set to true, \fInnrpd\fR\|(8) will behave as if it's running on a server with a
different name.  This affects the Path:, Message-ID:, and X-Trace: headers
of posted articles, as well as the apparent Path: and Xref: headers of all
articles read by the client.  One of pathhost: or domain: must be set in
the same access group if this parameter is set to true, and \fInnrpd\fR\|(8) will
act as if the server name is the value of pathhost:, or domain: if
pathhost: isn't set or is set to the same value as in \fIinn.conf\fR\|(5).  One of
these parameters must be set to something different than that set in
inn.conf.
.PP
In addition, all of the following parameters are valid in access groups
and override the global setting in \fIinn.conf\fR\|(5).  See \fIinn.conf\fR\|(5) for the
descriptions of these parameters:  addnntppostingdate, addnntppostinghost,
backoff_auth, backoff_db, backoff_k, backoff_postfast, backoff_postslow,
backoff_trigger, checkincludedtext, clienttimeout, complaints, domain,
fromhost, localmaxartsize, moderatormailer, nnrpdauthsender,
nnrpdcheckart, nnrpdoverstats, nnrpdposthost, nnrpdpostport, organization,
pathhost, readertrack, spoolfirst, and strippostcc.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
Here is probably the simplest useful example of a complete readers.conf.
This gives permissions to read and post to all groups to any connections
from the example.com domain, and no privileges for anyone connecting from
anywhere else:
.PP
.Vb 4
\&    auth example.com {
\&        hosts: "*.example.com, example.com"
\&        default: <LOCAL>
\&    }
.Ve
.Vb 3
\&    access full {
\&        newsgroups: *
\&    }
.Ve
Note that the access realm has no users: key and therefore applies to any
user identity.  The only available auth realm only matches hosts in the
example.com domain, though, so any connections from other hosts will be
rejected immediately.
.PP
If you have some systems that should only have read-only access to the
server, you can modify the example above slightly by adding an additional
auth and access group:
.PP
.Vb 4
\&    auth lab {
\&        hosts: "*.lab.example.com"
\&        default: <LAB>
\&    }
.Ve
.Vb 4
\&    access lab {
\&        users: <LAB>
\&        read: *
\&    }
.Ve
If those are put in the file after the above example, they'll take
precedent (because they're later in the file) for any user coming from a
machine in the lab.example.com domain, and those users will only have read
access, not posting access.
.PP
Here's a similar example for a news server that accepts connections from
anywhere but requires the user to specify a username and password.  The
username and password is first checked against an external database of
usernames and passwords, and then against the system shadow password file:
.PP
.Vb 5
\&    auth all {
\&        auth: "ckpasswd -d /usr/local/news/db/newsusers"
\&        auth: "ckpasswd -s"
\&        default: <NOPASSWD>
\&    }
.Ve
.Vb 3
\&    access fail {
\&        newsgroups: !*
\&    }
.Ve
.Vb 4
\&    access full {
\&        users: *
\&        newsgroups: *
\&    }
.Ve
Note the use of two separate access groups.  When the user first connects,
there are no res: keys and no default, so they get an empty identity.  An
empty identity can't match a users: parameter, so they fall into the first
access group and receive no access.
.PP
If they then later authenticate, the username and password are checked
first by running \fBckpasswd\fR with the \fB\-d\fR option for an external dbm
file of encrypted passwords, and then with the \fB\-s\fR option to check the
shadow password database (note that ckpasswd may have to be setgid to a
shadow group to use this option).  If both of those fail, the user will
keep the empty identity; otherwise, they will acquire some other identity
string (whatever username they specified, since the password was valid)
and the second access group will match, giving them full access.
.PP
Note that the order of the access groups is significant.  If the fail
access group were last, it would always match, and no one would ever get
access regardless of whether they authenticated.
.PP
Finally, here's a very complicated example.  This is for an organization
that has an internal hierarchy example.* only available to local shell
users, who are on machines where identd can be trusted.  Dialup users have
to use a username and password, which is then checked against \s-1RADIUS\s0.
Remote users have to use a username and password that's checked against a
database on the news server.  Finally, the admin staff (users \*(L"joe\*(R" and
\&\*(L"jane\*(R") can post anywhere, including the example.admin.* groups that are
read-only for everyone else, and are exempted from the Perl filter.  For
an additional twist, posts from dialup users have their Sender header
replaced by their authenticated identity.
.PP
Since this organization has some internal moderated newsgroups, the admin
staff can also post messages with Approved: headers, but other users
cannot.
.PP
.Vb 5
\&    auth default {
\&        auth: "ckpasswd -f /usr/local/news/db/newsusers"
\&        default: <FAIL>
\&        default-domain: example.com
\&    }
.Ve
.Vb 7
\&    auth shell {
\&        hosts: *.shell.example.com
\&        res: ident
\&        auth: "ckpasswd -s"
\&        default: <FAIL>
\&        default-domain: shell.example.com
\&    }
.Ve
.Vb 6
\&    auth dialup {
\&        hosts: *.dialup.example.com
\&        auth: radius
\&        default: <FAIL>
\&        default-domain: dialup.example.com
\&    }
.Ve
.Vb 5
\&    access shell {
\&        users: *@shell.example.com
\&        read: *
\&        post: "*, !example.admin.*"
\&    }
.Ve
.Vb 5
\&    access dialup {
\&        users: *@dialup.example.com
\&        newsgroups: *,!example.*
\&        nnrpdauthsender: true
\&    }
.Ve
.Vb 4
\&    access other {
\&        users: "*@example.com, !<FAIL>@example.com"
\&        newsgroups: *,!example.*
\&    }
.Ve
.Vb 4
\&    access fail {
\&        users: "<FAIL>@*"
\&        newsgroups: !*
\&    }
.Ve
.Vb 6
\&    access admin {
\&        users: "joe@*,jane@*"
\&        newsgroups: *
\&        access: "RPA"
\&        perlfilter: false
\&    }
.Ve
Note the use of different domains to separate dialup from shell users
easily.  Another way to do that would be with key: parameters, but this
provides slightly more intuitive identity strings.  Note also that the
fail access group catches not only failing connections from external users
but also failed authentication of shell and dialup users and dialup users
before they've authenticated.  The identity string given for, say, dialup
users before \s-1RADIUS\s0 authentication has been attempted matches both the
dialup access group and the fail access group, since it's
<\s-1FAIL\s0>@dialup.example.com, but the fail group is last so it takes
precedence.
.PP
The shell auth group has an auth: parameter so that users joe and jane
can, if they choose, use username and password authentication to gain
their special privileges even if they're logged on as a different user on
the shell machines (or if ident isn't working).  When they first connect,
they'd have the default access for that user, but they could then send
\&\s-1AUTHINFO\s0 \s-1USER\s0 and \s-1AUTHINFO\s0 \s-1PASS\s0 (or \s-1AUTHINFO\s0 \s-1SIMPLE\s0) and get their
extended access.
.PP
Also note that if the users joe and jane are using their own accounts,
they get their special privileges regardless of how they connect, whether
the dialups, the shell machines, or even externally with a username and
password.
.SH "HISTORY"
.IX Header "HISTORY"
Written by Aidan Cully <aidan@panix.com> for InterNetNews.  Substantially
expanded by Russ Allbery <rra@stanford.edu>.
.PP
$Id$
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIinn.conf\fR\|(5), \fIinnd\fR\|(8), \fInewsfeeds\fR\|(5), \fInnrpd\fR\|(8), \fIwildmat\fR\|(3).
