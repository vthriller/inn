.\" $Revision$
.TH INCOMING.CONF 5
.SH NAME
incoming.conf \- names and addresses that feed us news
.SH DESCRIPTION
The file
.I <pathetc in inn.conf>/incoming.conf
consists of three types of entries: key/value, peer and group.
Comments are from the hash character ``#'' to the end of the line.
Blank lines are ignored.  All key/value entries within each type
must not be duplicated.
.PP
Key/value entries are a keyword immediately followed by a colon, at least
one blank and a value.  For example:
.PP
.RS
.nf
       max-connections: 10
.fi
.RE
.PP
A legal key does not contains blanks, colons, nor ``#''.
There are 3 different types of values:  integers, booleans, and strings.
Integers are as to be expected. A boolean value is either ``true'' or
``false'' (case is significant). A string value is any other sequence of
characters. If the string needs to contain whitespace, then it must be
quoted with double quotes.
.PP
Peer entries look like:
.PP
.RS
.nf
        peer <name> {
             # body
        }
.fi
.RE
.PP
The word ``peer'' is required. ``<name>''is a label for this peer.
The ``<name>'' is any string valid as a key. The body of a peer entry
contains some number of key/value entries.
.PP
Group entries look like:
.PP
.RS
.nf
        group <name> {
             # body
        }
.fi
.RE
.PP
The word ``group'' is required. The ``<name>'' is any string valid as a
key. The body of a group entry contains any number of the three types of
entries. So key/value pairs can be defined inside a group, and peers can
be nested inside a group, and other groups can be nested inside a group.
.PP
Key/value entries that are defined outside of all peer and group entries
are said to be at ``global scope''. Global key/value entries act as
defaults for peers. When
.IR innd (8)
looks for a specific value in a peer entry
(for example, the maximum number of connections to allow), if the value
is not defined in the peer entry, then the enclosing groups are examined
for the entry (starting at the closest enclosing group). If there are no
enclosing groups, or the enclosing groups don't define the key/value,
then the value at global scope is used.
.PP
A small example could be:
.PP
.RS
.nf
# Global value applied to all peers that have
# no value of their own.
max-connections: 5

# A peer definition.
peer uunet {
     hostname: usenet1.uu.net
}

peer vixie {
     hostname: gw.home.vix.com
     max-connections: 10 # override global value.
}

# A group of two peers who can open more
# connections than normal
group fast-sites {
     max-connections: 15

     # Another peer. The ``max-connections'' value from the
     # ``fast-sites'' group scope is used. The ``hostname'' value
     # defaults to the peer's name.
     peer data.ramona.vix.com {
     }

     peer bb.home.vix.com {
         hostname: bb.home.vix.com
         max-connections: 20 # he can really cook.
    }
}
.fi
.RE
.PP
Given the above configuration file, the defined peers would have the
following values for the ``max-connections'' key.
.PP
.RS
.nf
        uunet                  5
        vixie                 10
        data.ramona.vix.com   15
        bb.home.vix.com       20
.fi
.RE
.PP
Ten keys are allowed:
.TP
.BI hostname:
This key requires a string value. It is a list of hostnames separated by a
comma. A hostname is the host's FQDN, or the dotted quad ip-address of the
peer. If this key is not present in a peer block, the hostname defaults to
the label of the peer.
.TP
.BI streaming:
This key requires a boolean value. It defines whether streaming commands
are allowed from this peer. (default=true)
.TP
.BI max-connections:
This key requires a positive integer value. It defines the maximum number
of connections allowed. A value of zero specifies an unlimited number
of maximum connections (``unlimited'' or ``none'' can be used as synonym).
(default=0)
.TP
.BI hold-time:
This key requires a positive integer value. It defines the hold time before
closing, if the connection is over max-connections. A value of zero
specifies immediate close. (default=0)
.TP
.BI password:
This key requires a string value. It is used if you wish to require a peer
to supply a password. (default=no password)
.TP
.BI identd:
This key requires a string value. It is used if you wish to require a peer's
user name retrieved through identd match the specified string. (default=no
identd)
.TP
.BI patterns:
This key requires a string value. It is a list of
.IR newsfeeds (5)-style
list of newsgroups which are to be accepted from this host. (default="*")
.TP
.BI email:
This key requires a string value. Reserved for future use. (default=empty)
.TP
.BI comment:
This key requires a string value. Reserved for future use. (default=empty)
.TP
.BI skip:
This key requires a boolean value. Setting this entry causes this peer
to be skipped. (default=false)
.TP
.BI noresendid:
This key requires a boolean value. It defines whether
.IR innd (8)
should send
``431 RESENDID'' responses if a message is offered that is being received
from another peer. This can be useful for peers that resend messages
right away, as innfeed does. (default=false)
.TP
.BI nolist:
This key requires a boolean value. It defines whether a peer is allowed to
issue list command. (default=false)
.SH HISTORY
Written by Fabien Tassin <fta@sofaraway.org> for InterNetNews.
.de R$
This is revision \\$3, dated \\$4.
..
.R$ $Id$
.SH "SEE ALSO"
inn.conf(5),
innd(8),
newsfeeds(5),
uwildmat(3).
