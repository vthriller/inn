This is a rough and informal list of suggested improvements to INN, parts
of INN that need work, and other tasks yet undone.  Some of these may be
in progress, in which case the person working on them will be noted in
square brackets and should be contacted if you want to help.  Otherwise,
let inn-workers@isc.org know if you'd like to work on any item listed
below.

The list is divided into higher priority changes that will hopefully be
done in the near future, small or medium-scale projects for the future,
and long-term, large-scale problems.


High Priority Projects:

* Rewrite the configuration file parsing code, starting with the parser
  for inn.conf and eventually extending to all of the configuration file
  parsers in INN.  [Russ is actively working on this.]

* Add man pages for the default authenticators, as well as documentation
  on the readers.conf external program interface.  A good place to start
  is authprogs/README.readers.conf.

* Break the interface code common to all the authenticators out into a
  library that can be used by people writing new authenticators.  [Russ
  will work on this if no one beats him to it, as he needs it.]

* Completely rewrite the header parsing and turn it into a library so that
  all the various parts of INN that have to parse headers (innd, nnrpd,
  inews, rnews, controlchan, etc.) can all use the same code.  This will
  probably require a dynamic string library.  [Russ has the beginnings of
  a suitable dynamic string library, but it needs more work and a test
  suite.]

* Add documentation of adding and removing CNFS cycbuffs.

* Complete rewrite of history.  History should have a single API and the
  same interface for both innd and nnrpd, the current WIP cache and
  history cache should be integrated into that interface, things like
  message ID hashing should become a selectable property of the history
  file, and the history API should support multiple backend storage
  formats and automatically select the right one for an existing history
  file based on stored metainformation.  [Russ is working on this.]

* Better documentation of and support for UUCP feeds.  Ideally, this would
  include taking the sendbatches program from /isc/inn/unoff-contrib on
  ftp.isc.org, cleaning it up for inclusion into INN, and replacing both
  send-uucp and sendbatch with it.  This program is a C News style
  configurable batch generator with size, compression, and sending methods
  all as parameters in a configuration file.  [Russ has some saved
  articles on this that could form the basis of documentation.]

* INN shouldn't flush all feeds (particularly all program feeds) on
  newgroup or rmgroup.  Currently it reloads newsfeeds to reparse all of
  the wildmat patterns and rebuild the peer lists associated with the
  active file on group changes, and this forces a flush of all feeds.
  The best fix is probably to stash the wildmat pattern (and flags) for
  each peer when newsfeeds is read and then just using the stashed copy on
  newgroup or rmgroup, since otherwise the newsfeeds loading code would
  need significant modification.  But in general, innd is too
  reload-happy; it should be better at making incremental changes without
  reloading everything.

* Add authenticated Path support, based on the current USEFOR draft or the
  behavior of some other servers (such as Diablo).  [Andrew Gierth wrote a
  patch for part of this a while back, which Russ has.]

* Various parts of INN are using write or writev; they should all use
  xwrite or xwritev instead.  Even for writes that are unlikely to ever be
  partial, on some systems system calls aren't restartable and xwrite and
  xwritev properly handle EINTR returns.

* Some installed binaries and configuration files don't have man pages.
  In particular, man pages are needed for actsync.conf, actsync.ign,
  innreport.conf, and news2mail.cf.  (Some of these configuration files
  could instead be obsoleted by better implementations with better
  configuration syntaxes, or merged into other existing more general
  configuration files.)

* The recovery tools currently need serious work in the area of recovering
  overview for a single newsgroup using tradspool, analyzing a broken
  overview file (rather than just deleting it and regenerating it) and
  doing things like regenerating a .IDX from a .DAT for tradindexed, and
  renumbering the active file if it gets out of sync with the article
  numbers on disk.

* ctlinnd renumber for tradspool no longer works, in the sense that it
  doesn't detect and fix differences between the files present on disk and
  the low and high water marks in the active file or in the overview.


Future Projects:

* Rewrite configure, breaking all of the tests out into separate files.
  This really wants autoconf 2.50 and its additional support for including
  tests from separate files, and autoconf 2.50 will introduce a new set of
  basic primitives and incorporate a lot of the macros we're already using
  so that's a good point at which to do this.  At the same time,
  configure.in and Makefile.global.in should be fixed to use the same
  names as each other for various parameters.  Also, all of the AC_DEFINE
  calls in configure.in should use the three-argument form, hopefully
  eventually allowing us to dispense with an acconfig.h file.  [Russ plans
  to work on this after autoconf 2.50 is released; current target from the
  autoconf folks is September 2000.]

* Checkgroups processing should also update the newsgroups file, and it
  should be possible to synchronize the newsgroups file against external
  sources when that's done with the active file.  Likewise, when a
  newgroup is received for a group the server already carries, the
  newsgroups line should be updated if necessary.  See
  <ftp://ftp.tin.org/pub/news/servers/utils/docheckgroups> for a partial
  implementation.

* contrib needs to be reviewed, the best ideas integrated into INN, and
  some sort of general overview documentation written for everything else,
  at least sufficient to explain what things are for.

* All the old packages in unoff-contrib similarly should be reviewed for
  integration into INN.

* Look through <http://www.visi.com/~barr/INN.html> for stuff that should
  be included in INN (in particular, flowstats may be interesting).

* frontends/pullnews and contrib/backupfeed solve the same problem; the
  best ideas of both should be unified into one script.

* It may be better for INN on SysV-derived systems to use poll rather than
  select.  The semantics are better, and on some systems (such as Solaris)
  select is limited to 1024 file descriptors whereas poll can handle any
  number.  Unfortunately, the API is drastically different between the
  two and poll isn't portable, so supporting both cleanly would require a
  bit of thought.

* Currently only innd and innfeed increase their file descriptor limits.
  Other parts of INN, notably makehistory, may benefit from doing the same
  thing if they can without root privileges.

* Consider implementing the HEADERS command as discussed rather
  extensively in news.software.nntp.  [Greg Andruk has a preliminary
  patch.]

* Document the internal formats of the various overview methods, CNFS,
  timehash, and timecaf.  A lot of this documentation already exists in
  various forms, but it needs to be cleaned up and collected in one place,
  preferrably as a man page.

* One person wanted to allow access to the news server only to people who
  are members of a specific Unix group.  ckpasswd could do this as an
  option and it would probably be easy enough to add.

* rnews currently rejects articles with lines ending in CRLF, according to
  one report.  This should be checked, and if true, it should be more
  flexible about line endings.  [Matt McLeod is working on this.]

* The Tcl filtering support code has undergone serious bitrot and needs
  some work to fix it and make it work with modern versions of Tcl and the
  current version of INN.  It also lacks a lot of the functionality of the
  Perl and Python filters, if anyone cares.

* There have been a few requests for the ability to programmatically set
  the subject of the report generated by news.daily, with escapes that are
  filled in by the various pieces of information that might be useful.

* A PAM-based authenticator for the readers.conf external authentication
  support.

* If backoffdb is set in inn.conf and that directory doesn't exist, nnrpd
  refuses to start.  Either the directory should be created by the install
  process or nnrpd should just create it if it can.

* A bulk cancel command using the MODE CANCEL interface.  Possibly through
  ctlinnd, although it may be a bit afield of what ctlinnd is currently
  for.

* Sven Paulus's patch for nnrpd volume reports should be integrated.  See
  <ftp://ftp.tin.org/pub/news/servers/inn/unofficial-patches/
  patch-inn-2.2.x-artstat+list+overstat>.

* LIST NEWSGROUPS should probably only list newsgroups that are marked in
  the active file as valid groups.

* Lots of people encrypt X-Trace in various ways.  Should that be offered
  as a standard option?  The first data element should probably remain
  unencrypted so that the O flag in newsfeeds doesn't break.  Olaf Titz
  suggests:

      This can be done by formatting the (rest of) the header in a way
      that fields are always a multiple of 8 bytes and applying a 64 bit
      block cipher in ECB mode on it.  But then we would be better off
      using binary fields, as the timestamp is 9 bytes and an IP address
      10-12 bytes.

      Combining the timestamp and PID into one block, adding an
      authenticated user field and omitting the redundant formatted time
      would give the following format:

      X-Trace: g212.hadiko.de [395109AA000016FF] [AC14302A00000000] [...]
                               time    |    pid   ip      |reserved  user

  Should there also be an option not to generate X-Trace?  And this whole
  area may change if USEFOR ever standardizes poster trace information;
  it's been proposed to put it in the path tail instead.

* Validity checks on the poster's address.  (Although this could also be
  handled by the nnrpd posting filter.)

* Get rid of GetTimeInfo and TIMEINFO.  All the struct is is a struct
  timeval plus time zone information.  All of the parts of INN that deal
  with time zone information are isolated in lib/date.c.  The rest of INN
  uses GetTimeInfo where a plain call to time would often work fine, or
  at most gettimeofday, and there's no reason to compute the time zone
  everywhere.  Plus, it makes the code more readable to use standard
  functions and data types.

* Revisit support for aliased groups and what nnrpd does with them.
  Should posts to the alias automatically be redirected to the real group?
  Regardless, the error return should provide useful information about
  where to post instead.  Also, the new overview API, for at least some of
  the overview methods, truncated the group status at one character and
  lost the name of the group to which a group is aliased; that needs to be
  fixed.

* Add documentation for slave servers.  [Russ has articles from
  inn-workers that can be used as a beginning.]

* More details as to *why* a message ID is bad would be useful to return
  to the user, particularly for rnews, inews, etc.  rnews also reportedly
  rejects message IDs with trailing spaces, which can be hard to check.

* Support putting the active file and history file in different
  directories without hand-editing a bunch of files.

* ctlinnd flushlogs currently renames all of the log files.  It would be
  nice to support the method of log rotation that most other daemons
  support, namely to move the logs aside and then tell innd to reopen its
  log files.  Ideally, that behavior would be triggered with a SIGHUP.
  scanlogs would have to be modified to handle this.

* Replace all of the temporary file creation code in INN with something
  built on a safe temporary file function like mkstemp (or a local
  replacement, if the system doesn't have it).  [Matus Uhlar was working
  on this.]

* innfeed does odd things to Xref slaving if it ever goes to a backlog,
  since it then starts sending articles out of order and this can confuse
  reading clients.  There should be a configuration option that would
  cause it to spool any new articles if there's a backlog and always
  process the backlog in order.  [Sven Paulus had a preliminary patch for
  this, which Russ has.]

* Several people have Perl interfaces to pieces of INN that should ideally
  be part of the INN source tree in some fashion.  Greg Andruk has a bunch
  of stuff at <http://members.xoom.com/meowing/cssri/>, for example.

* INN's startup script should be sure to clean out old lock files and PID
  files for innfeed.

* nnrpd should have support for fixing broken Date headers supplied by
  clients, although now that most clients have been fixed for Y2K this may
  be less of a problem.  This should probably only affect a narrow set of
  Date headers with known problems, if done at all.  Conversely, locally
  posted articles should really get a stricter check than parsedate, which
  accepts a huge variety of things.

* It's been reported that innd doesn't deal well with syntax violations in
  incoming.conf and doesn't correctly report the problems (and inncheck
  doesn't catch them).  Some of this may be fixed with a new configuration
  parsing infrastructure.

* Various things may break when trying to use data written while compiled
  with large file support using a server that wasn't so compiled (and vice
  versa).  The main one is the history file, but also reportedly affected
  is the buffindexed (and probably the tradindexed) overview method.
  Ideally, all of INN's data files should be as portable as possible
  (although network byte order is almost definitely too much effort).

* makedbz should be more robust in the presence of malformed history
  lines, discarding with them or otherwise dealing with them.

* CNFS, if the cycbuff is larger than 2GB and it doesn't have large file
  support, reports a mysterious file not found error because it assumes
  all errors from stat are the result of the cycbuff not being found.

* nnrpd's NNTP command parsing interacts poorly with AUTHINFO and
  passwords containing spaces.  The correct solution isn't clear; check
  with the current NNTP RFC draft and how existing clients handle it?

* Some servers reject some IHAVE, TAKETHIS, or CHECK commands with 500
  syntax errors (particularly for long message IDs), and innfeed doesn't
  handle this particularly well at the moment.  It really should have an
  error handler for this case.  [Sven Paulus has a preliminary patch that
  needs testing.]

* actsyncd could stand a rewrite and cleaner handling of both
  configuration and syncing against multiple sources which are canonical
  for different sets of groups.

* There are various available patches for Cancel-Lock and an Internet
  draft; support should be added to INN for both generation and
  verification (definitely optional and not on by default at this point).

* It would be nice to be able to reload inn.conf (although difficult, due
  to the amount of data that's generated from it and stashed in various
  places).

* Editing the active file by hand can currently munge it fairly badly even
  if the server is throttled unless you reload active before restarting
  the server.  This could be avoidable for at least that particular case
  by checking the mtime of active before and after the server was
  throttled.

* remembertrash currently rejects and remembers articles with syntax
  errors as well as things like unwanted newsgroups and unwanted
  distributions, which means that if a peer sends you a bunch of mangled
  articles, you'll then also reject the correct versions of the articles
  from other peers.  This should probably be rethought.

* There's no sample and no documentation for LIST SUBSCRIPTIONS.

* Additional limits for readers.conf:  Limit on concurrent parallel reader
  streams, limit on KB/second download (preliminary support for this is
  already in), and a limit on maximum posted articles per day (tied in
  with the backoff stuff?).  These should be per-IP or per-user, but
  possibly also per-access group.

* innxmit currently can only handle storage API tokens; it should also be
  able to handle files and get the message ID from them so that you can
  use it to feed articles you got from some arbitrary source, not
  necessarily INN.  Ideally, it should also take message ID hashes (and
  use the history file to get the storage API token so that it can open
  the article and get the real message ID).

* timecaf should have more configurable parameters (at the least, how
  frequently to switch to a new CAF file should be an option).
  storage.conf should really be extended to allow method-specific
  configuration for things like this (and to allow the cycbuff.conf file
  to be merged into storage.conf).

* send-nntp and nntpsend basically do the same thing; send-nntp could
  probably be removed (possibly with some extra support in nntpsend for
  doing simpler things).


Long-Term Projects:

* INN's header handling needs to be checked against the current USEFOR
  draft.  This probably has to wait until after we have a header parsing
  library.

* The interface to embedded filters needs to be reworked.  The information
  about which filters are enabled should be isolated in the filtering API,
  and there should be standard API calls for filtering message IDs, remote
  posts, and local posts.  As part of this revision, all of the Perl
  callbacks should be defined before any of the user code is loaded, and
  the Perl loading code needs considerable cleanup.  At the same time as
  this is done, the implementation should really be documented; we do some
  interesting things with embedded filters and it would be nice to have a
  general document describing how we do it.  [Russ is planning on working
  on this at some point.]

* The innd filter should be able to specify additional or replacement
  groups into which an article should be filed, or even spool the article
  to a local disk file rather than storing it.  (See the stuff that the
  nnrpd filter can already do.)

* Add authentication via SASL to nnrpd.  This is a boatload of additional
  issues, particularly if we want to add authentication methods like
  Kerberos that require their own separate libraries (although we should
  use Cyrus's SASL libraries, which will simplify a lot of that).

* When articles expire out of a storage method with self-expire
  functionality, the overview and history entries for those articles
  should also be expired immediately.  Otherwise, things like the GROUP
  command don't give the correct results.  This will likely require a
  callback that can be passed to CNFS that is called to do the overview
  and history cleanup for each article overwritten.  It will also require
  the new history API.

* Feed control, namely allowing your peers to set policy on what articles
  you feed them (not just newsgroups but max article size and perhaps even
  filter properties like "non-binary").  Every site does this a bit
  differently.  Some people have web interfaces, some people use GUP, some
  people roll their own alternate things.  It would really be nice to have
  some good way of doing this as part of INN.  It's worth considering an
  NNTP extension for this purpose, although the first step is to build a
  generic interface that an NNTP extension, a web page, etc. could all
  use.  (An alternate way of doing this would be to extend IHAVE to pass
  the list of newsgroups as part of the command, although this doesn't
  seem as generally useful.)

* Traffic classification as an extension of filtering.  The filter should
  be able to label traffic as binary (e.g.) without rejecting it, and
  newsfeeds should be extended to allow feeding only non-binary articles
  (e.g.) to a peer.

* The interface between nnrpd and the external authenticators really
  should be wrapped into a library with a standard API for simplicity of
  writing authenticators.

* External authenticators should also be able to do things like return a
  list of groups that a person is allowed to read or post to.  Currently,
  maintaining a set of users and a set of groups, each of which some
  subset of the users is allowed to access, is far too difficult.  For a
  good starting list of additional functionality that should be made
  available, look at everything the Perl authentication hooks can do.
  This should probably wait for the configuration file parsing rewrite.

* Allow nnrpd to spawn long-running helper processes.  Not only would this
  be useful for handling authentication (so that the auth hooks could work
  without execing a program on every connection), but it may allow for
  other architectures for handling requests (such as a pool of helpers
  that deal only with overview requests).  More than that, nnrpd should
  *be* a long-running helper process that innd can feed open file
  descriptors to.  [Aidan Culley has ideas along these lines.]

* The tradspool storage method requires assigning a number to every
  newsgroup (for use in a token).  Currently this is maintained in a
  separate tradspool.map file, but it would be much better to keep that
  information in the active file where it can't drop out of sync.  A code
  assigned to each newsgroup would be useful for other things as well,
  such as hashing the directories for the tradindexed overview.  For use
  for that purpose, though, the active file would have to be extended to
  include removed groups, since they'd need to be kept in the active file
  to reserve their numbers until the last articles expired.

* INN really should be capable of both sending and receiving a
  headers-only feed (or even an overview-only feed) similar to Diablo and
  using it for the same things that Diablo does, namely clustering,
  pull-on-demand for articles, and the like.  This should be implementable
  as a new backend, although the API may need a few more hooks.  Both a
  straight headers-only feed that only pulls articles down via NNTP from a
  remote server and a caching feed where some articles are pre-fed, some
  articles are pulled down at first read, and some articles are never
  stored locally should be possible.

* The locking of the active file leaves something to be desired; in
  general, the locking in INN (for the active file, the history file,
  spool updates, overview updates, and the like) needs a thorough
  inspection and some cleanup.  A good place to start would be tracing
  through the pause and throttle code and write up a clear description of
  what gets locked where and what is safely restarted and what isn't.
  Long term, there needs to be a library locking routine used by
  *everything* that needs to write to the history file, active file, etc.
  and that keeps track of the PID of the process locking things and is
  accessible via ctlinnd.

* The proliferation of configuration files should be significantly
  reduced.  For example, cycbuff.conf, buffindexed.conf, and storage.conf
  could probably be combined; innfeed.conf, newsfeeds, and incoming.conf
  would ideally be combined; and several of the other small auxilliary
  files could be rolled into other, more general configuration files.
  This probably shouldn't be done until the new configuration parsing
  infrastructure is in place.

* One would ideally not want to offer articles to a peer that that peer
  has offered to us (even if we didn't accept them from that peer).  This
  is really hard to do right, but even a small cache might increase feed
  performance.

* There is a fundamental problem with the current design of the
  control.ctl file.  It combines two things:  A database of hierarchies,
  their maintainers, and related information, and a list of which
  hierarchies the local server should honor.  These should be separated
  out into the database (which could mostly be updated from a remote
  source like ftp.isc.org and then combined with local additions) and a
  configured list of hierarchies (or sub-hierarchies within hierarchies)
  that control messages should be honored for.  This should be reasonably
  simple although correct handling of checkgroups could get a mite tricky.

* Possible NNTP extension:  Compression of the protocol, using gzip,
  bzip2, or some other technique.  Particularly useful for long lists like
  the active file information or the overview information, but possibly
  useful in general for other things.

* Install wizards.  Configuring INN is currently very complex even for an
  experienced news admin, and there are several fairly standard
  configurations that shouldn't be nearly that complicated to get running
  out of the box.  A little interactive Perl script asking some simple
  questions could probably get a lot of cases easily right.


Complete Code Reorganization

At some point, we should probably abandon and archive the current CVS
repository, reimport all of the current source files, and start with a
fresh repository.  This would let us rename and move things around
arbitrarily, something CVS doesn't handle at all well.  Should this ever
be done, we should consider doing all of the following at the same time:

* Don't include any generated files in the CVS tree.  Maintainers should
  have autoconf and friends, as well as bison, around anyway.  This would
  save a bunch of extra check-ins, remove the danger of the generated
  files getting out of sync, and drastically reduce the repository size in
  the case of configure.

* storage should be reserved just for article storage; the overview
  methods should be in a separate overview tree.

* The split between frontends and backends is highly non-intuitive.  Some
  better organization scheme should be arrived at.  Perhaps something
  related to incoming and outgoing, with programs like cnfsstat moved into
  the storage directory with the other storage-related code?  Where should
  convdate really go?

* The lib directory possibly should be split so that it contains only code
  always compiled and part of INN, and the various replacements for
  possibly missing system routines are in a separate directory (such as
  replace).  These should possibly be separate libraries; there are things
  that currently link against libinn that only need the portability
  pieces.

* The doc directory really should be broken down further by type of
  documentation or section or something; it's getting a bit unwieldy.
