#! /usr/bin/perl

require 5.003;
use File::Basename;

if (scalar(@ARGV) <= 0) {
    printf STDERR "No overview methods are available\n";
    exit(1);
}

$objects = "";
foreach $file (@ARGV) {
    open(CFG, $file) || die "$!";
    $dir = dirname $file;
    while (<CFG>) {
	chomp;

	s/^\s+//;
	s/\s+$//;
	if (/^name\s*=\s*(\S+)/) {
	    $method = $1;
	    if (defined($methods{$method})) {
		print STDERR "$method has already been defined\n";
		exit(1);
	    } else {
		$methods{$method} = $file;
	    }
	}
	if (/^number\s*=\s*(\d+)/) {
	    $number = $1;
	    if (defined($number{$number})) {
		print STDERR "Method number $number was already allocated in $number{$number}\n";
		exit(1);
	    }
	    $number{$number} = $file;
	    $methodnum{$file} = $number;
	    next;
	}
	if (/^modules\s*=\s*(.*)/) {
	    (@objs) = split /\s+/,$1;
	    foreach $i (@objs) {
		$objects .= " $dir/$i";
	    }
	}
    }
    close(CFG);
}

open(DEF, ">ovmethods.c.new");
print DEF "/* This file is automatically generated by ovbuildconfig */\n\n";
print DEF "#include \"config.h\"\n";
print DEF "#include \"clibrary.h\"\n";
print DEF "#include \"ovinterface.h\"\n";

foreach $method (keys %methods) {
    $path = $methods{$method};
    $path =~ s/\.\///;
    $path =~ s/ovmethod\.config//g;
    print DEF "#include \"$path$method", ".h\"\n";
}
print DEF "\n";

print DEF "OV_METHOD ov_methods[", scalar(keys(%methods)), "] = {\n";

foreach $method (keys %methods) {
    print "Overview method '$method' configured\n";
    if ($first) {
	print DEF " },\n";
    }
    print DEF "\t{ \"$method\", \n\t  ";
    print DEF $method, "_open, ", $method, "_groupstats, \n\t  ", $method, "_groupadd, ";
    print DEF $method, "_groupdel, \n\t  ", $method, "_add, ", $method, "_cancel, \n\t  ";
    print DEF $method, "_opensearch, ", $method, "_search, ", $method, "_closesearch, \n\t  ";
    print DEF $method, "_getartinfo, ", $method, "_expiregroup, ", $method, "_ctl, ", $method, "_close";
    $first++;
}

print DEF " }\n};\n\n";
close(DEF);
`cmp -s ovmethods.c ovmethods.c.new`;
if ($? == 0) { unlink("ovmethods.c.new"); }
else { unlink("ovmethods.c"); rename("ovmethods.c.new","ovmethods.c"); }

open(H, ">ovmethods.h.new");
print H "/* This file is automatically generated by buildconfig */\n\n";
print H "#ifndef __OVMETHODS_H__\n";
print H "#define __OVMETHODS_H__\n\n";
print H "#include <ovinterface.h>\n\n";
print H "#define NUM_OV_METHODS\t", scalar(keys(%methods)), "\n\n";
print H "extern OV_METHOD ov_methods[NUM_OV_METHODS];\n\n";
print H "#endif /* __OVMETHODS_H__ */\n";
close(H);
`cmp -s ovmethods.h ovmethods.h.new`;
if ($? == 0) { unlink("ovmethods.h.new"); }
else { unlink("ovmethods.h"); rename("ovmethods.h.new","ovmethods.h");
}

open(LIST, ">Make.ovmethods.new");
print LIST "# This file is automatically generated by ovbuildconfig\n\n";
print LIST "OVSUBDIR = ";
foreach $method (keys %methods) {
    $path = $methods{$method};
    $path =~ s/\.\///;
    $path =~ s/\/ovmethod\.config//;
    print LIST "$path ";
}
print LIST "\n";
print LIST "OV_OBJECTS = $objects\n";
$objects =~ s/\.o\b/.lo/g;
print LIST "LOV_OBJECTS = $objects\n";
close(LIST);
`cmp -s Make.ovmethods Make.ovmethods.new`;
if ($? == 0) { unlink("Make.ovmethods.new"); }
else { unlink("Make.ovmethods"); rename("Make.ovmethods.new","Make.ovmethods"); }
