INN Python Filtering Support

This is $Revision$, dated $Date$.

    This file documents INN's built-in optional support for Python
    article filtering.  It is patterned after the TCL and Perl hooks
    previously added by Bob Heiney and Christophe Wolfhugel.

    For this filter to work successfully, you will need to have Python
    1.5.2 (the latest at this writing) installed.  You can obtain it
    from <URL:http://www.python.org/>.


NOTE TO RED HAT LINUX USERS:

    Python will be preinstalled, but it may not include all the
    headers and libraries required for embedding into INN.  You will
    need to add the development package.  Better yet, get the source
    kit from the above URL and build it yourself.  Be sure when
    installing Python on Red Hat, to run configure with
    '--prefix=/usr' so that there are no version conflicts with the
    "factory" installation.


INSTALLATION:

    Once you have built and installed Python, you can ask INN to use
    it by adding the '--with-python' switch to your configure command.

    See the ctlinnd(8) manual page to learn how to enable, disable and
    reload Python filters on a running server ('ctlinnd mode',
    'ctlinnd python y|n' and 'ctlinnd reload filter.python').

    Also, see the example filter_innd.py script in your filters
    directory for a demonstration of how to get all this working.


WRITING AN INND FILTER:

    You need to create a filter_innd.py module in INN's bin/filters
    directory.  A heavily-commented sample is provided that you can
    use as a template for your own filter.  There is also an INN.py
    module there which is not actually used by INN; it is just there
    so you can test your module interactively.

    First, define a class containing the methods you want to provide
    to innd.  Methods innd will use if present are:

        __init__(self):
            Not explicitly called by innd, but will be run whenever
            the filter is (re)loaded.

        filter_art(self, art):
            art is a dictionary containing an article's headers and
            body.  This method is called every time innd receives an
            article.  Not all keys need be present, but the following
            can be defined:
            
                Approved, Control, Date, Distribution, Expires, From,
                Lines, Message-ID, Newsgroups, Path, Reply-To, Sender,
                Subject, Supersedes, Bytes, Also-Control, References,
                Xref, Keywords, X-Trace, NNTP-Posting-Host,
                Followup-To, Organization, Content-Type, Content-Base,
                Content-Disposition, X-Newsreader, X-Mailer,
                X-Newsposter, X-Cancelled-By, X-Canceled-By,
                Cancel-Key, __LINES__, __BODY__

            __BODY__ is a string containing the article's entire body,
            and __LINES__ is an int holding innd's reckoning of the
            number of lines in the article.  All the other elements
            will be strings with the contents of the same-named
            article headers.

            If you want to accept an article, return nothing, or an
            empty string.  To reject, return a non-empty string.  The
            rejection strings will be shown to local clients and your
            peers, so keep that in mind when phrasing your rejection
            responses.

        filter_messageid(self, msgid):
            msgid is a string containing the ID of an article being
            offered by IHAVE or CHECK.  Like with filter_art(), the
            message will be refused if you return a non-empty string.
            If you use this feature, keep it light because it is
            called at a rather busy place in innd's main loop.  Also,
            do not rely on this function alone to reject by ID; you
            should repeat the tests in filter_art() to catch articles
            sent with TAKETHIS but no CHECK.

        filter_mode(self, oldmode, newmode, reason):
            When the operator issues a ctlinnd pause, throttle or go
            command, this function can be used to do something
            sensible in accordance with the state change.  Stamp a
            log file, save your state on throttle, etc.  oldmode and
            newmode will be strings containing one of the values in
            ('running', 'throttled', 'paused') -- oldmode is the state
            innd was in before ctlinnd was run, newmode is the state
            innd will be in after the command finishes.  reason is the
            comment string provided on the ctlinnd command line.

    To register your methods with innd, you need to create an instance
    of your class, import the built-in INN module, and pass the
    instance to INN.set_filter_hook().  For example:

        class Filter:
            def filter_art(self, art):
                ...
                blah blah
                ...

            def filter_messageid(self, id):
                ...
                yadda yadda
                ...

        import INN
        myfilter = Filter()
        INN.set_filter_hook(myfilter)


    When writing and testing your Python filter, don't be afraid to
    make use of try:/except: and the provided INN.syslog() function.
    stdout and stderr will be disabled, so your filter will die
    silently otherwise.

    Also, remember to try importing your module interactively before
    loading it, to ensure there are no syntax or variable errors.  One
    typo can ruin your whole filter.  A dummy INND.py module is
    provided to facilitate testing outside the server.

    You can define as many or few of the methods listed above as you
    want in your filter class (it's fine to define more methods for
    your own use; innd won't use them but your filter can).  If you
    *do* define these methods, GET THE PARAMETER COUNTS RIGHT.  There
    are checks in innd to see if the methods exist and are callable,
    but if you define one and get the parameter counts wrong, INND
    WILL DIE.  You have been warned.  Be careful with your return
    values, too.  the filter_art() and filter_messageid() methods have
    to return strings, or nothing at all.  If you return something
    like an int, innd will *not* be happy.


FUNCTIONS SUPPLIED BY THE BUILT-IN INN MODULE:

    Not only can innd use your Python code, but your Python code can
    use some of innd's features too.  Here is some sample Python code
    to show what you get:

    import INN

    # Python's native syslog module doesn't work inside innd, so the
    # INN module provides a replacement.  The first parameter tells
    # the Unix syslogger what severity to use; you can abbreviate down
    # to one letter and it's case insensitive.  Available levels are
    # (in increasing levels of seriousness) Debug, Info, Notice,
    # Warning, Err, Crit, and Alert. (If you provide any other string,
    # it will be defaulted to Notice.)  the second parameter is the
    # message text.  The syslog entries will go to the same log files
    # innd itself uses, with a 'python:' prefix.
    syslog('warning', 'I will not by this record.  It is scratched.')
    animals = 'eels'
    vehicle = 'hovercraft'
    syslog('N', 'My %s is full of %s.' % (vehicle, animals))

    # Let's cancel an article!  This only deletes the message on the
    # local server; it doesn't send out a control message or anything
    # scary like that.
    if INN.cancel('<meow$123.456@solvangpastries.edu>'):
        canceled = "yup"
    else:
        canceled = "nope"

    # Check if a given message is in history. This doesn't
    # necessarily mean the article is on your spool; canceled and
    # expired articles hang around in history for a while, and
    # rejected articles will be in there if you have enabled
    # remember_trash in inn.conf.
    if INN.havehist('<z456$789.abc@isc.org'):
        comment = "*yawn* I've already seen this article."
    else:
        comment = 'Mmm, fresh news.'

    # Here we are running a local spam filter, so why eat all those
    # cancels?  We can add fake entries to history so they'll get
    # refused.  Returns 1 on success, 0 on failure
    canceled_id = "<meow$123.456@isc.org>"
    if INN.addhist("<cancel." + canceled_id[1:]):
        thought = "Eat my dust, roadkill!"
    else:
        thought = "Darn, someone beat me to it."

    # We can look at the header or all of an article already on spool,
    # too.  Might be useful for long-memory despamming or
    # authentication things.  Each is returned (if present) as a
    # string; otherwise you'll end up with an empty string.    
    artbody = INN.article('<foo$bar.baz@bungmunch.edu>')
    artheader = INN.head('<foo$bar.baz@bungmunch.edu>')

    # Finally, do you want to see if a given newsgroup is moderated or
    # whatever?
    froupflag = INN.newsgroup('alt.fan.karl-malden.nose')
    if froupflag == '':
        moderated = 'no such newsgroup'
    elif froupflag == 'y':
        moderated = "nope"
    elif froupflag == 'm':
        moderated = "yep"
    else:
        moderated = "something else"

=-=-=
This document and the innd Python interface were written by Greg
Andruk (nee Fluffy) <gerglery@usa.net>.
